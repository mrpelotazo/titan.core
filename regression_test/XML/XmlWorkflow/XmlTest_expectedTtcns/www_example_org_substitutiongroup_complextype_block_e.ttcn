/******************************************************************************
* Copyright (c) 2000-2018 Ericsson Telecom AB
*
* XSD to TTCN-3 Translator
*
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v2.0
* which accompanies this distribution, and is available at
* https://www.eclipse.org/org/documents/epl-2.0/EPL-2.0.html
*
* Contributors:
*   Balasko, Jeno
*   Szabo, Bence Janos
*
******************************************************************************/
//
//  File:          www_example_org_substitutiongroup_complextype_block.ttcn
//  Description:
//  References:
//  Rev:
//  Prodnr:
//  Updated:       Thu Nov 12 12:43:46 2014
//  Contact:       http://ttcn.ericsson.se
//
////////////////////////////////////////////////////////////////////////////////
//	Generated from file(s):
//	- substitutiongroup_complextype_block.xsd
//			/* xml version = "1.0" encoding = "UTF-8" */
//			/* targetnamespace = "www.example.org/substitutiongroup/complextype/block" */
////////////////////////////////////////////////////////////////////////////////
//     Modification header(s):
//-----------------------------------------------------------------------------
//  Modified by:
//  Modification date:
//  Description:
//  Modification contact:
//------------------------------------------------------------------------------
////////////////////////////////////////////////////////////////////////////////


module www_example_org_substitutiongroup_complextype_block {


import from XSD all;


/* SUBSTITUTABLE PARENT TYPE */


type record ParentType
{
	record of XSD.String foo_list,
	XSD.String bar
}
with {
  variant (foo_list) "untagged";
  variant (foo_list[-]) "name as 'foo'";
};


type RestrictedType RestrictedTypeElem
with {
  variant "element";
};


/* The restricting type is: */


type record RestrictedType
{
	record length(1 .. infinity) of XSD.String foo_list,
	XSD.String bar
}
with {
  variant "name as uncapitalized";
  variant (foo_list) "untagged";
  variant (foo_list[-]) "name as 'foo'";
};


type union Head_group
{
	RestrictedType head,
	RestrictedTypeElem restrictedTypeElem
}
with {
  variant "untagged";
  variant (head) "form as qualified";
  variant (restrictedTypeElem) "name as capitalized";
  variant (restrictedTypeElem) "block";
};


}
with {
  encode "XML";
  variant "namespace as 'www.example.org/substitutiongroup/complextype/block' prefix 'this'";
  variant "controlNamespace 'http://www.w3.org/2001/XMLSchema-instance' prefix 'xsi'";
}
