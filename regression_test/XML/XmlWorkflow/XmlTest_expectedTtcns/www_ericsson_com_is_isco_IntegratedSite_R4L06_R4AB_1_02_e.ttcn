/*******************************************************************************
* Copyright (c) 2000-2018 Ericsson Telecom AB
*
* XSD to TTCN-3 Translator
*
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v2.0
* which accompanies this distribution, and is available at
* https://www.eclipse.org/org/documents/epl-2.0/EPL-2.0.html
*
* Contributors:
*   Balasko, Jeno
*   Lovassy, Arpad
*   Raduly, Csaba
*   Szabo, Bence Janos
*
*******************************************************************************/
//
//  File:          www_ericsson_com_is_isco_IntegratedSite_R4L06_R4AB_1_02.ttcn
//  Description:
//  References:
//  Rev:
//  Prodnr:
//  Updated:
//  Contact:       http://ttcn.ericsson.se
//
////////////////////////////////////////////////////////////////////////////////
//	Generated from file(s):
//	- IntegratedSite.xsd
//			/* xml version = "1.0" encoding = "UTF-8" */
//			/* targetnamespace = "http://www.ericsson.com/is/isco/IntegratedSite/R4L06/R4AB_1.02" */
////////////////////////////////////////////////////////////////////////////////
//     Modification header(s):
//-----------------------------------------------------------------------------
//  Modified by:
//  Modification date:
//  Description:
//  Modification contact:
//------------------------------------------------------------------------------
////////////////////////////////////////////////////////////////////////////////


module www_ericsson_com_is_isco_IntegratedSite_R4L06_R4AB_1_02_e {


import from XSD all;


import from tail_f_com_ns_confd_1_0_e all;


import from www_ericsson_com_is_isco_IsTypes_R4L06_R4AB_1_02_e all;


type record DataModelVersionType_10
{
	XSD.Integer major,
	XSD.Integer minor
}
with {
  variant "name as 'dataModelVersionType-10'";
};


/* Data to specify FTP server info. */
type record FtpData
{
	/* Hostname to FTP server. */
	XSD.Token host,
	/* Username to FTP server. */
	XSD.Token user,
	/* Password to FTP server. */
	XSD.Token password,
	/* Absolute path including filename. */
	XSD.Token path
};


type record BsProdFilterType_1
{
	/* The blade system product number (CSA product number). */
	XSD.Token prodNo,
	/* The revision of the blade system product (CSA product revision). */
	XSD.Token prodRev
}
with {
  variant "name as 'bsProdFilterType-1'";
};


/* Data to specify job status during its execution.
	A description of "jobs" can be found in the document "Service Guide - Software",
	6/154 43-CNA 113 13 Uen. */
type record JobData
{
	/* Date and time when the job was ordered. */
	XSD.DateTime jobDateOrdered,
	/* Indicator of job status. */
	JobStatusType_34 jobStatus,
	/* Possible result of a job action. */
	JobResultType_35 jobResult,
	/* Textual description of additional info about the job. */
	XSD.Token jobInfo,
	/* Current progress step of the job. This parameter is used
	    together with jobLastStep to
	    be able to present rough progress tracking to the user.
	    For example: "'jobProgress' of 'jobLastStep' steps complete" */
	XSD.UnsignedInt jobProgress,
	/* Last progress step of the job. This parameter is used
	    together with jobProgress to
	    be able to present rough progress tracking to the user.
	    For example: "'jobProgress' of 'jobLastStep' steps complete" */
	XSD.UnsignedInt jobLastStep,
	/* Determines if progress reports should be issued during the job.
	    If this parameter is true, progress reports will be issued at
	    each step of the job. If this parameter is false, no progress
	    reports are issued. When a job finishes, a report describing
	    the result of the job is however always issued. */
	XSD.Boolean jobProgressReport
};
//with {
  //variant (jobProgressReport) "text 'true' as '1'";
  //variant (jobProgressReport) "text 'false' as '0'";
//};


type XSD.Token DnsDomainType_14 (pattern "[a-zA-Z]+(.[a-zA-Z]*)*")
with {
  variant "name as 'dnsDomainType-14'";
};


/* Inter-subrack link type definition. The valid values
      corresponds to using a inter-subrack link board
      or connecting the subracks using MXB front ports. */
type XSD.Token InterSubrackLink_HwmIslType (pattern "islb|frontPort");


/* The knock-out preference of a blade.
       \"protected\" reflects a mode where the blade
       is immune to shutdown or lock requests. */
type XSD.Token HwmKnockOutPreference (pattern "normal|protected");


type XSD.Token UpdateModeType_9 (pattern "unsafe|readOnly|safe|preliminary")
with {
  variant "name as 'updateModeType-9'";
};


/* This datatype defines the valid redundancy groups for bs blades. */
type XSD.Token HwmRedundancyGroups (pattern "0|1|2|3|4|5|6|7|8|9");


/* HwmSlotState type definition. This type describes the different slot states.
      Used and unused corresponds to whether the slot is assigned to a blade within
      a blade system and vice versa.Occupied and empty corresponds to whether a
      physical blade is inserted in the slot and vice versa. */
type XSD.Token Slot_HwmSlotState (pattern "unusedEmpty|usedEmpty|unusedOccupied|usedOccupied");


type record of ObjectRef RelatedSDPsType_32
with {
  variant "name as 'relatedSDPsType-32'";
  variant "list";
};


type XSD.Integer Subrack1IdType_22 (0 .. 31)
with {
  variant "name as 'subrack1IdType-22'";
};


type XSD.Integer RlspLinkDownThresholdType_12 (0 .. 65535)
with {
  variant "name as 'rlspLinkDownThresholdType-12'";
};


type XSD.Integer SubrackIdType_3 (0 .. 31)
with {
  variant "name as 'subrackIdType-3'";
};


type XSD.Integer Subrack2IdType_26 (0 .. 31)
with {
  variant "name as 'subrack2IdType-26'";
};


type XSD.Integer IdentityType_7 (0 .. 4096)
with {
  variant "name as 'identityType-7'";
};


type XSD.Integer NumberType_21 (0 .. 25)
with {
  variant "name as 'numberType-21'";
};


type XSD.Integer SlotNoType_4 (0 .. 25)
with {
  variant "name as 'slotNoType-4'";
};


type XSD.Integer PhysicalAddrPlug0Type_18 (0 .. 15)
with {
  variant "name as 'physicalAddrPlug0Type-18'";
};


/* The operational state of blades and blade systems.
      This state reflects if the entity is on or off. */
type XSD.Token HwmOperationalState (pattern "disabled|enabled");


type XSD.Integer PhysicalAddrPlug1Type_19 (0 .. 15)
with {
  variant "name as 'physicalAddrPlug1Type-19'";
};


/* Describes how to interpret a given file name and path when
	downloading files.
	For exact file match strategy, all files that exactly
	match the given file name will match.
	For prefix file match strategy, all files that match
	the given prefix will match.
	If exact or prefix has been selected and if the path ends
	with a directory name, all files in that directory will match.
	The value unknown is deprecated. */
type XSD.Token SwmMatchStrategy (pattern "exact|prefix|unknown");


type record of ObjectRef BladeSwgRefsType_2
with {
  variant "name as 'bladeSwgRefsType-2'";
  variant "list";
};


/* This datatype defines the valid characters of name attributes. */
type XSD.Token HwmValidNameCharacters (pattern "[-a-zA-Z0-9_\\\(\) .:;]*");


/* The bus type used by a blade. */
type XSD.Token HwmBusType (pattern "ipmi|mbus");


type enumerated Subrack1XslotType_23
{
	int0(0),
	int25(25)
}
with {
  variant "useNumber";
  variant "name as 'subrack1XslotType-23'";
};


type XSD.Integer Subrack1PslotType_24 (0 .. 25)
with {
  variant "name as 'subrack1PslotType-24'";
};


type XSD.Token JobResultType_35 (pattern "ok|inputError|executionError|unknown")
with {
  variant "name as 'jobResultType-35'";
};


type enumerated Subrack2XslotType_27
{
	int0(0),
	int25(25)
}
with {
  variant "useNumber";
  variant "name as 'subrack2XslotType-27'";
};


type XSD.Integer Subrack2PslotType_28 (0 .. 25)
with {
  variant "name as 'subrack2PslotType-28'";
};


type XSD.Integer PhysicalAddrPlug3Type_20 (0 .. 15)
with {
  variant "name as 'physicalAddrPlug3Type-20'";
};


type XSD.Token StatusType_33 (pattern "complete|incomplete|inconsistent")
with {
  variant "name as 'statusType-33'";
};


type XSD.Token JobStatusType_34 (pattern "notStarted|ongoing|complete")
with {
  variant "name as 'jobStatusType-34'";
};


type enumerated DummyEmptyType
{
	x
}
with {
  variant "text 'x' as ''";
};


type XSD.Integer WidthType_16 (1 .. 12)
with {
  variant "name as 'widthType-16'";
};


type XSD.Integer MaskType_5 (0 .. 32)
with {
  variant "name as 'maskType-5'";
};


type XSD.Integer MaskType_6 (0 .. 32)
with {
  variant "name as 'maskType-6'";
};


type XSD.Integer RlspLinkUpThresholdType_13 (0 .. 65535)
with {
  variant "name as 'rlspLinkUpThresholdType-13'";
};


/* The availability status of blades and blade systems.
       This status is set by the system, depending on the
       availability conditions of the concerned unit. */
type XSD.Token HwmAvailabilityStatus (pattern "available|failed|offLine|dependency|degraded|upgrading|startingUp|goingOffLine|notInstalled|powerOff");


/* The administrative state of blades and blade systems.
      This state reflects what the administrator has done. */
type XSD.Token HwmAdministrativeState (pattern "locked|shuttingDown|unlocked");


type XSD.Integer PbitsType_8 (0 .. 7)
with {
  variant "name as 'pbitsType-8'";
};


type XSD.Token IslTypeType_30 (pattern "islb|frontPort")
with {
  variant "name as 'islTypeType-30'";
};


type XSD.Token TypeType_31 (pattern "bladeSystemInformation|bladeInformation|application|rootFileSystem|kernel|correction|ipmi")
with {
  variant "name as 'typeType-31'";
};


type XSD.Integer Subrack1PortType_25 (1 .. 6)
with {
  variant "name as 'subrack1PortType-25'";
};


type XSD.Integer IdType_17 (0 .. 31)
with {
  variant "name as 'idType-17'";
};


type XSD.Integer Subrack2PortType_29 (1 .. 6)
with {
  variant "name as 'subrack2PortType-29'";
};


type XSD.Token ModeType_15 (pattern "prepare|publish|accept|reject|purge")
with {
  variant "name as 'modeType-15'";
};


type XSD.Integer RlspMarkerGenerateIntervalType_11 (10 .. 200)
with {
  variant "name as 'rlspMarkerGenerateIntervalType-11'";
};


/* Management information model for the integrated site.
    This also the top model in the configuration structure under which all
    blade system specific models are mounted.

    Hardware management, software management and network configuration are the
    services that are available through this model in IS 2.0 perspective. */
type record IntegratedSite
{
	/* A collection of administrative data for the entire site. */
	record {
		/* Human-readable name for the site. */
		XSD.Token siteAlias optional,
		/* IS Customer identification code. */
		XSD.Token ipb optional,
		/* System restart. */
		record {
			/* Returns true if a SIS sequential restart is ongoing, otherwise false. */
			XSD.Token sisSRSongoing optional
		} systemRestart
	} administrativeData,
	/* Parent of all blade systems. */
	/* <xs:key name="key_IntegratedSite_BladeSystems_BladeSystem">
            <xs:selector xpath="IntegratedSite:BladeSystem"/>
            <xs:field xpath="IntegratedSite:name"/>
          </xs:key> */
	record {
		/* This class describes a blade system.
      It serves as a mount point for the blade system specific model. */
		/* <xs:key name="key_IntegratedSite_BladeSystems_BladeSystem_Blade">
                  <xs:selector xpath="IntegratedSite:Blade"/>
                  <xs:field xpath="IntegratedSite:subrackId"/>
                  <xs:field xpath="IntegratedSite:slotNo"/>
                </xs:key> */
		record of record {
			/* A required user friendly blade system name. The name must be unique within the site
        and can only be set once. */
			HwmValidNameCharacters name,
			/* An optional blade system alias. The default value of the alias is the blade system name.
        The alias can be updated as long as the blade system state is enabled/available. */
			HwmValidNameCharacters alias optional,
			/* An identifier for the blade system. This number increases in steps of 1 for each
        created blade system. */
			XSD.Integer number optional,
			/* Name of the blade system type. */
			XSD.Token typeName optional,
			/* Reference to the software group (SWG) that the blade system implements. */
			ObjectRef swgRef,
			/* Optional reference to the software correction package (SCP) applied to the software group. */
			ObjectRef scpRef optional,
			/* The administrative state of the blade system. */
			HwmAdministrativeState admState optional,
			/* The operational state of the blade system. */
			HwmOperationalState opState optional,
			/* The availability status of the blade system. */
			HwmAvailabilityStatus availStatus optional,
			/* Optional reference to the blade system domain that the blade system belongs to.
        A blade system domain is a purely logical concept that enables
        grouping of  blade systems. */
			ObjectRef bsdRef optional,
			/* IP address of the blade system OAM Master. */
			InetAddressIPv4 bsomAddress optional,
			/* The reference to the external boot server class (if any) that
    		this blade system has:
            /IntegratedSite/NetworkConfiguration/ExternalBootServer */
			ObjectRef externalBootServerRef optional,
			/* A flag which tells if a private network should be
    		automatically created when the bladesystem is created. */
			XSD.Boolean autoCreatePrivateNetwork optional,
			/* If the blade system has a management information model, this
			  attributes shows the namespace for the currently active software
			  on the blade system. If the blade system does not have a management
                          information model, this attribute does not have a value. */
			XSD.Token namespace optional,
			/* This class describes a blade.
      A blade is identified by a subrack number and a slot number. */
			/* <xs:key name="key_IntegratedSite_BladeSystems_BladeSystem_Blade_LinkSap">
                        <xs:selector xpath="IntegratedSite:LinkSap"/>
                        <xs:field xpath="IntegratedSite:id"/>
                      </xs:key> */
			record of record {
				/* A reference to the associated subrack, which is the value of 'subrackId'
	for the associated subrack. The subrack identifier, where the blade is located at. */
				SubrackIdType_3 subrackId,
				/* The slot number for this blade within the subrack. */
				SlotNoType_4 slotNo,
				/* The slot label of the blade. It will only be set at creation.
	This should be used in alarms related to the slot to inform the
	operator of what position in the subrack the blade is localised.
	For E-GEM (Enhanced Generic Ericsson Magazine) subracks it will result in
        a string, for example X02 for slot 0 up to X80 for slot 25. */
				XSD.Token slotLabel optional,
				/* Reference to the type of the blade. */
				ObjectRef typeRef,
				/* Reference to the software group with the lowest allowed revision for the blade. */
				ObjectRef requiredSwgRef optional,
				/* Reference to the software group installed on the blade. */
				ObjectRef bladeSwgRef optional,
				/* Indicates if this blade is a BSOM candidate. */
				XSD.Boolean bsom optional,
				/* Set to protected if the  blade should not be locked or shutdown before the
	main switch blade. */
				HwmKnockOutPreference knockOutPreference optional,
				/* An optional user friendly blade name, which is always possible to set.
	Default value for non-infrastructure blades is an empty string.
        MXB blade user label defaults to blade type and subrack-slot, for example
        \"MXB 0-0\" */
				XSD.Token userLabel optional,
				/* The administrative state of the blade. */
				HwmAdministrativeState admState optional,
				/* The operational state of the blade. */
				HwmOperationalState opState optional,
				/* The availability status of the blade. */
				HwmAvailabilityStatus availStatus optional,
				/* The type of maintenance bus on the connected blade. */
				HwmBusType busType optional,
				/* The product number of the blade. */
				XSD.Token prodNo optional,
				/* The product revision of the blade. */
				XSD.Token prodRev optional,
				/* The serial number of the blade. */
				XSD.Token serialNo optional,
				/* The product name of the blade. */
				XSD.Token prodName optional,
				/* The vendor name of the blade. */
				XSD.Token vendor optional,
				/* The manufacturing date of the blade. */
				XSD.Token mfgDate optional,
				/* The aggregated MAC address of the blade. */
				MacAddress macAddressAggregate optional,
				/* The left link MAC address of the blade. Only used by some blades. */
				MacAddress macAddressLeft optional,
				/* The right link MAC address of the found Blade. Only used by some blades. */
				MacAddress macAddressRight optional,
				/* The date when the blade was last changed. */
				XSD.Token changeDate optional,
				/* The redundancy group for this blade within the blade system.
        This parameter is used to protect the last blade in the blade system
        from getting restarted by LanFM. */
				HwmRedundancyGroups redundancyGroup optional,
				/* IP address on the IS Boot (ISBS) subnet. */
				InetAddressIPv4 isbsAddress optional,
				/* IP address on the IS OAM Boot (ISOB) subnet. */
				InetAddressIPv4 isobAddress optional,
				/* IP address on the IS Local Craft (ISLCT) subnet. */
				InetAddressIPv4 islctAddress optional,
				/* A Blade may have one or more resilient interfaces
      to the backplane. Such an interface is called a
      Link Service Access Point, which is the
      point where you access layer 2. Link Service Access Points are
      automatically created and deleted along with the
      hosting blade. */
				record of record {
					/* The id of a LinkSap is a number from 0 to X within the slot. */
					XSD.Integer id
				} linkSap_list
			} blade_list,
			/* The MO branch where the blade system specific
      Network resources are mapped to common Integrated Site
      resources. This mapping activity must be performed before
      a new blade or blade system successfully can be
      unlocked via the Hardware service. Some blade
      systems have partly pre-registered
      network requirements, while others demand that
      you read the corresponding information from
      separate Operation Procedure Instructions and
      manually register the blade system network
      requirements. The pre-registered network
      requirements automates parts of the blade
      system-specific configuration activity.

      In an Integrated Site, the blade systems obtain
      their actual network configuration dynamically in
      runtime. When you change the network
      configuration it will affect blade systems. In
      order to minimize the disturbance of active blade
      systems, the changes are normally applied in a
      separate storage which is not visible to the
      blade systems. In order to make use of the new
      unpublished configuration, it must explicitly be
      published by altering the updateMode. If the new
      settings introduces severe problems the
      configuration can be reverted to the old settings
      by altering the updateMode.

      The common Network configuration including
      updateMode and its publish mechanism is specified
      in class /IntegratedSite/NetworkConfiguration. */
			/* <xs:key name="key_IntegratedSite_BladeSystems_BladeSystem_BsNetworkConfiguration_BsIpTrafficClass">
                        <xs:selector xpath="IntegratedSite:BsIpTrafficClass"/>
                        <xs:field xpath="IntegratedSite:name"/>
                      </xs:key>
                      <xs:key name="key_IntegratedSite_BladeSystems_BladeSystem_BsNetworkConfiguration_BsLanTrafficClass">
                        <xs:selector xpath="IntegratedSite:BsLanTrafficClass"/>
                        <xs:field xpath="IntegratedSite:name"/>
                      </xs:key>
                      <xs:key name="key_IntegratedSite_BladeSystems_BladeSystem_BsNetworkConfiguration_BsLogicalNetwork">
                        <xs:selector xpath="IntegratedSite:BsLogicalNetwork"/>
                        <xs:field xpath="IntegratedSite:name"/>
                      </xs:key>
                      <xs:key name="key_IntegratedSite_BladeSystems_BladeSystem_BsNetworkConfiguration_BsVlan">
                        <xs:selector xpath="IntegratedSite:BsVlan"/>
                        <xs:field xpath="IntegratedSite:name"/>
                      </xs:key> */
			record {
				/* A BS IP Traffic Class is the
       requirement a blade system has of an IS IP
       Traffic Class.

       BS IP Traffic Classes can either be created
       manually by the operator or they can be automatically
       created from pre-registered network requirements
       bundled with the blade system software. Regardless
       of how they are created, each one needs to be
       mapped to an IS IP Traffic Class before the blades
       can be unlocked via the Hardware service. The
       mapping is done with the 'isIpTrafficClassRef'
       attribute.

       Different instances of a blade system type may
       call their BS IP Traffic Classes the same thing but
       in the end the IS Site Designer may choose to
       map them to the same or different IS IP Traffic
       Classes. */
				record of record {
					/* The name of the BS IP Traffic Class. It is
         unique within the blade system. */
					XSD.Token name,
					/* A short description of The BS IP Traffic Class. */
					XSD.Token description optional,
					/* The mapping to a corresponding IS IP Traffic
	Class. This mapping must be done before the
	blades of the blade system can be unlocked.
    Mapped to:
     /IntegratedSite/NetworkConfiguration/IsIpTrafficClass */
					ObjectRef isIpTrafficClassRef optional
				} bsIpTrafficClass_list,
				/* A BS LAN Traffic Class is the
	requirement a blade system has of an IS LAN
	Traffic Class. Different instances of a Blade
	System type may call their BS Traffic Classes
	the same thing but in the end the IS Site
	Designer may choose to map them to the same or
	different IS LAN Traffic Classes.

       	BS LAN Traffic Classes can either be created
       	manually by the operator or they can be automatically
       	created from pre-registered network requirements
       	bundled with the blade system software. Regardless
       	of how they are created, each one needs to be
       	mapped to an IS LAN Traffic Class before the blades
       	can be unlocked via the Hardware service. The
       	mapping is done with the 'isLanTrafficClassRef'
       	attribute. */
				record of record {
					/* Name of the BS LAN Traffic Class. It is unique within the blade system. */
					XSD.Token name,
					/* Short description of the BS LAN Traffic Class. */
					XSD.Token description optional,
					/* The mapping to a corresponding IS LAN Traffic
	Class. This mapping must be done before the
	blades of the blade system can be unlocked.
    Mapped to:
    /IntegratedSite/NetworkConfiguration/IsLanTrafficClass */
					ObjectRef isLanTrafficClassRef optional
				} bsLanTrafficClass_list,
				/* A BS Logical Network is associated to
       one IS Logical Network. A BS Logical Network
       is the requirement a blade system has of an
       IS Logical Network.

       BS Logical Networks can either be created
       manually by the operator or they can be
       automatically created from pre-registered
       network requirements bundled with the Blade
       System software. Regardless of how they are
       created, each one needs to be mapped to an IS
       Logical Network before the blades can be
       unlocked. The mapping is done with the
       'isLogicalNetworkRef' attribute.

       Different instances of a blade system type may call
       their BS Logical Networks the same thing but in
       the end the IS Site Designer can choose to map
       them to the same or different IS Logical
       Network. */
				/* <xs:key name="key_IntegratedSite_BladeSystems_BladeSystem_BsNetworkConfiguration_BsLogicalNetwork_BsSubnet">
                              <xs:selector xpath="IntegratedSite:BsSubnet"/>
                              <xs:field xpath="IntegratedSite:name"/>
                            </xs:key> */
				record of record {
					/* Name of the BS logical network. It is unique within the blade system. */
					XSD.Token name,
					/* Short description of the BS Logical Network. */
					XSD.Token description optional,
					/* Flag that shows whether the BS Logical Network
	is private for this blade system or if it may
	be shared among several blade systems. */
					XSD.Boolean private_ optional,
					/* The mapping to a corresponding IS Logical Network. This
	mapping must be done before the blades of the
	blade system can be unlocked.
	Mapped to:
      /IntegratedSite/NetworkConfiguration/IsLogicalNetwork */
					ObjectRef isLogicalNetworkRef optional,
					/* A BS Subnet is associated to one IS
       Subnet. A BS Subnet is the requirement a
       blade system has of an IS Subnet.

       BS Subnets can either be created manually by the
       operator or they can be automatically created
       from pre-registered network requirements bundled
       with the blade system software. Regardless of
       how they are created, each one needs to be
       mapped to both a BS VLan and an IS Subnet before
       blades can be unlocked via the Hardware service.
       The mappings are done with the
       'bsVlanRef' and 'isSubnetRef' attributes.Each BS
       Subnet contains one or more BS Subnet
       Segments.

       Different instances of a blade system type may
       call their BS Subnets the same thing but in the
       end the IS Site Designer can choose to map them
       to the same or different IS Subnet. */
					/* <xs:key name="key_IntegratedSite_BladeSystems_BladeSystem_BsNetworkConfiguration_BsLogicalNetwork_BsSubnet_BsSubnetSegment">
                                    <xs:selector xpath="IntegratedSite:BsSubnetSegment"/>
                                    <xs:field xpath="IntegratedSite:name"/>
                                  </xs:key> */
					record of record {
						/* Name of the BS Subnet. It is unique within the BS Logical Network. */
						XSD.Token name,
						/* Short description of the BS Subnet. */
						XSD.Token description optional,
						/* The mapping to a corresponding BS Vlan. This
	mapping must be done before the blades of the
	blade system can be unlocked. Mapped to class:
     /IntegratedSite/BladeSystems/BladeSystem/BsNetworkConfiguration/BsVlan */
						ObjectRef bsVlanRef optional,
						/* The mapping to a corresponding IS Subnet. This
	mapping must be done before the blades of the
	blade system can be unlocked. Mapped to:
     /IntegratedSite/NetworkConfiguration/IsLogicalNetwork/IsSubnet */
						ObjectRef isSubnetRef optional,
						/* A BS Subnet Segment is associated to one
       IS Subnet Segment. A BS Subnet Segment is the
       requirement a blade system has of an IS Subnet
       Segment.

       BS Subnet Segments can either be created manually
       by the operator or they can be automatically created from
       pre-registered network requirements bundled with
       the blade system software. Regardless of how they
       are created, each one needs to be mapped to an IS
       Subnet Segment before the blades can be unlocked
       via the Hardware service.  The mapping is done
       with the 'isSubnetSegmentRef' attribute.

       Different instances of a blade system type may
       call their BS Subnet Segments the same thing but
       in the end the IS Site Designer can choose to
       map them to the same or different IS Subnet
       Segment. */
						record of record {
							/* Name of the BS Subnet Segment. It is unique within the BS Subnet. */
							XSD.Token name,
							/* Short description of the BS Subnet Segment. */
							XSD.Token description optional,
							/* Required number of IP addresses in the corresponding IS Subnet Segment. */
							XSD.Integer numOfIpaddresses optional,
							/* Flag that controls whether the corresponding IS
	Subnet Segment is required to have DHCP enabled
	or not. */
							XSD.Boolean dhcpEnabled optional,
							/* Flag that controls whether the corresponding IS
	Subnet Segment is required to have a router
	configured or not. */
							XSD.Boolean routerRequired optional,
							/* The mapping to a corresponding IS Subnet
	Segment. The mapping here must be done before
	the blades of the blade system can be unlocked.
    Mapped to:
     /IntegratedSite/NetworkConfiguration/IsLogicalNetwork/IsSubnet/IsSubnetSegment */
							ObjectRef isSubnetSegmentRef optional
						} bsSubnetSegment_list
					} bsSubnet_list
				} bsLogicalNetwork_list,
				/* A BS VLAN is mapped to one IS VLAN. A BS VLAN is
       the requirement a blade system has of an IS
       VLAN. Different instances of a blade system type
       may call their BS VLANs the same thing but in the
       end the IS Site Designer can choose to map them
       to the same or different IS VLAN.

       BS VLANs can either be created manually by the
       operator or they can be automatically created
       from pre-registered network requirements bundled
       with the blade system software.  Regardless of
       how they are created, each one needs to be
       mapped to an IS VLAN before the blades can be
       unlocked. The mapping is done with the
       'isVlanRef' attribute. */
				/* <xs:key name="key_IntegratedSite_BladeSystems_BladeSystem_BsNetworkConfiguration_BsVlan_BsVlanSap">
                              <xs:selector xpath="IntegratedSite:BsVlanSap"/>
                              <xs:field xpath="IntegratedSite:name"/>
                            </xs:key> */
				record of record {
					/* Name of the BS VLAN. It is unique within the blade system. */
					XSD.Token name,
					/* Short description of the BS VLAN. */
					XSD.Token description optional,
					/* Setting the private attribute to true, means
          that the corresponding IS VLAN can not be
          used by other blade systems. The IS VLAN is
          private for this particular blade system. */
					XSD.Boolean private_ optional,
					/* The mapping to a corresponding IS VLAN. This
	mapping must be done before the blades of the
	blade system can be unlocked. Mapped to class:
     /IntegratedSite/NetworkConfiguration/IsVlan */
					ObjectRef isVlanRef optional,
					/* There is a BS VLAN Service Access Point (BSVSAP)
      for each Link Service Access Point that an IS
      VLAN straddles. It is per BS VLAN Service Access
      Point that certain VLAN properties are configured
      (such as if it is mandatory to enable isolation protection).

      BS VLAN Service Access Points can either be
      created manually by the operator or they can be
      automatically created from pre-registered network
      requirements bundled with the blade system
      software. Regardless of how they are created,
      each one needs to be mapped to a Link SAP before
      the blades can be unlocked.  The mapping is done
      with the 'linkSapRef' attribute. */
					record of record {
						/* Name of the BS VLAN SAP. It is unique within the BS VLAN. */
						XSD.Token name,
						/* Short description of the BS VLAN SAP. */
						XSD.Token description optional,
						/* Flag which controls whether this BS VLAN SAP
	makes static or dynamic use of the
	corresponding IS VLAN. */
						XSD.Boolean static optional,
						/* Flag which controls whether this BS VLAN SAP should be
	isolation protected or not. */
						XSD.Boolean protected optional,
						/* A mapping to the corresponding Link Service Access Point.
    Mapped to:
     /IntegratedSite/BladeSystems/BladeSystem/Blade/LinkSap */
						ObjectRef linkSapRef optional
					} bsVlanSap_list
				} bsVlan_list
			} bsNetworkConfiguration
		} bladeSystem_list
	} bladeSystems,
	/* The purpose of the Hardware Management function is to make it possible to manage
     the Hardware Inventory (HWI) for the Integrated Site and to present its content via ISM
     and Common Management Framework (CMF). */
	/* <xs:key name="key_IntegratedSite_Hardware_BladeSystemDomain">
            <xs:selector xpath="IntegratedSite:BladeSystemDomain"/>
            <xs:field xpath="IntegratedSite:name"/>
          </xs:key>
          <xs:key name="key_IntegratedSite_Hardware_BladeType">
            <xs:selector xpath="IntegratedSite:BladeType"/>
            <xs:field xpath="IntegratedSite:type"/>
            <xs:field xpath="IntegratedSite:swgProdNo"/>
            <xs:field xpath="IntegratedSite:swgProdRev"/>
          </xs:key>
          <xs:key name="key_IntegratedSite_Hardware_InterSubrackLink">
            <xs:selector xpath="IntegratedSite:InterSubrackLink"/>
            <xs:field xpath="IntegratedSite:subrack1Id"/>
            <xs:field xpath="IntegratedSite:subrack1Xslot"/>
            <xs:field xpath="IntegratedSite:subrack1Pslot"/>
            <xs:field xpath="IntegratedSite:subrack1Port"/>
            <xs:field xpath="IntegratedSite:subrack2Id"/>
            <xs:field xpath="IntegratedSite:subrack2Xslot"/>
            <xs:field xpath="IntegratedSite:subrack2Pslot"/>
            <xs:field xpath="IntegratedSite:subrack2Port"/>
          </xs:key>
          <xs:key name="key_IntegratedSite_Hardware_Subrack">
            <xs:selector xpath="IntegratedSite:Subrack"/>
            <xs:field xpath="IntegratedSite:id"/>
          </xs:key> */
	record {
		/* The subrack and slot of the active SIS (OM role). The format is "subrack.slot". */
		XSD.Token activeSis optional,
		/* This class describes a blade system domain.A blade system domain
      is a purely logical concept that enables grouping of blade systems. */
		record of record {
			/* The blade system domain name. */
			HwmValidNameCharacters name,
			/* The description of the blade system domain. */
			XSD.Token description optional
		} bladeSystemDomain_list,
		/* This class describes a blade type. A blade type points out pairs of blade hardware product
      identity (ROJ-number) and blade software groups (BL-SWG) comprising the kernel and
      root file system. Blade types are registered when downloading blade system software. */
		record of record {
			/* The blade type product number, for example \"CNA12801\" */
			XSD.Token type_,
			/* The blade software group identifier, for example \"CXS10138\" */
			XSD.Token swgProdNo,
			/* The blade software group revision, for example \"R4A01\" */
			XSD.Token swgProdRev,
			/* Reference to corresponding blade software group,
       for example with id \"CXS10138\" and revision \"R4A01\". This is the installed
       software of the blade type but not necessarily the active software. */
			ObjectRef bladeSwgRef optional,
			/* The name of the blade type, for example \"EXB\" */
			XSD.Token name optional,
			/* The width of the blade. The data type unit is number of slots */
			WidthType_16 width optional,
			/* The 1G links used by the blade type, for example \"0,1\". Start counting from the leftmost backplane position. */
			XSD.Token oneGLinks optional,
			/* The 1G links used for link aggregation by the blade type, for example \"0-1\". Start counting from the leftmost backplane position. */
			XSD.Token linkAggregates optional,
			/* The 10G links used by the blade type, for example \"0,1\". Start counting from the leftmost backplane position. */
			XSD.Token tenGLinks optional,
			/* True if possible to read product info via the maintenance bus. */
			XSD.Boolean hasHwData optional,
			/* True if this is a MXB type. */
			XSD.Boolean isMxb optional,
			/* Deprecated. Kept for backwards compatibility.
	Only valid for MXBs. A list of slots that have 1G links.
	Could be a single slot or a range or a combination thereof.
	Examples: \"1-24\" or \"1,3-13,15-24\". */
			XSD.Token availOneGSlots optional,
			/* Deprecated. Kept for backwards compatibility.
	Only valid for MXBs. Specifies which slots can be used
	for link aggregation. Ranges are specified in the form \"1-12,13-24\". */
			XSD.Token aggregateRanges optional,
			/* True if the blade uses external boot server. */
			XSD.Boolean usesExternalBootServer optional
		} bladeType_list,
		/* This class describes an inter-subrack link. */
		record of record {
			/* The identifier of the first subrack. */
			Subrack1IdType_22 subrack1Id,
			/* The position of the main switch board that terminates
         the inter-subrack link in the first subrack. */
			Subrack1XslotType_23 subrack1Xslot,
			/* The position of the physical board that terminates
        the inter-subrack link in the first subrack. The value
        of this attribute is equal to subrack1Xslot if the link
        is configured with MXB front ports. */
			Subrack1PslotType_24 subrack1Pslot,
			/* The termination port on the physical board indentified
        by subrack1Pslot. */
			Subrack1PortType_25 subrack1Port,
			/* The identifier of the second subrack. */
			Subrack2IdType_26 subrack2Id,
			/* The position of the main switch board that terminates
                   the inter-subrack link in the second subrack. */
			Subrack2XslotType_27 subrack2Xslot,
			/* The position of the physical board that terminates
        the inter-subrack link in the second subrack. The value
        of this attribute is equal to subrack2Xslot if the link
        is configured with MXB front ports. */
			Subrack2PslotType_28 subrack2Pslot,
			/* The termination port on the physical board indentified
         by subrack2Pslot. */
			Subrack2PortType_29 subrack2Port,
			/* Type definition of the inter-subrack link. */
			IslTypeType_30 islType optional,
			/* An optional user friendly inter-subrack link name. */
			HwmValidNameCharacters islName optional
		} interSubrackLink_list,
		/* This class describes a subrack. */
		/* <xs:key name="key_IntegratedSite_Hardware_Subrack_Slot">
                  <xs:selector xpath="IntegratedSite:Slot"/>
                  <xs:field xpath="IntegratedSite:number"/>
                </xs:key> */
		record of record {
			/* The subrack identifier. */
			IdType_17 id,
			/* The subrack type, for example \"EGEM\" */
			XSD.Token type_ optional,
			/* An optional user friendly subrack name. */
			HwmValidNameCharacters userLabel optional,
			/* The subrack position in the cabinet. */
			XSD.Token position optional,
			/* The cabinet position in the site. */
			XSD.Token cabinetPosition optional,
			/* The site location, for example the visiting address. */
			XSD.Token location optional,
			/* Available slots for 1G switch links. Information is read from the type
	of MXB that is created in the subrack. */
			XSD.Token availableOneGSlots optional,
			/* Available slots for 10G switch links. Information is read from the type
	of MXB that is created in the subrack. */
			XSD.Token availableTenGSlots optional,
			/* Links ranges for (1G) link aggregation. Information is read from the
	type of MXB that is created in the subrack. */
			XSD.Token aggregateSlots optional,
			/* The value of the physical plug 0. */
			PhysicalAddrPlug0Type_18 physicalAddrPlug0,
			/* The value of the physical plug 1. */
			PhysicalAddrPlug1Type_19 physicalAddrPlug1,
			/* The value of the physical plug 3. */
			PhysicalAddrPlug3Type_20 physicalAddrPlug3,
			/* Reference to the blade system SWG of the left MXB in the subrack.
        If not given the system will use the same as the
        MXB in subrack 0. */
			ObjectRef leftMxbBsSwgRef optional,
			/* Optional reference to the blade system SCP of the left MXB in the subrack.
        If not given the system will use the same as the
        MXB in subrack 0. */
			ObjectRef leftMxbScpRef optional,
			/* Reference to the blade SWG of the left MXB in the subrack.
        If not given the system will use the same as the
        MXB in subrack 0. */
			ObjectRef leftMxbBladeSwgRef optional,
			/* Reference to the blade system SWG of the right MXB in the subrack.
        If not given the system will use the same as the
        MXB in subrack 0. */
			ObjectRef rightMxbBsSwgRef optional,
			/* Optional reference to the blade system SCP of the right
        MXB in the subrack. If not given the system will use
        the same as the MXB in subrack 0. */
			ObjectRef rightMxbScpRef optional,
			/* Reference to the blade SWG of the right MXB in the subrack.
        If not given the system will use the same as the
        MXB in subrack 0. */
			ObjectRef rightMxbBladeSwgRef optional,
			/* This class corresponds to slots, there is one instance
      for each slot. The slots are grouped per subrack. A slot is
      identified by the subrack identifier and slot number. */
			record of record {
				/* The value of this attribute identifies the
	slot position within the subrack. */
				NumberType_21 number,
				/* See HwmSlotState description. */
				Slot_HwmSlotState state optional,
				/* Optional reference to the blade system that uses this
	slot. The value of this attribute will only have meaning in a
	conceptual row if the value of hwmSlotState instance is either
	usedOccupied  or usedEmpty in the same conceptual row,
	which means that there is a blade system created using this slot. */
				ObjectRef bsRef optional
			} slot_list
		} subrack_list
	} hardware,
	/* The MO branch where the common Network resources are configured.

      The Network configuration service provides support for
      configuration of various network properties of an
      Integrated Site. It contains the following configuration
      parts:

       * Blade system specific configuration - mapping blade
         system network requirements to common Integrated Site
         resources.  This activity must be performed before a
         new blade or blade system successfully can be unlocked
         via the Hardware service. Some blade systems
         have partly pre-registered network requirements,
         while others demand that you read the corresponding
         information from separate BS specific
         instructions and manually configure the blade system
         network requirements. The pre-registered network
         requirements automates parts of the blade
         system-specific configuration activity. The blade
         system specific configuration is specified in a
         separate class, BladeSystems/BladeSystem/BsNetworkConfiguration.

       * Common configuration - configuration of common
         Integrated Site resources, such as subnets, VLANs,
         traffic classes, and so on. Blade system network requirements
         are mapped to these common resources.

       * Publish configuration changes - publish updated
         configuration. In an Integrated Site, the blade
         systems obtain their actual network configuration
         dynamically in runtime. When you change the network
         configuration it will affect blade systems. In order to
         minimize the disturbance of active blade systems, the
         changes are normally applied in a separate storage,
         which is not visible to the blade systems. In order to
         make use of the new unpublished configuration, it must be
         explicitly published by altering the updateMode. If
         the new settings introduce severe problems, the
         configuration can be reverted to the old settings by
         altering the updateMode.

       * External Boot Server - configuration of External Boot Server
         for Blade Systems that do not want to boot from the SIS, but
         instead fetch their boot files from a server outside the IS
         rack. */
	/* <xs:key name="key_IntegratedSite_NetworkConfiguration_ExternalBootServer">
            <xs:selector xpath="IntegratedSite:ExternalBootServer"/>
            <xs:field xpath="IntegratedSite:name"/>
          </xs:key>
          <xs:key name="key_IntegratedSite_NetworkConfiguration_IsIpTrafficClass">
            <xs:selector xpath="IntegratedSite:IsIpTrafficClass"/>
            <xs:field xpath="IntegratedSite:name"/>
          </xs:key>
          <xs:key name="key_IntegratedSite_NetworkConfiguration_IsLanTrafficClass">
            <xs:selector xpath="IntegratedSite:IsLanTrafficClass"/>
            <xs:field xpath="IntegratedSite:name"/>
          </xs:key>
          <xs:key name="key_IntegratedSite_NetworkConfiguration_IsLogicalNetwork">
            <xs:selector xpath="IntegratedSite:IsLogicalNetwork"/>
            <xs:field xpath="IntegratedSite:name"/>
          </xs:key>
          <xs:key name="key_IntegratedSite_NetworkConfiguration_IsVlan">
            <xs:selector xpath="IntegratedSite:IsVlan"/>
            <xs:field xpath="IntegratedSite:identity"/>
          </xs:key> */
	record {
		/* An external boot server is a concept for blade systems
  		that do not want to download boot files internally from the SIS
  		TFTP server. Instead, they download the files from an external
  		server, via a proxy agent implemented in SIS. */
		record of record {
			/* A unique name of the boot server */
			XSD.Token name,
			/* Short description of the boot server. */
			XSD.Token description optional,
			/* The path to the files on the external boot server. Must start with /. */
			XSD.Token path,
			/* The name of the file to download. */
			XSD.Token fileName,
			/* The ip address to use when accessing the external server. This is generated automatically. */
			InetAddressIPv4 proxyIp optional,
			/* At what interval SIS pings the external boot server,
  			for supervising the connection to it. */
			XSD.Integer pingInterval,
			/* The A side IP address for the external server. */
			InetAddressIPv4 sideAExternalBootIp,
			/* The A side IP address for the IS. */
			InetAddressIPv4 sideAIsIp,
			/* The A side subnet segment for the IS.
            A reference to a Managed Object of type
             /IntegratedSite/BladeSystems/BladeSystem/BsNetworkConfiguration/BsLogicalNetwork/BsSubnet/BsSubnetSegment */
			ObjectRef sideABsSegment,
			/* The B side IP address for the external server. */
			InetAddressIPv4 sideBExternalBootIp,
			/* The B side IP address for the IS. */
			InetAddressIPv4 sideBIsIp,
			/* The B side subnet segment for the IS.
            A reference to a Managed Object of type
             /IntegratedSite/BladeSystems/BladeSystem/BsNetworkConfiguration/BsLogicalNetwork/BsSubnet/BsSubnetSegment */
			ObjectRef sideBBsSegment
		} externalBootServer_list,
		/* An IS IP Traffic Class is a homogenous type of
         (layer 3) traffic that has consistent requirements for
         Quality of Service and security, for example circuit switched
         payload. One Integrated Site constitutes one DiffServ
         domain. For each DiffServ code point that will be used
         within the site, there should be a configured mapping
         to corresponding priority bits (pbits) to be used
         within the site. All traffic of the same class uses the
         same priority bits (pbits). The pbits is defined in an
         IS LAN Traffic Class. Each DiffServ code point that is
         used within the site shall be defined in an IS IP
         Traffic Class. When the traffic is routed outside the
         site the routers may remap the DiffServ code points to
         values valid in other DiffServ domains. An IS IP
         Traffic Class has a site unique name. IS IP Traffic
         Classes and IS Subnets are orthogonal concepts. */
		record of record {
			/* Name of the IS IP Traffic Class.
        Unique within the entire Integrated Site. */
			XSD.Token name,
			/* Short description of the IS IP Traffic Class. */
			XSD.Token description optional,
			/* DiffServ Code Point setting for this IS IP Traffic Class.
        If there are two IS IP Traffic Classes with the same DSCP, they
        both must refer to an IS LAN Traffic Class with identical P-bit setting. */
			XSD.Integer dscp optional,
			/* Reference to a Managed Object of type
         /IntegratedSite/NetworkConfiguration/ISLanTrafficClass. */
			ObjectRef isLanTrafficClass optional
		} isIpTrafficClass_list,
		/* An IS LAN Traffic Class is a homogenous type
        of (layer 2) traffic that has consistent requirements
        for Class of Service, for example  circuit switched
        payload. All traffic of the same class uses the same
        priority bits (pbits). An IS LAN Traffic Class has a
        site unique name. IS LAN Traffic Classes and IS VLANs
        are orthogonal concepts. An IS LAN Traffic Class may be
        shared between several Blade Systems. */
		record of record {
			/* Name of the IS LAN Traffic Class.
        Unique within the entire Integrated Site. */
			XSD.Token name,
			/* Short description of the IS LAN Traffic Class. */
			XSD.Token description optional,
			/* P-bit setting for this IS LAN Traffic Class. */
			PbitsType_8 pbits optional
		} isLanTrafficClass_list,
		/* An IS Logical Network (ISLN) is an IP network
      with unconstrained network layer connectivity. Note
      that there is no room for NAT (Network Address
      Translation) in an IS Logical Network. An Integrated
      Site will take part in multiple IS Logical Networks
      simultaneously. An IS Logical Network may span several
      Integrated Sites. Naming of such IS Logical Networks
      should (but does not have to) be coordinated between
      sites. Inside a site, an IS Logical Network merely
      serves as a place holder for subnets and their
      associated VLANs. In some cases it may hold several
      subnets. An IS Logical Network may be shared between
      several Blade Systems. */
		/* <xs:key name="key_IntegratedSite_NetworkConfiguration_IsLogicalNetwork_IsSubnet">
                  <xs:selector xpath="IntegratedSite:IsSubnet"/>
                  <xs:field xpath="IntegratedSite:name"/>
                </xs:key> */
		record of record {
			/* Name of the IS Logical Network.
        Unique within the entire Integrated Site. */
			XSD.Token name,
			/* Short description of the IS Logical network. */
			XSD.Token description optional,
			/* An IS Subnet is an IP subnet. An IS
      Subnet has a starting address for the IP network, a
      netmask (we use prefix length notation) and a broadcast
      address. It is also connected to one IS VLAN. Each IS
      Subnet is divided into one or more segments, so called
      IS Subnet Segments. In many cases, the IS Subnet
      contains only one IS Subnet Segment. The name of an IS
      Subnet is unique only within its IS Logical Network.
      An IS Subnet may be shared between several Blade Systems. */
			/* <xs:key name="key_IntegratedSite_NetworkConfiguration_IsLogicalNetwork_IsSubnet_IsSubnetSegment">
                        <xs:selector xpath="IntegratedSite:IsSubnetSegment"/>
                        <xs:field xpath="IntegratedSite:name"/>
                      </xs:key> */
			record length(1 .. infinity) of record {
				/* Name of the IS Subnet. Unique within the IS Logical Network. */
				XSD.Token name,
				/* Short description of the IS Subnet. */
				XSD.Token description optional,
				/* IP network address of the IS Subnet. */
				InetAddressIPv4 address_ optional,
				/* Prefix length of the IP network address. */
				MaskType_5 mask optional,
				/* IP network mask of the IS Subnet. */
				InetAddressIPv4 longMask optional,
				/* Broadcast address of the IS Subnet. */
				InetAddressIPv4 broadcastAddress optional,
				/* A reference to a Managed Object of type
          /IntegratedSite/NetworkConfiguration/IsVlan */
				ObjectRef isVlanRef optional,
				/* An IS Subnet Segment is a segment of a
      subnet and is mainly used when hosts on the IS
      Subnet want to use different default gateways
      and still be able to send packets between each
      other without passing any gateway. The DHCP
      server will associate a subnet section with
      each IS Subnet Segment that is configured to
      be enabled for DHCP. Each IS Subnet Segment
      that is intended to handle traffic that should
      be routed, has an IP address configured for its router.
      The IS Subnet Segments for ISBS,
      ISOB, and ISOS are link local and do not have
      an associated router. The name of an IS Subnet
      Segment is unique only within its IS Subnet.
      An IS Subnet Segment may be shared between
      several Blade Systems. */
				record length(1 .. infinity) of record {
					/* Name of the IS Subnet Segment. Unique within the IS Subnet. */
					XSD.Token name,
					/* Short description of the IS Subnet Segment. */
					XSD.Token description optional,
					/* IP network address of the IS Subnet Segment. */
					InetAddressIPv4 address_ optional,
					/* Prefix length of the IP network address. */
					MaskType_6 mask optional,
					/* IP network mask of the IS Subnet Segment. */
					InetAddressIPv4 longMask optional,
					/* Router address for the IS Subnet Segment. */
					InetAddressIPv4 routerAddress optional,
					/* Flag that controls whether DHCP should be enabled or not for this
        IS Subnet Segment. */
					XSD.Boolean dhcpEnabled optional
				} isSubnetSegment_list
			} isSubnet_list
		} isLogicalNetwork_list,
		/* Miscellaneous global variable settings. */
		record {
			/* The updateMode is a global attribute which controls
        how updates of the network configuration is handled.

        The updateMode can have the following persistent
        states:

          * Safe - In Safe mode, all updates are placed in a
            separate storage, which is not visible to the blade
            systems. Updates are not published automatically.

          * Preliminary - In Preliminary mode no updates of the
            separate storage are allowed. This mode is a temporary
            mode that is used only while a new parameter setting
            is being tried out.

          * ReadOnly - In ReadOnly mode, no updates are allowed at all.

          * Unsafe - In Unsafe mode, all updates are immediately
            published to the blade systems without any possibility
            to undo the changes. You should avoid this mode. */
			UpdateModeType_9 updateMode optional,
			/* The data model version consists of a major and a
        minor part. The minor part is incremented when the data
        model (the structure of the data) is extended. The
        major part is incremented when the data model is not
        backwards compatible with the previous version. */
			DataModelVersionType_10 dataModelVersion optional,
			/* The RLSP marker generate interval in milliseconds.
        It is recommended that the interval should be
        increased in steps of 10.

        Note that after publishing an update of this value,
        a total site restart is necessary.

        This is an advanced option that should only be
        changed by Ericsson personnel. */
			RlspMarkerGenerateIntervalType_11 rlspMarkerGenerateInterval optional,
			/* Threshold for the number of consecutive RLSP marker
        PDUs that needs to be missing before the link is
        regarded as down. */
			RlspLinkDownThresholdType_12 rlspLinkDownThreshold optional,
			/* Threshold for the number of consecutive RLSP marker
        PDUs that needs to be received before the link
        is regarded as up. */
			RlspLinkUpThresholdType_13 rlspLinkUpThreshold optional,
			/* The Daylight Saving Time (DST) rule (timezone_dst_rule)
        has a syntax that is described in IEEE 1003.11. With
        the information in this string, Blade Systems can
        configure their clock to comply with the local time
        zone. On Posix compatible blades its value fits nicely
        into the TZ environment variable.

        Here follows a condensed summary of the time zone
        syntax described in IEEE 1003.1. The timezone_dst_rule
        val has a syntax like std offset or std offset dst
        [offset],start[/time],end[/time] where the first format
        is used when there is no Daylight Saving Time in the
        local time zone. The std string specifies the name of
        the time zone.  The offset specifies the time value you
        must add to the local time to get a Coordinated
        Universal Time value. For example, here is how we would
        specify Eastern Standard Time, but without any Daylight
        Saving Time alternative: "EST+5". The second format is
        used when there is Daylight Saving Time. The dst string
        and offset specify the name and offset for the
        corresponding Daylight Saving Time zone; if the offset
        is omitted, it defaults to one hour ahead of standard
        time.The remainder of the specification describes when
        Daylight Saving Time is in effect. The start field is
        when Daylight Saving Time goes into effect and the end
        field is when the change is made back to standard
        time. The following formats are recognized for these
        fields: Jn specifies the Julian day, with n between
        1 and 365. February 29 is never counted, even in leap
        years. n specifies the Julian day, with n between 0and
        365. February 29 is counted in leap years.  Mm.w.d
        specifies day d of week w of month m. The day d must be
        between 0 (Sunday) and 6.  The week must be between
        1 and 5; week 1 is the first week in which day d occurs,
        and week 5 specifies the last d day in the month. The
        month m should be between 1 and 12. The time fields
        specify when, in the local time currently in effect,
        the change to the other time occurs. If omitted, the
        default is 02:00:00.

        For example "EST+5EDT,M4.1.0/2,M10.5.0/2", specifies
        the Eastern time zone in the United States, including
        the appropriate Daylight Saving Time and its dates of
        applicability. The normal offset from UTC is 5 hours;
        since this is west of the prime meridian, the sign is
        positive.  Summer time begins on the first Sunday in
        April at 2:00am, and ends on the last Sunday in October
        at 2:00am. */
			XSD.Token timezoneDstRule optional,
			/* The DNS domain used by IS in the DNS-server. */
			DnsDomainType_14 dnsDomain optional,
			/* Number of seconds from when a new network
        configuration has been published until the
        Blade Systems will apply the changes.

        This is an advanced option that should only be
        changed by Ericsson personnel. */
			XSD.Integer notifyAfter optional,
			/* The default DHCP lease time in seconds.

        This is an advanced option that should only be
        changed by Ericsson personnel. */
			XSD.Integer defaultDhcpLeaseTime optional,
			/* The lifetime of a DHCP lease in seconds.

        This is an advanced option that should only be
        changed by Ericsson personnel. */
			XSD.Integer lifeTimeDhcpLeaseTime optional
		} isVariables,
		/* An IS VLAN is just a VLAN (Virtual LAN).
      It may be shared between several Blade Systems. */
		record of record {
			/* Identity of the IS VLAN. Unique within the entire Integrated Site. */
			IdentityType_7 identity,
			/* Short description of the IS VLAN */
			XSD.Token description optional
		} isVlan_list
	} networkConfiguration,
	/* Describes the Software management service
	in the Integrated Site services Management Function Area (MFA). */
	record {
		/* This class includes actions to download files and import backups
	into the software inventory. */
		/* <xs:key name="key_IntegratedSite_Software_SoftwareInventory_Backup">
                  <xs:selector xpath="IntegratedSite:Backup"/>
                  <xs:field xpath="IntegratedSite:id"/>
                </xs:key>
                <xs:key name="key_IntegratedSite_Software_SoftwareInventory_SoftwareAlarm">
                  <xs:selector xpath="IntegratedSite:SoftwareAlarm"/>
                  <xs:field xpath="IntegratedSite:id"/>
                </xs:key>
                <xs:key name="key_IntegratedSite_Software_SoftwareInventory_SoftwareDeliveryPackage">
                  <xs:selector xpath="IntegratedSite:SoftwareDeliveryPackage"/>
                  <xs:field xpath="IntegratedSite:prodNo"/>
                  <xs:field xpath="IntegratedSite:prodRev"/>
                </xs:key>
                <xs:key name="key_IntegratedSite_Software_SoftwareInventory_SoftwareGroup">
                  <xs:selector xpath="IntegratedSite:SoftwareGroup"/>
                  <xs:field xpath="IntegratedSite:prodNo"/>
                  <xs:field xpath="IntegratedSite:prodRev"/>
                </xs:key> */
		record {
			/* An instance of a backup that is stored locally. */
			record of record {
				/* The site local backup identity. */
				XSD.UnsignedInt id,
				/* A backup name selected by the user or a generated name. */
				XSD.Token name optional,
				/* A reference to the blade system that this backup was created from. */
				ObjectRef bsRef optional,
				/* The date and time when this backup was created. */
				XSD.DateTime date optional,
				/* The size of the backup file in kilobytes. If the backup file
	  size is smaller than 0,5 kbyte the value will be 0. */
				XSD.UnsignedInt size optional
			} backup_list,
			/* Represents an alarm related to software.
	This class can be used for listing software alarms. */
			record of record {
				/* The alarm identity. */
				XSD.UnsignedInt id,
				/* A reference to the blade system affected by the alarm */
				ObjectRef bsRef optional,
				/* Textual description of the cause of the alarm. */
				XSD.Token cause optional,
				/* Textual description providing additional information about the alarm. */
				XSD.Token info optional
			} softwareAlarm_list,
			/* Container of files of data, or binary executables, needed to run
	the system. */
			record of record {
				/* Product number of the software delivery package. */
				XSD.Token prodNo,
				/* Product revision of the software delivery package. */
				XSD.Token prodRev,
				/* Product name of the software delivery package. */
				XSD.Token prodName optional,
				/* Type of the software delivery package. */
				TypeType_31 type_ optional
			} softwareDeliveryPackage_list,
			/* Contains one or more SoftwareDeliveryPackage. */
			record of record {
				/* Product number of the software group. */
				XSD.Token prodNo,
				/* Product revision of the software group. */
				XSD.Token prodRev,
				/* Product name of the software group. */
				XSD.Token prodName optional,
				/* Blade system product number of the software group. */
				XSD.Token bsProdNo optional,
				/* Blade system revision of the software group. */
				XSD.Token bsProdRev optional,
				/* Blade system name of the software group. */
				XSD.Token bsProdName optional,
				/* Integrated system product number of the software group. */
				XSD.Token integratedSystemProdNo optional,
				/* Integrated system revision of the software group. */
				XSD.Token integratedSystemProdRev optional,
				/* Integrated system name of the software group. */
				XSD.Token integratedSystemProdName optional,
				/* Software delivery packages related to this software group.
	  A related software delivery package can be a CXP or
	  a software correction package, CXR.
	  A related software delivery package does not necessarily have
	  to be active. */
				RelatedSDPsType_32 relatedSDPs optional,
				/* Indicates status of a software group. A software group is
	  complete if all included load module containers have been
	  downloaded and unpacked correctly, if not, it is incomplete.
	  A software group is inconsistent if the checksums of the load
	  module containers do not match the information in the system
	  information CXP, or if the XML data could not be registered. */
				StatusType_33 status optional
			} softwareGroup_list
		} softwareInventory,
		/* Contains system created data through ordered job actions. */
		/* <xs:key name="key_IntegratedSite_Software_SoftwareJobs_BackupCreateJob">
                  <xs:selector xpath="IntegratedSite:BackupCreateJob"/>
                  <xs:field xpath="IntegratedSite:jobName"/>
                </xs:key>
                <xs:key name="key_IntegratedSite_Software_SoftwareJobs_BackupExportJob">
                  <xs:selector xpath="IntegratedSite:BackupExportJob"/>
                  <xs:field xpath="IntegratedSite:jobName"/>
                </xs:key>
                <xs:key name="key_IntegratedSite_Software_SoftwareJobs_BackupImportJob">
                  <xs:selector xpath="IntegratedSite:BackupImportJob"/>
                  <xs:field xpath="IntegratedSite:jobName"/>
                </xs:key>
                <xs:key name="key_IntegratedSite_Software_SoftwareJobs_BackupRestoreJob">
                  <xs:selector xpath="IntegratedSite:BackupRestoreJob"/>
                  <xs:field xpath="IntegratedSite:jobName"/>
                </xs:key>
                <xs:key name="key_IntegratedSite_Software_SoftwareJobs_SoftwareChangeJob">
                  <xs:selector xpath="IntegratedSite:SoftwareChangeJob"/>
                  <xs:field xpath="IntegratedSite:jobName"/>
                </xs:key>
                <xs:key name="key_IntegratedSite_Software_SoftwareJobs_SoftwareDownloadJob">
                  <xs:selector xpath="IntegratedSite:SoftwareDownloadJob"/>
                  <xs:field xpath="IntegratedSite:jobName"/>
                </xs:key> */
		record {
			/* This class handles creation of backups. */
			record of record {
				/* Given or system generated name of the backup job. */
				XSD.Token jobName,
				/* Reference to a data type representing job status
	  during the job execution. */
				JobData jobData optional,
				/* Reference to the site local backup identity. */
				ObjectRef backupRef optional,
				/* Reference to the blade system the backup was created from. */
				ObjectRef bsRef optional,
				/* The name of the backup. */
				XSD.Token backupName optional
			} backupCreateJob_list,
			/* This class handles export of locally stored backup files to
	an FTP server. */
			record of record {
				/* Given or system created name of the backup job. */
				XSD.Token jobName,
				/* Reference to a data type representing job status
	  during the job execution. */
				JobData jobData optional,
				/* Reference to a data type representing the
	  FTP details. */
				FtpData ftpData optional,
				/* Reference to the backup to be exported. */
				ObjectRef backupRef optional,
				/* This name is set to be the file name of the backup. */
				XSD.Token backupName optional
			} backupExportJob_list,
			/* This class handles import of backup files from the FTP server.
	The backup file is stored locally, but not loaded into the system. */
			record of record {
				/* Given or system created name of the backup job. */
				XSD.Token jobName,
				/* Reference to a data type representing job status
	  during the job execution. */
				JobData jobData optional,
				/* Reference to a data type representing the
	  FTP details. */
				FtpData ftpData optional
			} backupImportJob_list,
			/* This class handles restore of backups of the system. */
			record of record {
				/* Given or system created name of the backup job. */
				XSD.Token jobName,
				/* Reference to a data type representing job status
	  during the job execution. */
				JobData jobData optional,
				/* Reference to the backup to be restored. */
				ObjectRef backupRef optional,
				/* Reference to the blade system that should be restored. */
				ObjectRef bsRef optional,
				/* The name of the backup. */
				XSD.Token backupName optional
			} backupRestoreJob_list,
			/* This class handles software change jobs toward the system. */
			/* <xs:key name="key_IntegratedSite_Software_SoftwareJobs_SoftwareChangeJob_SoftwareChangeJobBladeInfo">
                        <xs:selector xpath="IntegratedSite:SoftwareChangeJobBladeInfo"/>
                        <xs:field xpath="IntegratedSite:subrackId"/>
                        <xs:field xpath="IntegratedSite:slotNo"/>
                      </xs:key> */
			record of record {
				/* Given or system generated name of the backup job. */
				XSD.Token jobName,
				/* Reference to a data type representing job status
	  during the job execution. */
				JobData jobData optional,
				/* Reference to the blade system that should change software. */
				ObjectRef bsRef optional,
				/* Reference to the blade system software group to be
	  used in the software change. */
				ObjectRef swgRef optional,
				/* Reference to the software correction package to be
	  used in the software change. */
				ObjectRef scpRef optional,
				/* The maximum time allowed for the software change
	  job to finish. After this time, the job will be interrupted.
	  The value 0 means that maxTime will be given the
	  timer value registered with the blade system software group.
	  If no such value has been registered,
	  maxTime will be given a system default timer value. */
				XSD.UnsignedInt maxTime optional,
				/* This class handles blade information for a blade involved in
        a software change job. */
				record of record {
					/* The subrack ID for the blade. */
					XSD.UnsignedInt subrackId,
					/* The slot number for the blade. */
					XSD.UnsignedInt slotNo,
					/* Reference to the blade software group to be used
	  in the software change. */
					ObjectRef bladeSwgRef optional
				} softwareChangeJobBladeInfo_list
			} softwareChangeJob_list,
			/* This class contains information about requested, ongoing,
	and completed software file download jobs. */
			record of record {
				/* Given or system generated name of the download job. */
				XSD.Token jobName,
				/* Reference to a data type representing job status
	  during the job execution. */
				JobData jobData optional,
				/* Reference to a data type representing the
	  FTP details. */
				FtpData ftpData optional,
				SwmMatchStrategy matchStrategy optional
			} softwareDownloadJob_list
		} softwareJobs
	} software
}
with {
  variant "element";
  variant (administrativeData) "name as capitalized";
  variant (administrativeData.systemRestart) "name as capitalized";
  variant (bladeSystems) "name as capitalized";
  variant (bladeSystems.bladeSystem_list) "untagged";
  variant (bladeSystems.bladeSystem_list[-]) "name as 'BladeSystem'";
  //variant (bladeSystems.bladeSystem_list[-].autoCreatePrivateNetwork) "text 'true' as '1'";
  //variant (bladeSystems.bladeSystem_list[-].autoCreatePrivateNetwork) "text 'false' as '0'";
  variant (bladeSystems.bladeSystem_list[-].blade_list) "untagged";
  variant (bladeSystems.bladeSystem_list[-].blade_list[-]) "name as 'Blade'";
  //variant (bladeSystems.bladeSystem_list[-].blade_list[-].bsom) "text 'true' as '1'";
  //variant (bladeSystems.bladeSystem_list[-].blade_list[-].bsom) "text 'false' as '0'";
  variant (bladeSystems.bladeSystem_list[-].blade_list[-].linkSap_list) "untagged";
  variant (bladeSystems.bladeSystem_list[-].blade_list[-].linkSap_list[-]) "name as 'LinkSap'";
  variant (bladeSystems.bladeSystem_list[-].bsNetworkConfiguration) "name as capitalized";
  variant (bladeSystems.bladeSystem_list[-].bsNetworkConfiguration.bsIpTrafficClass_list) "untagged";
  variant (bladeSystems.bladeSystem_list[-].bsNetworkConfiguration.bsIpTrafficClass_list[-]) "name as 'BsIpTrafficClass'";
  variant (bladeSystems.bladeSystem_list[-].bsNetworkConfiguration.bsLanTrafficClass_list) "untagged";
  variant (bladeSystems.bladeSystem_list[-].bsNetworkConfiguration.bsLanTrafficClass_list[-]) "name as 'BsLanTrafficClass'";
  variant (bladeSystems.bladeSystem_list[-].bsNetworkConfiguration.bsLogicalNetwork_list) "untagged";
  variant (bladeSystems.bladeSystem_list[-].bsNetworkConfiguration.bsLogicalNetwork_list[-]) "name as 'BsLogicalNetwork'";
  variant (bladeSystems.bladeSystem_list[-].bsNetworkConfiguration.bsLogicalNetwork_list[-].private_) "name as 'private'";
  //variant (bladeSystems.bladeSystem_list[-].bsNetworkConfiguration.bsLogicalNetwork_list[-].private_) "text 'true' as '1'";
  //variant (bladeSystems.bladeSystem_list[-].bsNetworkConfiguration.bsLogicalNetwork_list[-].private_) "text 'false' as '0'";
  variant (bladeSystems.bladeSystem_list[-].bsNetworkConfiguration.bsLogicalNetwork_list[-].bsSubnet_list) "untagged";
  variant (bladeSystems.bladeSystem_list[-].bsNetworkConfiguration.bsLogicalNetwork_list[-].bsSubnet_list[-]) "name as 'BsSubnet'";
  variant (bladeSystems.bladeSystem_list[-].bsNetworkConfiguration.bsLogicalNetwork_list[-].bsSubnet_list[-].bsSubnetSegment_list) "untagged";
  variant (bladeSystems.bladeSystem_list[-].bsNetworkConfiguration.bsLogicalNetwork_list[-].bsSubnet_list[-].bsSubnetSegment_list[-]) "name as 'BsSubnetSegment'";
  //variant (bladeSystems.bladeSystem_list[-].bsNetworkConfiguration.bsLogicalNetwork_list[-].bsSubnet_list[-].bsSubnetSegment_list[-].dhcpEnabled) "text 'true' as '1'";
  //variant (bladeSystems.bladeSystem_list[-].bsNetworkConfiguration.bsLogicalNetwork_list[-].bsSubnet_list[-].bsSubnetSegment_list[-].dhcpEnabled) "text 'false' as '0'";
  //variant (bladeSystems.bladeSystem_list[-].bsNetworkConfiguration.bsLogicalNetwork_list[-].bsSubnet_list[-].bsSubnetSegment_list[-].routerRequired) "text 'true' as '1'";
  //variant (bladeSystems.bladeSystem_list[-].bsNetworkConfiguration.bsLogicalNetwork_list[-].bsSubnet_list[-].bsSubnetSegment_list[-].routerRequired) "text 'false' as '0'";
  variant (bladeSystems.bladeSystem_list[-].bsNetworkConfiguration.bsVlan_list) "untagged";
  variant (bladeSystems.bladeSystem_list[-].bsNetworkConfiguration.bsVlan_list[-]) "name as 'BsVlan'";
  variant (bladeSystems.bladeSystem_list[-].bsNetworkConfiguration.bsVlan_list[-].private_) "name as 'private'";
  //variant (bladeSystems.bladeSystem_list[-].bsNetworkConfiguration.bsVlan_list[-].private_) "text 'true' as '1'";
  //variant (bladeSystems.bladeSystem_list[-].bsNetworkConfiguration.bsVlan_list[-].private_) "text 'false' as '0'";
  variant (bladeSystems.bladeSystem_list[-].bsNetworkConfiguration.bsVlan_list[-].bsVlanSap_list) "untagged";
  variant (bladeSystems.bladeSystem_list[-].bsNetworkConfiguration.bsVlan_list[-].bsVlanSap_list[-]) "name as 'BsVlanSap'";
  //variant (bladeSystems.bladeSystem_list[-].bsNetworkConfiguration.bsVlan_list[-].bsVlanSap_list[-].static) "text 'true' as '1'";
  //variant (bladeSystems.bladeSystem_list[-].bsNetworkConfiguration.bsVlan_list[-].bsVlanSap_list[-].static) "text 'false' as '0'";
  //variant (bladeSystems.bladeSystem_list[-].bsNetworkConfiguration.bsVlan_list[-].bsVlanSap_list[-].protected) "text 'true' as '1'";
  //variant (bladeSystems.bladeSystem_list[-].bsNetworkConfiguration.bsVlan_list[-].bsVlanSap_list[-].protected) "text 'false' as '0'";
  variant (hardware) "name as capitalized";
  variant (hardware.bladeSystemDomain_list) "untagged";
  variant (hardware.bladeSystemDomain_list[-]) "name as 'BladeSystemDomain'";
  variant (hardware.bladeType_list) "untagged";
  variant (hardware.bladeType_list[-]) "name as 'BladeType'";
  variant (hardware.bladeType_list[-].type_) "name as 'type'";
  //variant (hardware.bladeType_list[-].hasHwData) "text 'true' as '1'";
  //variant (hardware.bladeType_list[-].hasHwData) "text 'false' as '0'";
  //variant (hardware.bladeType_list[-].isMxb) "text 'true' as '1'";
  //variant (hardware.bladeType_list[-].isMxb) "text 'false' as '0'";
  //variant (hardware.bladeType_list[-].usesExternalBootServer) "text 'true' as '1'";
  //variant (hardware.bladeType_list[-].usesExternalBootServer) "text 'false' as '0'";
  variant (hardware.interSubrackLink_list) "untagged";
  variant (hardware.interSubrackLink_list[-]) "name as 'InterSubrackLink'";
  variant (hardware.subrack_list) "untagged";
  variant (hardware.subrack_list[-]) "name as 'Subrack'";
  variant (hardware.subrack_list[-].type_) "name as 'type'";
  variant (hardware.subrack_list[-].slot_list) "untagged";
  variant (hardware.subrack_list[-].slot_list[-]) "name as 'Slot'";
  variant (networkConfiguration) "name as capitalized";
  variant (networkConfiguration.externalBootServer_list) "untagged";
  variant (networkConfiguration.externalBootServer_list[-]) "name as 'ExternalBootServer'";
  variant (networkConfiguration.isIpTrafficClass_list) "untagged";
  variant (networkConfiguration.isIpTrafficClass_list[-]) "name as 'IsIpTrafficClass'";
  variant (networkConfiguration.isLanTrafficClass_list) "untagged";
  variant (networkConfiguration.isLanTrafficClass_list[-]) "name as 'IsLanTrafficClass'";
  variant (networkConfiguration.isLogicalNetwork_list) "untagged";
  variant (networkConfiguration.isLogicalNetwork_list[-]) "name as 'IsLogicalNetwork'";
  variant (networkConfiguration.isLogicalNetwork_list[-].isSubnet_list) "untagged";
  variant (networkConfiguration.isLogicalNetwork_list[-].isSubnet_list[-]) "name as 'IsSubnet'";
  variant (networkConfiguration.isLogicalNetwork_list[-].isSubnet_list[-].address_) "name as 'address'";
  variant (networkConfiguration.isLogicalNetwork_list[-].isSubnet_list[-].isSubnetSegment_list) "untagged";
  variant (networkConfiguration.isLogicalNetwork_list[-].isSubnet_list[-].isSubnetSegment_list[-]) "name as 'IsSubnetSegment'";
  variant (networkConfiguration.isLogicalNetwork_list[-].isSubnet_list[-].isSubnetSegment_list[-].address_) "name as 'address'";
  //variant (networkConfiguration.isLogicalNetwork_list[-].isSubnet_list[-].isSubnetSegment_list[-].dhcpEnabled) "text 'true' as '1'";
  //variant (networkConfiguration.isLogicalNetwork_list[-].isSubnet_list[-].isSubnetSegment_list[-].dhcpEnabled) "text 'false' as '0'";
  variant (networkConfiguration.isVariables) "name as capitalized";
  variant (networkConfiguration.isVlan_list) "untagged";
  variant (networkConfiguration.isVlan_list[-]) "name as 'IsVlan'";
  variant (software) "name as capitalized";
  variant (software.softwareInventory) "name as capitalized";
  variant (software.softwareInventory.backup_list) "untagged";
  variant (software.softwareInventory.backup_list[-]) "name as 'Backup'";
  variant (software.softwareInventory.softwareAlarm_list) "untagged";
  variant (software.softwareInventory.softwareAlarm_list[-]) "name as 'SoftwareAlarm'";
  variant (software.softwareInventory.softwareDeliveryPackage_list) "untagged";
  variant (software.softwareInventory.softwareDeliveryPackage_list[-]) "name as 'SoftwareDeliveryPackage'";
  variant (software.softwareInventory.softwareDeliveryPackage_list[-].type_) "name as 'type'";
  variant (software.softwareInventory.softwareGroup_list) "untagged";
  variant (software.softwareInventory.softwareGroup_list[-]) "name as 'SoftwareGroup'";
  variant (software.softwareJobs) "name as capitalized";
  variant (software.softwareJobs.backupCreateJob_list) "untagged";
  variant (software.softwareJobs.backupCreateJob_list[-]) "name as 'BackupCreateJob'";
  variant (software.softwareJobs.backupExportJob_list) "untagged";
  variant (software.softwareJobs.backupExportJob_list[-]) "name as 'BackupExportJob'";
  variant (software.softwareJobs.backupImportJob_list) "untagged";
  variant (software.softwareJobs.backupImportJob_list[-]) "name as 'BackupImportJob'";
  variant (software.softwareJobs.backupRestoreJob_list) "untagged";
  variant (software.softwareJobs.backupRestoreJob_list[-]) "name as 'BackupRestoreJob'";
  variant (software.softwareJobs.softwareChangeJob_list) "untagged";
  variant (software.softwareJobs.softwareChangeJob_list[-]) "name as 'SoftwareChangeJob'";
  variant (software.softwareJobs.softwareChangeJob_list[-].softwareChangeJobBladeInfo_list) "untagged";
  variant (software.softwareJobs.softwareChangeJob_list[-].softwareChangeJobBladeInfo_list[-]) "name as 'SoftwareChangeJobBladeInfo'";
  variant (software.softwareJobs.softwareDownloadJob_list) "untagged";
  variant (software.softwareJobs.softwareDownloadJob_list[-]) "name as 'SoftwareDownloadJob'";
};


}
with {
  encode "XML";
  variant "namespace as 'http://www.ericsson.com/is/isco/IntegratedSite/R4L06/R4AB_1.02' prefix 'IntegratedSite'";
  variant "controlNamespace 'http://www.w3.org/2001/XMLSchema-instance' prefix 'xsi'";
  variant "elementFormQualified";
}
