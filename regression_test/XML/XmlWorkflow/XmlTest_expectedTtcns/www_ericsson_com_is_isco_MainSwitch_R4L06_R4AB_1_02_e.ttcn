/******************************************************************************
* Copyright (c) 2000-2018 Ericsson Telecom AB
*
* XSD to TTCN-3 Translator
*
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v2.0
* which accompanies this distribution, and is available at
* https://www.eclipse.org/org/documents/epl-2.0/EPL-2.0.html
*
* Contributors:
*   Balasko, Jeno
*   Lovassy, Arpad
*   Raduly, Csaba
*   Szabo, Bence Janos
*
******************************************************************************/
//
//  File:          www_ericsson_com_is_isco_MainSwitch_R4L06_R4AB_1_02.ttcn
//  Description:
//  References:
//  Rev:
//  Prodnr:
//  Updated:
//  Contact:       http://ttcn.ericsson.se
//
////////////////////////////////////////////////////////////////////////////////
//	Generated from file(s):
//	- MainSwitch.xsd
//			/* xml version = "1.0" encoding = "UTF-8" */
//			/* targetnamespace = "http://www.ericsson.com/is/isco/MainSwitch/R4L06/R4AB_1.02" */
////////////////////////////////////////////////////////////////////////////////
//     Modification header(s):
//-----------------------------------------------------------------------------
//  Modified by:
//  Modification date:
//  Description:
//  Modification contact:
//------------------------------------------------------------------------------
////////////////////////////////////////////////////////////////////////////////


module www_ericsson_com_is_isco_MainSwitch_R4L06_R4AB_1_02_e {


import from XSD all;


import from tail_f_com_ns_confd_1_0_e all;


import from www_ericsson_com_is_isco_IntegratedSite_R4L06_R4AB_1_02_e all;


type record of VlanId VlanIdsType_26
with {
  variant "name as 'vlanIdsType-26'";
  variant "list";
};


type record of VlanId VlanIdsType_27
with {
  variant "name as 'vlanIdsType-27'";
  variant "list";
};


type XSD.Integer BandwidthUsageSamplingPeriodType_2 (1 .. 1440)
with {
  variant "name as 'bandwidthUsageSamplingPeriodType-2'";
};


/* Defines the usage of a specific object, expressed as a percentage. */
type XSD.Integer PercentUsage (0 .. 100);


type XSD.Token DistributingType_17 (pattern "Yes|No")
with {
  variant "name as 'distributingType-17'";
};


type XSD.Token DefaultedType_18 (pattern "Yes|No")
with {
  variant "name as 'defaultedType-18'";
};


type XSD.Token ExpiredType_19 (pattern "Yes|No")
with {
  variant "name as 'expiredType-19'";
};


type XSD.Token SchedulingType_21 (pattern "notUsed|wrr|strictpriority")
with {
  variant "name as 'schedulingType-21'";
};


type XSD.Integer CpuUsageSamplingPeriodType_1 (1 .. 60)
with {
  variant "name as 'cpuUsageSamplingPeriodType-1'";
};


type XSD.Token PmMemoryStatusType_4 (pattern "on|off")
with {
  variant "name as 'pmMemoryStatusType-4'";
};


/* IS logical subrack number. */
type XSD.Integer SubrackNum (0 .. 31);


/* The number of packets or octets sent or received over a
			specific link. */
type XSD.Integer StatisticCounter;


type XSD.Token ProcessorStatusType_3 (pattern "on|off")
with {
  variant "name as 'processorStatusType-3'";
};


/* The MXB position in a subrack. Left: position 0; Right: position 25. */
type XSD.Token MxbSlot (pattern "left|right");


/* A threshold value defining the threshold where an alarm is
			raised or ceased. */
type XSD.Integer ThresholdPercent (0 .. 100);


type XSD.Integer QueueValueType_25 (0 .. 7)
with {
  variant "name as 'queueValueType-25'";
};


/* The physical port, that is an MXB's physical port, which 
			either is a backplane slot link (port number 1 to 24) or an MXB's front port (port number 49 and 50). */
type XSD.Integer PhysicalPort (1 .. 50);


type XSD.Token LacpActivityType_12 (pattern "Passive|Active")
with {
  variant "name as 'lacpActivityType-12'";
};


type XSD.Token LacpTimeoutType_13 (pattern "Long|Short")
with {
  variant "name as 'lacpTimeoutType-13'";
};


type XSD.Token SyncronizationType_15 (pattern "In Sync|Out of Sync")
with {
  variant "name as 'syncronizationType-15'";
};


type XSD.Token LinkSelectionPolicyType_11 (pattern "Src MAC|Dst MAC|Src and Dst MAC|Src IP|Dst IP|Src and Dst IP")
with {
  variant "name as 'linkSelectionPolicyType-11'";
};


type enumerated BladeSlotLinkType_23
{
	int1(1)
}
with {
  variant "useNumber";
  variant "name as 'bladeSlotLinkType-23'";
};


type enumerated DummyEmptyType
{
	x
}
with {
  variant "text 'x' as ''";
};


type XSD.Token CollectingType_16 (pattern "Yes|No")
with {
  variant "name as 'collectingType-16'";
};


type XSD.Token ModeType_9 (pattern "LACP|Manual|Disable")
with {
  variant "name as 'modeType-9'";
};


/* The backplane slot link, that is a blade's physical position in
			the subrack. */
type XSD.Integer BladeSlotLink (1 .. 24);


type XSD.Token WeightType_22 (pattern "notUsed|high|medium|low")
with {
  variant "name as 'weightType-22'";
};


type XSD.Token VlanTypeType_7 (pattern "static|dynamic|-")
with {
  variant "name as 'vlanTypeType-7'";
};


type XSD.Token MacSelectionPolicyType_10 (pattern "Dynamic|Force")
with {
  variant "name as 'macSelectionPolicyType-10'";
};


type XSD.Token AggregationType_14 (pattern "Individual|Aggregatable")
with {
  variant "name as 'aggregationType-14'";
};


type XSD.Token StatusType_6 (pattern "on|off")
with {
  variant "name as 'statusType-6'";
};


type XSD.Token IsolationStatusType_8 (pattern "protected|isolatable|-")
with {
  variant "name as 'isolationStatusType-8'";
};


type XSD.Integer PbitKeyType_24 (0 .. 7)
with {
  variant "name as 'pbitKeyType-24'";
};


type XSD.Token PmBandwidthStatusType_5 (pattern "on|off")
with {
  variant "name as 'pmBandwidthStatusType-5'";
};


type XSD.Integer QueueType_20 (0 .. 7)
with {
  variant "name as 'queueType-20'";
};


/* A value defining the identity of a VLAN. */
type XSD.Integer VlanId (1 .. 4094);


/* All data types, classes and relationships in the MainSwitch model are described in detail. */
type record MainSwitch
{
	/* This class describes the Class of Service function. Class of
			Service (CoS) refers to the traffic service differentiation
			capabilities offered by the Ethernet standards. It offers
			means to differentiate the forwarding characteristics
			(latency, drop probability, etc.) for different traffic
			flows through the Main Switch. The CoS mechanisms are
			useful, primarily at times when the traffic load in the LAN
			is excessive. The traffic classes can be used to preserve
			the more loss-sensitive and (or) delay sensitive flows, at
			the expense of less sensitive ones. */
	record {
		/* This class describes Class Of Service (COS) configuration data. */
		record length(8) of record {
			/* Definition of a specific switch output queue. */
			QueueType_20 queue,
			/* Indicates allocated queue memory buffer in percentage. */
			PercentUsage buffer optional,
			/* Indicates if Sceduling is Weighted Round Robin (WRR) or
				Strict Priority. */
			SchedulingType_21 scheduling optional,
			/* Indicates if Weight in case of WRR is High, Medium or
				Low. */
			WeightType_22 weight optional
		} cosQueueConfigurationData_list,
		/* This class describes the Class of Service function
			operational data. */
		record length(0 .. 64) of record {
			SubrackNum subrackNum,
			MxbSlot mxbSlot,
			/* This class describes Class Of Service (COS) configuration data. */
			record length(8) of record {
				/* Definition of a specific switch output queue. */
				QueueType_20 queue,
				/* Indicates allocated queue memory buffer in percentage. */
				PercentUsage buffer optional,
				/* Indicates if Sceduling is Weighted Round Robin (WRR) or
				Strict Priority. */
				SchedulingType_21 scheduling optional,
				/* Indicates if Weight in case of WRR is High, Medium or
				Low. */
				WeightType_22 weight optional
			} cosQueueConfigurationData_list,
			/* This class describes Pbit to queue mapping. */
			record {
				BladeSlotLinkType_23 bladeSlotLink,
				/* Interface number. */
				XSD.Integer interface optional,
				record length(8) of record {
					PbitKeyType_24 pbitKey,
					QueueValueType_25 queueValue optional
				} pbitQueue_list
			} pbitToQueueMapping
		} operational_list,
		/* This class describes Pbit to queue mapping. */
		record {
			BladeSlotLinkType_23 bladeSlotLink,
			/* Interface number. */
			XSD.Integer interface optional,
			record length(8) of record {
				PbitKeyType_24 pbitKey,
				QueueValueType_25 queueValue optional
			} pbitQueue_list
		} pbitToQueueMapping
	} cos,
	/* This class describes the Performance Monitoring function.
			The Performance Monitoring (PMON) function monitors the
			usage of resources on the switch blades and issues an alarm
			if certain thresholds are exceeded. */
	record {
		/* Enabling monitoring of CPU and memory usage and reading the
			corresponding values of utilisation in percent. */
		record length(0 .. 64) of record {
			SubrackNum subrackNum,
			MxbSlot mxbSlot,
			/* The status of processor load performance measurement. */
			ProcessorStatusType_3 processorStatus,
			/* The value of the processor load in percent when
				performing the measurement. */
			PercentUsage pmProcessorLoad optional,
			/* The status of memory usage performance management */
			PmMemoryStatusType_4 pmMemoryStatus,
			/* The value of the amount of free memory in
				percent when performing a memory usage measurement. */
			PercentUsage pmMemoryFree optional,
			/* The value of free Memory in bytes when
				performing a memory usage measurement. */
			XSD.Integer pmMemoryFreeBytes optional,
			/* The status of bandwidth usage performance management */
			PmBandwidthStatusType_5 pmBandwidthStatus
		} pmBladeMeasure_list,
		/* Performance Monitoring configuration related data. */
		record length(0 .. 31) of record {
			SubrackNum subrackNum,
			/* Configuration of CPU upper threshold, that is when the CPU
				load is rising and crosses this threshold then the PMON
				function will raise an xxbCpuExcessiveAlarm. */
			ThresholdPercent cpuUpperThreshold optional,
			/* CPU lower threshold, that is when the CPU load is falling
				and crosses this threshold then the PM function 
				will cease the xxbCpuExcessiveAlarm. */
			ThresholdPercent cpuLowerThreshold optional,
			/* The sampling period, in seconds, during which CPU usage is measured. */
			CpuUsageSamplingPeriodType_1 cpuUsageSamplingPeriod optional,
			/* Memory upper threshold, that is when the Memory usage is
				rising and crosses this threshold, the PM function
				will raise an xxbMemExcessiveAlarm. */
			ThresholdPercent memoryUpperThreshold optional,
			/* Memory lower threshold, that is when the Memory usage is
				falling and crosses this threshold, the PM function
				will cease the xxbMemExcessiveAlarm. */
			ThresholdPercent memoryLowerThreshold optional,
			/* Bandwidth upper threshold, that is when the Bandwidth usage
				is rising and crosses this threshold, the PM
				function will raise an xxbBwExcessiveAlarm. */
			ThresholdPercent bandwidthUpperThreshold optional,
			/* Bandwidth lower threshold, that is when the Bandwidth usage
				is falling and crosses this threshold, the PM
				function in ISS will cease the xxbBwExcessiveAlarm. */
			ThresholdPercent bandwidthLowerThreshold optional,
			/* The sampling period, in minutes, during which bandwidth usage is measured. */
			BandwidthUsageSamplingPeriodType_2 bandwidthUsageSamplingPeriod optional
		} pmConfiguration_list,
		/* Performance Management Link related data. For each Physical Port, 
			statistics can be displayed and the bandwidth
			usage monitored. */
		record {
			/* This class enables monitoring Bandwidth usage and reading the
			corresponding values of utilisation in percent. */
			record length(0 .. 1536) of record {
				SubrackNum subrackNum,
				MxbSlot mxbSlot,
				PhysicalPort physicalPort,
				/* Start or stop measuring of bandwidth utilisation. */
				StatusType_6 status,
				/* This is the value of the average Bandwidth usage in
				percent during the configured sampling period. */
				PercentUsage bandwidthUsage optional
			} pmBwMeasure_list,
			/* This class describes the Performance Monitoring Statistics;
			that is counters for each physical port on the MXB, the actual
			speed used on the port and if the port operates in full or
			half duplex mode. */
			record length(0 .. 1536) of record {
				SubrackNum subrackNum,
				MxbSlot mxbSlot,
				PhysicalPort physicalPort,
				/* Performance Monitoring counter for received octets. */
				StatisticCounter inOctets optional,
				/* Performance Monitoring counter for received Unicast
				Packets */
				StatisticCounter inUnicastPackets optional,
				/* Performance Monitoring counter for received Multicast
				Packets */
				StatisticCounter inMulticastPackets optional,
				/* Performance Monitoring counter for received Broadcast
				Packets */
				StatisticCounter inBroadcastPackets optional,
				/* Performance Monitoring counter for the number of received
				discarded octets. */
				StatisticCounter inOctetsDiscarded optional,
				/* Performance Monitoring counter for the number of received
				faulty octets. */
				StatisticCounter inOctetsFaulty optional,
				/* Performance Monitoring counter for the number of received
				Unknown Protocol packets. */
				StatisticCounter inUnknownProtocol optional,
				/* Performance Monitoring counter for octets in the send
				buffer. */
				StatisticCounter outOctets optional,
				/* Performance Monitoring counter for Unicast Packets in
				the send buffer. */
				StatisticCounter outUnicastPackets optional,
				/* Performance Monitoring counter for Multicast Packets in
				the send buffer. */
				StatisticCounter outMulticastPackets optional,
				/* Performance Monitoring counter for Broadcast Packets in
				the send buffer. */
				StatisticCounter outBroadcastPackets optional,
				/* Performance Monitoring counter for Frames with Op code
				Pause */
				StatisticCounter framesOpcodePause optional,
				/* Performance Monitoring counter for Frames exceeding
				maximum frame size. */
				StatisticCounter framesExceedingMaxFramesize optional
			} pmStatistics_list
		} pmLink
	} pm,
	/* This class describes data for each MXB and all Blade Slot
			Links in the Integrated Site. */
	record {
		/* This class describes data related to a specific MXB. */
		record {
			/* This class describes data related to a specific MXB4 (ROJ 208 365/10). */
			record length(0 .. 64) of record {
				SubrackNum subrackNum,
				MxbSlot mxbSlot,
				/* The MXB hardware type. */
				XSD.Token description optional,
				/* Effective IP address of the switch to be used for
				contacting via the SNMP interface. */
				XSD.Token ipAddress optional,
				/* The time since the MXB was last re-initialized. */
				XSD.Token upTime optional,
				/* Whether the MXB is sending marker PDUs on the backplane slot links at full intensity or not. */
				XSD.Token isolationStatus optional,
				/* Status for the other MXB in the same subrack, the status is decided by the MXB-pair intersubrack protocol.
				Possible values are Present and Not present. */
				XSD.Token remoteMxbHost optional,
				/* The software version executing on MXB. */
				XSD.Token executingSoftwareVersion optional,
				/* The software version in MXB's flash memory. */
				XSD.Token flashLoadedSoftwareVersion optional,
				/* The fallback software version on MXB. */
				XSD.Token fallbackSoftwareVersion optional,
				/* The version of the firmware, supervising the control bus
				in the backplane. */
				XSD.Token ipmiFirmwareVersion optional,
				/* The version of the Universal Boot-loader stored in the
				MXB flash memory. */
				XSD.Token bootLoaderVersion optional,
				/* The MXB hardware version. */
				XSD.Token hwVersion optional
			} mXB4_list,
			/* This class describes data related to a specific MXB5LE (ROJ 208 368/10). */
			record length(0 .. 64) of record {
				SubrackNum subrackNum,
				MxbSlot mxbSlot,
				/* The MXB hardware type. */
				XSD.Token description optional,
				/* Effective IP address of the switch to be used for
				contacting via the SNMP interface. */
				XSD.Token ipAddress optional,
				/* The time since the MXB was last re-initialized. */
				XSD.Token upTime optional,
				/* Whether the MXB is sending marker PDUs on the backplane slot links at full intensity or not. */
				XSD.Token isolationStatus optional,
				/* Status for the other MXB in the same subrack, the status is decided by the MXB-pair intersubrack protocol.
				Possible values are Present and Not present. */
				XSD.Token remoteMxbHost optional,
				/* The version of the kernel loadmodule executing in RAM. */
				XSD.Token excutingKernelSWVersion optional,
				/* The version of the kernel loadmodule stored in flash memory. */
				XSD.Token flashLoadedKernelSWVersion optional,
				/* The version of the kernel loadmodule stored on disc, that is, on the SIS node. */
				XSD.Token discLoadedKernelSWVersion optional,
				/* The version of the root file system loadmodule stored in flash memory. */
				XSD.Token activeRootFileSystemVersion optional,
				/* The version of the passive root file system loadmodule stored in flash memory. */
				XSD.Token passiveRootFileSystemVersion optional,
				/* The version of the root file system loadmodule stored on disc, that is,
  				on the SIS node. */
				XSD.Token discLoadedRootFileSystemVersion optional,
				/* The fallback software version on the MXB. */
				XSD.Token fallbackSoftwareVersion optional,
				/* The executing version of the firmware, that supervises the control bus in the backplane. */
				XSD.Token executingIpmiFirmwareVersion optional,
				/* The version of the firmware, that supervises the control bus in the backplane. */
				XSD.Token ipmiFirmwareVersion optional,
				/* The fallback version of the firmware, that supervises the control bus in the backplane. */
				XSD.Token ipmiFallbackFirmwareVersion optional,
				/* The version of the Universal Boot-loader stored in the
				MXB flash memory. */
				XSD.Token bootLoaderVersion optional,
				/* The MXB hardware version. */
				XSD.Token hwVersion optional
			} mXB5LE_list
		} stateBlade,
		/* This class describes actual state data for a specific link
			related to the MXB. */
		record {
			/* This class describes the state of the Blade Slot Links with
			regard to Link Aggregation info. Link aggregation is the
			grouping together of two or more links (data channels) into
			a single channel, which appears as a single, logical link. */
			record length(0 .. 1536) of record {
				SubrackNum subrackNum,
				MxbSlot mxbSlot,
				PhysicalPort physicalPort,
				/* This class describes Link Aggregation info for the current subrack, MXB
			and Blade Slot Link. */
				record {
					/* A unique value, greater than zero, for each interface or
				interface sub-layer in the managed system. */
					XSD.Integer ifIndex,
					/* The port-channel mode shows the current Operating Channel Mode of the
				port. */
					ModeType_9 mode optional,
					/* The number of configured ports for this interface. */
					XSD.Integer configuredPorts optional,
					/* The number of ports that are attached to the
				port-channel and actively carrying data traffic on the
				line. */
					XSD.Integer activePorts optional,
					/* Sets the MAC address selection method for the
				port-channel. */
					MacSelectionPolicyType_10 macSelectionPolicy optional,
					/* Link selection policy to be used by the port-channel. */
					LinkSelectionPolicyType_11 linkSelectionPolicy optional,
					/* A 6-octet read-only value containing the individual MAC
				address assigned to the Aggregator. */
					XSD.Token aggregatorMac optional,
					/* A 6-octet read-write MAC address value used as a unique
				identifier for the system that contains this Aggregator. */
					XSD.Token actorId optional,
					/* A 2-octet read-write value indicating the priority value
				associated with the Actors System ID. */
					XSD.Integer actorPrio optional,
					/* The current administrative value of the Key for the
				Aggregator. */
					XSD.Integer actorAdminKey optional,
					/* The current operational value of the Key for the
				Aggregator. */
					XSD.Integer actorOperKey optional,
					/* A 6-octet read-only MAC address value consisting of the
				unique identifier for the current protocol Partner of
				this Aggregator. */
					XSD.Token partnerId optional,
					/* A 2-octet read-only value that indicates the priority
				value associated with the Partners System ID. */
					XSD.Integer partnerPrio optional,
					/* The current operational value of the Key for the
				Aggregator's current protocol Partner. */
					XSD.Integer partnerOperKey optional,
					/* This class describes Link Aggregation Port Data */
					record {
						/* The port number locally assigned to the Aggregation
				Port. */
						XSD.Integer aggrPortActorPort,
						/* This class describes Link Aggregation Operating State Data. A
			string of 8 bits, corresponding to the current operational
			values of Actor_State as transmitted by the Actor in LACPDU. */
						record {
							XSD.Integer index,
							/* Indicates if the Activity control value with regard to this link is active or
				passive. */
							LacpActivityType_12 lacpActivity optional,
							/* Indicates if the Timeout control value with regard to this link is long or short. */
							LacpTimeoutType_13 lacpTimeout optional,
							/* Indicates that the system considers the link to be Aggregatable; that is, a potential candidate for aggregation,
				or that the link is considered to be Individual; that is, the link can be operated only as an individual link. */
							AggregationType_14 aggregation optional,
							/* Indicates if the system considers the link to be in_sync; that is it has been allocated to the correct Link Aggregation Group, the group has
				been associated with a compatible Aggregator, and the identity of the Link Aggregation Group
				is consistent with the System ID and operational Key information transmitted.
				If the link is out_of_sync then it is not in the right Aggregation group. */
							SyncronizationType_15 syncronization optional,
							/* Indicates if collection of incoming frames on this link is  
				enabled(yes) or disabled(no). */
							CollectingType_16 collecting optional,
							/* Indicates if distribution of outgoing frames on this link is
				enabled(yes) or disabled(no). */
							DistributingType_17 distributing optional,
							/* Indicates if the actor's receive machine is using default operational partner information, administratively configured for the partner (Yes), 
			or if the operational partner information in use has been received in a LACPDU (No). */
							DefaultedType_18 defaulted optional,
							/* Indicates whether the actor's receive machine is in an expired state (Yes) or not (No). */
							ExpiredType_19 expired optional
						} linkAggregationOperStateData
					} linkAggregationPortData
				} linkAggregationData
			} stateLa_list,
			/* This class describes the state of the Physical Ports with
			regard to VLAN info. */
			record length(0 .. 768) of record {
				SubrackNum subrackNum,
				MxbSlot mxbSlot,
				PhysicalPort physicalPort,
				/* This class describes VLANs for actual subrack and Blade Slot Link */
				record of record {
					/* A 12-bit VLAN ID used by the VLAN Tag header. */
					VlanId vlanId,
					/* Indicates if the VLAN ID has been created by management (static),
				by GVRP (dynamic) or other (-). */
					VlanTypeType_7 vlanType optional,
					/* The isolation protection value for this VLAN ID. */
					IsolationStatusType_8 isolationStatus optional
				} vlanData_list
			} stateVlan_list
		} stateLink
	} state,
	/* The VLAN service displays information about configured and
			active VLANs in the Main Switch. */
	record {
		/* VLAN Administrative class: shows the administrative
			configured VLANs */
		record length(0 .. 31) of record {
			SubrackNum subrackNum,
			MxbSlot mxbSlot,
			/* The number of administrative configured VLANs. */
			XSD.Integer numberOfDefinedVlans optional,
			/* Information about defined VLAN IDs */
			VlanIdsType_27 vlanIds optional
		} vlanAdmin_list,
		/* VLAN operational class: An instant view of the VLAN state on
			the MXB boards. */
		record length(0 .. 31) of record {
			SubrackNum subrackNum,
			MxbSlot mxbSlot,
			/* The number of active VLANs in an MXB. That is, VLANs either defined as static or enabled by GVRP. */
			XSD.Integer numberOfActiveVlans optional,
			/* Information about operative VLAN IDs */
			VlanIdsType_26 vlanIds optional
		} vlanOper_list
	} vlan
}
with {
  variant "element";
  variant (cos) "name as capitalized";
  variant (cos.cosQueueConfigurationData_list) "untagged";
  variant (cos.cosQueueConfigurationData_list[-]) "name as 'CosQueueConfigurationData'";
  variant (cos.operational_list) "untagged";
  variant (cos.operational_list[-]) "name as 'Operational'";
  variant (cos.operational_list[-].cosQueueConfigurationData_list) "untagged";
  variant (cos.operational_list[-].cosQueueConfigurationData_list[-]) "name as 'CosQueueConfigurationData'";
  variant (cos.operational_list[-].pbitToQueueMapping) "name as capitalized";
  variant (cos.operational_list[-].pbitToQueueMapping.pbitQueue_list) "untagged";
  variant (cos.operational_list[-].pbitToQueueMapping.pbitQueue_list[-]) "name as 'PbitQueue'";
  variant (cos.pbitToQueueMapping) "name as capitalized";
  variant (cos.pbitToQueueMapping.pbitQueue_list) "untagged";
  variant (cos.pbitToQueueMapping.pbitQueue_list[-]) "name as 'PbitQueue'";
  variant (pm) "name as capitalized";
  variant (pm.pmBladeMeasure_list) "untagged";
  variant (pm.pmBladeMeasure_list[-]) "name as 'PmBladeMeasure'";
  variant (pm.pmConfiguration_list) "untagged";
  variant (pm.pmConfiguration_list[-]) "name as 'PmConfiguration'";
  variant (pm.pmLink) "name as capitalized";
  variant (pm.pmLink.pmBwMeasure_list) "untagged";
  variant (pm.pmLink.pmBwMeasure_list[-]) "name as 'PmBwMeasure'";
  variant (pm.pmLink.pmStatistics_list) "untagged";
  variant (pm.pmLink.pmStatistics_list[-]) "name as 'PmStatistics'";
  variant (state) "name as capitalized";
  variant (state.stateBlade) "name as capitalized";
  variant (state.stateBlade.mXB4_list) "untagged";
  variant (state.stateBlade.mXB4_list[-]) "name as 'MXB4'";
  variant (state.stateBlade.mXB5LE_list) "untagged";
  variant (state.stateBlade.mXB5LE_list[-]) "name as 'MXB5LE'";
  variant (state.stateLink) "name as capitalized";
  variant (state.stateLink.stateLa_list) "untagged";
  variant (state.stateLink.stateLa_list[-]) "name as 'StateLa'";
  variant (state.stateLink.stateLa_list[-].linkAggregationData) "name as capitalized";
  variant (state.stateLink.stateLa_list[-].linkAggregationData.linkAggregationPortData) "name as capitalized";
  variant (state.stateLink.stateLa_list[-].linkAggregationData.linkAggregationPortData.linkAggregationOperStateData) "name as capitalized";
  variant (state.stateLink.stateVlan_list) "untagged";
  variant (state.stateLink.stateVlan_list[-]) "name as 'StateVlan'";
  variant (state.stateLink.stateVlan_list[-].vlanData_list) "untagged";
  variant (state.stateLink.stateVlan_list[-].vlanData_list[-]) "name as 'VlanData'";
  variant (vlan) "name as capitalized";
  variant (vlan.vlanAdmin_list) "untagged";
  variant (vlan.vlanAdmin_list[-]) "name as 'VlanAdmin'";
  variant (vlan.vlanOper_list) "untagged";
  variant (vlan.vlanOper_list[-]) "name as 'VlanOper'";
};


}
with {
  encode "XML";
  variant "namespace as 'http://www.ericsson.com/is/isco/MainSwitch/R4L06/R4AB_1.02'";
  variant "controlNamespace 'http://www.w3.org/2001/XMLSchema-instance' prefix 'xsi'";
  variant "elementFormQualified";
}
