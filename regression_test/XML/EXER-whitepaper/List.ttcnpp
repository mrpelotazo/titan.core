/******************************************************************************
 * Copyright (c) 2000-2018 Ericsson Telecom AB
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v2.0
 * which accompanies this distribution, and is available at
 * https://www.eclipse.org/org/documents/epl-2.0/EPL-2.0.html
 *
 * Contributors:
 *   Balasko, Jeno
 *   Baranyi, Botond
 *   Raduly, Csaba
 *
 ******************************************************************************/
module List {
modulepar boolean List_verbose := false;
#define verbose List_verbose
#include "../macros.ttcnin"

type component L {}

type record of integer Ints
with {
  variant "list"
}

DECLARE_XER_ENCODERS(Ints, ints);
DECLARE_EXER_ENCODERS(Ints, ints);

const Ints ival := {
  10, 20, 34, 67, 98
}

const universal charstring str_ints_e :=
"<Ints>10 20 34 67 98</Ints>\n\n";

const universal charstring str_ints_b :=
"<Ints>\n" &
"\t<INTEGER>10</INTEGER>\n" &
"\t<INTEGER>20</INTEGER>\n" &
"\t<INTEGER>34</INTEGER>\n" &
"\t<INTEGER>67</INTEGER>\n" &
"\t<INTEGER>98</INTEGER>\n" &
"</Ints>\n" &
"\n";

testcase encode_ints() runs on L
{
  CHECK_METHOD(bxer_enc_ints, ival, str_ints_b);
  CHECK_METHOD(exer_enc_ints, ival, str_ints_e);
}

testcase decode_ints() runs on L
{
  CHECK_DECODE(bxer_dec_ints, str_ints_b, Ints, ival);
  CHECK_DECODE(exer_dec_ints, str_ints_e, Ints, ival);
}

/* * * * * * * * * * * * * * * * * * * * */

type record of float Floats
with {
  variant "list"
}

DECLARE_XER_ENCODERS (Floats, floats);
DECLARE_EXER_ENCODERS(Floats, floats);

const Floats f := { 1.660538, 6.022141, 1.38, 96485.3383, 8.314472 }

const universal charstring str_floats_e :=
"<Floats>1.660538 6.022141 1.380000 96485.338300 8.314472</Floats>\n\n";

const universal charstring str_floats_b :=
"<Floats>\n" &
"\t<REAL>1.660538</REAL>\n" &
"\t<REAL>6.022141</REAL>\n" &
"\t<REAL>1.380000</REAL>\n" &
"\t<REAL>96485.338300</REAL>\n" &
"\t<REAL>8.314472</REAL>\n" &
"</Floats>\n\n"

testcase encode_floats() runs on L
{
  CHECK_METHOD(bxer_enc_floats, f, str_floats_b);
  CHECK_METHOD(exer_enc_floats, f, str_floats_e);
}

testcase decode_floats() runs on L
{
  CHECK_DECODE(bxer_dec_floats, str_floats_b, Floats, f);
  CHECK_DECODE(exer_dec_floats, str_floats_e, Floats, f);
}

/* * * * * * * * * * * * * * * * * * * * */

// decoding a list with leading whitespaces (bug 540607)
type record of universal charstring Strings
with {
  variant "list"
}

DECLARE_EXER_ENCODERS(Strings, strings);

const Strings str := { "first", "second", "third", "fourth" }

const universal charstring str_dec :=
"<Strings> 
   first
     second
       third
         fourth
 </Strings>";


testcase decode_strings() runs on L
{
  CHECK_DECODE(exer_dec_strings, str_dec, Strings, str);
}

/* * * * * * * * * * * * * * * * * * * * */

control {
  execute(encode_ints());
  execute(decode_ints());
  execute(encode_floats());
  execute(decode_floats());
  execute(decode_strings());
}

}
with {
  encode "XML"
}
