/******************************************************************************
 * Copyright (c) 2000-2018 Ericsson Telecom AB
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v2.0
 * which accompanies this distribution, and is available at
 * https://www.eclipse.org/org/documents/epl-2.0/EPL-2.0.html
 *
 * Contributors:
 *   Balasko, Jeno
 *   Baranyi, Botond
 *
 ******************************************************************************/

module three {

  import from one all;
  import from two all;
  import from Zero language "ASN.1" all;

  type union Thing {
    boolean b,
    integer i,
    charstring cs,
    record { integer num } rec
  } with {
    variant "JSON : as value";
    variant(i) "JSON : name as int";
    variant(cs) "JSON : name as str";
  }

  type record of Thing Stuff;

  type set Barrels {
    integer numBarrels,
    record {
      enumerated { Small, Medium, Large } size,
      boolean filled
    } barrelType
  } with {
    variant(barrelType) "JSON: extend(comment):(first comment)";
    variant(barrelType) "JSON: extend(comment):(second comment)";
  }

  type set of record { integer num } Nums
  with { variant([-].num) "JSON: name as number" }

  type record Numz {
    Nums nums
  }

  type record of Rec Rex;

  external function f_enc_ints(in Ints eents, out octetstring octus)
    with { extension "prototype(fast) encode(JSON) printing(pretty)" }

  external function f_enc_bigset(in Big_Set x) return octetstring
    with { extension "prototype(convert) encode(JSON)" }

  external function f_dec_bigset(in octetstring os) return Big_Set
    with { extension "prototype(convert) decode(JSON)" } 

} with {
  encode "JSON"
}
