/******************************************************************************
 * Copyright (c) 2000-2018 Ericsson Telecom AB
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v2.0
 * which accompanies this distribution, and is available at
 * https://www.eclipse.org/org/documents/epl-2.0/EPL-2.0.html
 *
 * Contributors:
 *   Szabo, Bence Janos
 *
 ******************************************************************************/
module PortVariables {

	type record of integer RoI;

	type port VP1 message {
		out integer, charstring, RoI;
		in integer, charstring, RoI;
	} with {
		extension "provider"
	}

	type port NVP1 message map to VP1 {
		out charstring to integer with char_to_default_int_template() : charstring with char_to_default_char() : charstring with char_to_default_const_char() : RoI with char_to_default_roi() : integer with char_to_int();
		

		in octetstring from integer with double_receive_test();
		in integer from integer with int_to_int(), charstring, RoI;

		out octetstring to integer with double_send_test();

		const charstring c_cs := "DefaultConst"
		var charstring cs := "Default";
		var template integer i := 3;
		var template RoI roi := {1,2,3};
		var integer num;
	}

	function char_to_default_int_template(in charstring input, out integer output) port NVP1 {
		if (input == "int template") {
			output := valueof(i);
			port.setstate(0);
			i := 666;
		} else {
			port.setstate(1);
		}
	} with {
		extension "prototype(fast)";
	}

	function char_to_default_char(in charstring input, out charstring output) port NVP1 {
		if (input == "charstring") {
			output := cs;
			port.setstate(0);
			cs := "Modified";
		} else {
			port.setstate(1);
		}
	} with {
		extension "prototype(fast)";
	}

	function char_to_default_const_char(in charstring input, out charstring output) port NVP1 {
		if (input == "const charstring") {
			output := c_cs;
			port.setstate(0);
		} else {
			port.setstate(1);
		}
	} with {
		extension "prototype(fast)";
	}

	function char_to_default_roi(in charstring input, out RoI output) port NVP1 {
		if (input == "RoI") {
			output := valueof(roi);
			port.setstate(0);
			roi := {6,6,6};
		} else {
			port.setstate(1);
		}
	} with {
		extension "prototype(fast)";
	}

	function char_to_int(in charstring input, out integer output) port NVP1 {
		if (input == "Unbound") {
			if (isbound(num)) {
				output := num;
			} else {
				output := 0;
			}
			port.setstate(0);
			num := 666;
		} else {
			port.setstate(1);
		}
	} with {
		extension "prototype(fast)";
	}


	function double_send_test(in octetstring input, out integer output) port NVP1 {
		if (input == 'BEEF'O) {
			output := lengthof(input);
			// Send here and receive here
			port.send('12345678'O);
			timer t := 0.5;
			t.start;
			// '12345678'O was mapped to its length in double_receive_test() function
			alt {
				[] port.receive(4) { setverdict(pass); }
				[] t.timeout    { setverdict(fail); }
			}
			t.stop;
			port.setstate(0);
			// Send again to receive in the testcase
			port.send('1234567891'O);
		} else if (input == '1234567891'O or input == '12345678'O) {
			output := lengthof(input);
			port.setstate(0);
		} else if (input == 'AB'O or input == 'CD'O) {
			// This just maps the value to integer, needed for the receive test
			output := oct2int(input);
			port.setstate(0);
		}
	} with {
		extension "prototype(fast)";
	}

	function double_receive_test(in integer input, out octetstring output) port NVP1 {
		if (int2oct(input,2) == '00AB'O) {
			timer t := 0.5;

			// Send and receive
			port.send('12345678'O);
			t.start;
			// '12345678'O was mapped to its length in double_receive_test() function
			alt {
				[] port.receive(4) { setverdict(pass); }
				[] t.timeout    { setverdict(fail); }
			}
			t.stop;

			output := int2oct(input, 1);
			port.setstate(0);

		} else {
			port.setstate(1);
		}
	} with {
		extension "prototype(fast)";
	}

	function int_to_int(in integer input, out integer output) port NVP1 {
		// we receive the length of '1234567891'O here
		output := input;
		port.setstate(0);
	} with {
		extension "prototype(fast)";
	}


	type component MyComp {
		port NVP1 p[2];
	}

	type component System {
		port VP1 p1;
		port VP1 p2;
	}


	testcase tc_variable_change_test(boolean test_changed) runs on MyComp system System {
		map(self:p[0], system:p1);

		// Test that the default values of port variables are set
		// and change them inside the translation functions
		p[0].send("int template");
		timer t := 0.5;
		t.start;
		alt {
			[] p[0].receive(3) { setverdict(pass); }
			[] t.timeout    { setverdict(fail); }
		}
		t.stop;

		p[0].send("charstring");
		t.start;
		alt {
			[] p[0].receive("Default") { setverdict(pass); }
			[] t.timeout    { setverdict(fail); }
		}
		t.stop;

		p[0].send("const charstring");
		t.start;
		alt {
			[] p[0].receive("DefaultConst") { setverdict(pass); }
			[] t.timeout    { setverdict(fail); }
		}
		t.stop;

		var RoI roi := {1,2,3};
		p[0].send("RoI");
		t.start;
		alt {
			[] p[0].receive(roi) { setverdict(pass); }
			[] t.timeout    { setverdict(fail); }
		}
		t.stop;

		p[0].send("Unbound");
		t.start;
		alt {
			// 0 means that num is unbound
			[] p[0].receive(0) { setverdict(pass); }
			[] t.timeout    { setverdict(fail); }
		}
		t.stop;

		// Test that the variables are changed
		if (test_changed) {
			p[0].send("int template");
			t.start;
			alt {
				[] p[0].receive(666) { setverdict(pass); }
				[] t.timeout    { setverdict(fail); }
			}
			t.stop;

			p[0].send("charstring");
			t.start;
			alt {
				[] p[0].receive("Modified") { setverdict(pass); }
				[] t.timeout    { setverdict(fail); }
			}
			t.stop;

			// The const did not change
			p[0].send("const charstring");
			t.start;
			alt {
				[] p[0].receive("DefaultConst") { setverdict(pass); }
				[] t.timeout    { setverdict(fail); }
			}
			t.stop;

			roi := {6,6,6};
			p[0].send("RoI");
			t.start;
			alt {
				[] p[0].receive(roi) { setverdict(pass); }
				[] t.timeout    { setverdict(fail); }
			}
			t.stop;

			p[0].send("Unbound");
			t.start;
			alt {
				[] p[0].receive(666) { setverdict(pass); }
				[] t.timeout    { setverdict(fail); }
			}
			t.stop;
		}

		// p[0] and p[1] should have different port variable instances
		// Theese tests would fail if they would share the variables
		map(self:p[1], system:p2);

		// Test that the default values of port variables are set
		// and change them inside the translation functions
		p[1].send("int template");
		t.start;
		alt {
			[] p[1].receive(3) { setverdict(pass); }
			[] t.timeout    { setverdict(fail); }
		}
		t.stop;

		p[1].send("charstring");
		t.start;
		alt {
			[] p[1].receive("Default") { setverdict(pass); }
			[] t.timeout    { setverdict(fail); }
		}
		t.stop;

		p[1].send("const charstring");
		t.start;
		alt {
			[] p[1].receive("DefaultConst") { setverdict(pass); }
			[] t.timeout    { setverdict(fail); }
		}
		t.stop;

		roi := {1,2,3};
		p[1].send("RoI");
		t.start;
		alt {
			[] p[1].receive(roi) { setverdict(pass); }
			[] t.timeout    { setverdict(fail); }
		}
		t.stop;

		p[1].send("Unbound");
			t.start;
			alt {
				[] p[1].receive(0) { setverdict(pass); }
				[] t.timeout    { setverdict(fail); }
			}
			t.stop;

		// Test that the variables are changed
		if (test_changed) {
			p[1].send("int template");
			t.start;
			alt {
				[] p[1].receive(666) { setverdict(pass); }
				[] t.timeout    { setverdict(fail); }
			}
			t.stop;

			p[1].send("charstring");
			t.start;
			alt {
				[] p[1].receive("Modified") { setverdict(pass); }
				[] t.timeout    { setverdict(fail); }
			}
			t.stop;

			// The const did not change
			p[1].send("const charstring");
			t.start;
			alt {
				[] p[1].receive("DefaultConst") { setverdict(pass); }
				[] t.timeout    { setverdict(fail); }
			}
			t.stop;

			roi := {6,6,6};
			p[1].send("RoI");
			t.start;
			alt {
				[] p[1].receive(roi) { setverdict(pass); }
				[] t.timeout    { setverdict(fail); }
			}
			t.stop;

			p[1].send("Unbound");
			t.start;
			alt {
				[] p[1].receive(666) { setverdict(pass); }
				[] t.timeout    { setverdict(fail); }
			}
			t.stop;
		}
	}

	testcase tc_double_send_and_receive_test() runs on MyComp system System {
		map(self:p[0], system:p1);

		// Test that we can send and receive during the execution of the translation function
		p[0].send('BEEF'O);

		timer t := 0.5;
		t.start;
		alt {
			// First receive the length of 1234567891
			[] p[0].receive(5) { setverdict(pass); }
			[] t.timeout    { setverdict(fail); }
		}
		t.stop;

		t.start;
		alt {
			// Then receive length of BEEF
			[] p[0].receive(2) { setverdict(pass); }
			[] t.timeout    { setverdict(fail); }
		}
		t.stop;

		// Test that we can send and receive during a receiving translation function
		p[0].send('AB'O);

		t.start;
		alt {
			// Then receive back 'AB'O
			[] p[0].receive('AB'O) { setverdict(pass); }
			[] t.timeout    { setverdict(fail); }
		}
		t.stop;
	}

	control {
		execute(tc_variable_change_test(true));
		// Test that the variables are restored to the default values
		execute(tc_variable_change_test(false));

		execute(tc_double_send_and_receive_test());
	}
}