/******************************************************************************
 * Copyright (c) 2000-2017 Ericsson Telecom AB
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Baranyi, Botond
 *
 ******************************************************************************/

// This module contains tests for using subreferences (field names and array indexes) on the
// result of a 'valueof' operation.
module TvalueofSubref {

/* * * * Types * * * */
type record Rec {
  integer num,
  charstring str
}

type record of integer RoI;

type union Uni {
  integer i,
  float f,
  boolean b,
  bitstring bs,
  hexstring hs,
  octetstring os,
  charstring cs,
  universal charstring ucs,
  verdicttype vt,
  enumerated { Small, Medium, Large } size
}

type octetstring Arr[4];

type record of Uni RoUni;

type set Complex {
  Rec rec,
  RoI roi,
  RoUni unis
}

type port PT message {
  inout integer, octetstring
}
with { extension "internal" };

type component CT {
  timer t;
  port PT pt;
}

/* * * * Helper functions for certain test cases * * * */
function f_test(in charstring p1, in integer p2, in boolean p3, in octetstring p4)
{
  if (p1 == valueof(t_rec.str)) { setverdict(pass); }
  else { setverdict(fail, "Expected: ", t_rec.str, ", got: ", p1); }
  if (p2 == valueof(t_roi[0])) { setverdict(pass); }
  else { setverdict(fail, "Expected: ", t_roi[0], ", got: ", p2); }
  if (p3 == valueof(t_unis[2].b)) { setverdict(pass); }
  else { setverdict(fail, "Expected: ", t_unis[2].b, ", got: ", p3); }
  if (p4 == valueof(t_arr[1])) { setverdict(pass); }
  else { setverdict(fail, "Expected: ", t_arr[1], ", got: ", p4); }
}

external function ef_enc_int(in integer x) return octetstring
  with { extension "prototype(convert) encode(JSON)" };

external function ef_enc_oct(in octetstring x) return octetstring
  with { extension "prototype(convert) encode(JSON)" };

altstep as_ct() runs on CT
{
  var integer bad_int;
  var octetstring bad_os;
  [] pt.receive(integer:?) -> value bad_int {
    setverdict(fail, "Expected octetstring value instead of ", bad_int);
  }
  [] pt.receive(octetstring:?) -> value bad_os {
    setverdict(fail, "Expected integer value instead of ", bad_os);
  }
  [] t.timeout {
    setverdict(inconc, "Receive timed out");
  }
}

/* * * * Templates * * * */
template Rec t_rec := { num := 3, str := "a0" };
template RoI t_roi := { 1, 2, 4, 8, 16 };
template RoUni t_unis := { { i := -6 }, { f := 0.5 }, { b := true }, { bs := '1101'B }, { hs := '3D7'H },
  { os := '44A1'O }, { cs := "abc" }, { ucs := "vÃ­z" }, { vt := error }, { size := Small } };
template Arr t_arr := { '01'O, 'DE'O, 'ABBA'O, '1234EEFF'O };

/* * * * Test cases * * * */
testcase tc_valueof_subref_var_assign() runs on CT
{
  var integer x1 := valueof(t_rec).num;
  var integer x2 := valueof(t_roi)[4];
  var integer x3 := valueof(t_unis[0]).i;
  var charstring str1 := valueof(t_rec).str;
  var charstring str2 := valueof(t_unis[6]).cs;
  var octetstring os := valueof(t_arr)[1];
  if (x1 == valueof(t_rec.num)) { setverdict(pass); }
  else { setverdict(fail, "Expected: ", t_rec.num, ", got: ", x1); }
  if (x2 == valueof(t_roi[4])) { setverdict(pass); }
  else { setverdict(fail, "Expected: ", t_roi[4], ", got: ", x2); }
  if (x3 == valueof(t_unis[0].i)) { setverdict(pass); }
  else { setverdict(fail, "Expected: ", t_unis[0].i, ", got: ", x3); }
  if (str1 == valueof(t_rec.str)) { setverdict(pass); }
  else { setverdict(fail, "Expected: ", t_rec.str, ", got: ", str1); }
  if (str2 == valueof(t_unis[6].cs)) { setverdict(pass); }
  else { setverdict(fail, "Expected: ", t_unis[6].cs, ", got: ", str2); }
  if (os == valueof(t_arr[1])) { setverdict(pass); }
  else { setverdict(fail, "Expected: ", t_roi[1], ", got: ", os); }
}

testcase tc_valueof_subref_equality() runs on CT
{
  if (valueof(t_rec).str == valueof(t_rec.str)) { setverdict(pass); }
  else { setverdict(fail, "Expected: ", t_rec.str, ", got: ", valueof(t_rec).str); }
  if (valueof(t_roi)[2] == valueof(t_roi[2])) { setverdict(pass); }
  else { setverdict(fail, "Expected: ", t_roi[2], ", got: ", valueof(t_roi)[2]); }
  if (valueof(t_unis[3]).bs == valueof(t_unis[3].bs)) { setverdict(pass); }
  else { setverdict(fail, "Expected: ", t_unis[3].bs, ", got: ", valueof(t_unis[3]).bs); }
  if (valueof(t_arr)[3] == valueof(t_arr[3])) { setverdict(pass); }
  else { setverdict(fail, "Expected: ", t_arr[3], ", got: ", valueof(t_arr)[3]); }
  if (valueof(t_rec).num != 100) { setverdict(pass); }
  else { setverdict(fail, "Expected anything other than 100"); }
  if (valueof(t_roi)[1] != 16) { setverdict(pass); }
  else { setverdict(fail, "Expected anything other than 16"); }
  if (valueof(t_unis[8]).vt != pass) { setverdict(pass); }
  else { setverdict(fail, "Expected anything other than pass"); }
  if (valueof(t_arr)[0] != 'DE'O) { setverdict(pass); }
  else { setverdict(fail, "Expected anything other than 'DE'O"); }
}

testcase tc_valueof_subref_bound_and_present() runs on CT
{
  if (isbound(valueof(t_rec).str)) { setverdict(pass); }
  else { setverdict(fail, "Expected bound record field"); }
  if (isbound(valueof(t_roi)[2])) { setverdict(pass); }
  else { setverdict(fail, "Expected bound record of element"); }
  if (isbound(valueof(t_unis[2]).b)) { setverdict(pass); }
  else { setverdict(fail, "Expected bound union alternative"); }
  if (isbound(valueof(t_arr)[2])) { setverdict(pass); }
  else { setverdict(fail, "Expected bound array element"); }
  if (ispresent(valueof(t_unis[9]).size)) { setverdict(pass); }
  else { setverdict(fail, "Expected present union alternative"); }
}

testcase tc_valueof_subref_math_expr() runs on CT
{
  var integer int_expr := -valueof(t_rec).num + valueof(t_roi)[3] * valueof(t_unis[0]).i;
  var integer int_expr_e := -valueof(t_rec.num) + valueof(t_roi[3]) * valueof(t_unis[0].i);
  var float float_expr := 4.0 / valueof(t_unis[1]).f;
  var float float_expr_e := 4.0 / valueof(t_unis[1].f);
  if (int_expr == int_expr_e) { setverdict(pass); }
  else { setverdict(fail, "Expected: ", int_expr_e, ", got: ", int_expr); }
  if (float_expr == float_expr_e) { setverdict(pass); }
  else { setverdict(fail, "Expected: ", float_expr_e, ", got: ", float_expr); }
}

testcase tc_valueof_subref_bool_expr() runs on CT
{
  var boolean bool_expr := (not valueof(t_unis[2]).b) or (valueof(t_rec).num > 0 and
    valueof(t_roi)[2] < 10 xor valueof(t_unis[9]).size >= Medium);
  var boolean bool_expr_e := (not valueof(t_unis[2].b)) or (valueof(t_rec.num) > 0 and
    valueof(t_roi[2]) < 10 xor valueof(t_unis[9].size) >= Medium);
  if (bool_expr == bool_expr_e) { setverdict(pass); }
  else { setverdict(fail, "Expected: ", bool_expr_e, ", got: ", bool_expr); }
}

testcase tc_valueof_subref_binary_expr() runs on CT
{
  var bitstring bs_expr := valueof(t_unis[3]).bs >> valueof(t_roi)[1];
  var bitstring bs_expr_e := valueof(t_unis[3].bs) >> valueof(t_roi[1]);
  var hexstring hs_expr := valueof(t_unis[4]).hs <@ valueof(t_rec).num;
  var hexstring hs_expr_e := valueof(t_unis[4].hs) <@ valueof(t_rec.num);
  var octetstring os_expr := valueof(t_unis[5]).os and4b (not4b valueof(t_arr)[2]);
  var octetstring os_expr_e := valueof(t_unis[5].os) and4b (not4b valueof(t_arr[2]));
  if (bs_expr == bs_expr_e) { setverdict(pass); }
  else { setverdict(fail, "Expected: ", bs_expr_e, ", got: ", bs_expr); }
  if (hs_expr == hs_expr_e) { setverdict(pass); }
  else { setverdict(fail, "Expected: ", hs_expr_e, ", got: ", hs_expr); }
  if (os_expr == os_expr_e) { setverdict(pass); }
  else { setverdict(fail, "Expected: ", os_expr_e, ", got: ", os_expr); }
}

testcase tc_valueof_subref_str_concat() runs on CT
{
  var bitstring bs_expr := valueof(t_unis[3]).bs & valueof(t_unis[3]).bs;
  var bitstring bs_expr_e := valueof(t_unis[3].bs) & valueof(t_unis[3].bs);
  var hexstring hs_expr := 'FF'H & valueof(t_unis[4]).hs & 'FF'H;
  var hexstring hs_expr_e := 'FF'H & valueof(t_unis[4].hs) & 'FF'H;
  var octetstring os_expr := valueof(t_unis[5]).os & valueof(t_arr)[3];
  var octetstring os_expr_e := valueof(t_unis[5].os) & valueof(t_arr[3]);
  var charstring cs_expr := valueof(t_unis[6]).cs & " " & valueof(t_rec).str;
  var charstring cs_expr_e := valueof(t_unis[6].cs) & " " & valueof(t_rec.str);
  var universal charstring ucs_expr := "x" & valueof(t_unis[7]).ucs & "x";
  var universal charstring ucs_expr_e := "x" & valueof(t_unis[7].ucs) & "x";
  if (bs_expr == bs_expr_e) { setverdict(pass); }
  else { setverdict(fail, "Expected: ", bs_expr_e, ", got: ", bs_expr); }
  if (hs_expr == hs_expr_e) { setverdict(pass); }
  else { setverdict(fail, "Expected: ", hs_expr_e, ", got: ", hs_expr); }
  if (os_expr == os_expr_e) { setverdict(pass); }
  else { setverdict(fail, "Expected: ", os_expr_e, ", got: ", os_expr); }
  if (cs_expr == cs_expr_e) { setverdict(pass); }
  else { setverdict(fail, "Expected: ", cs_expr_e, ", got: ", cs_expr); }
  if (ucs_expr == ucs_expr_e) { setverdict(pass); }
  else { setverdict(fail, "Expected: ", ucs_expr_e, ", got: ", ucs_expr); }
}

testcase tc_valueof_subref_str_length() runs on CT
{
  if (lengthof(valueof(t_unis[3]).bs) == lengthof(t_unis[3].bs)) { setverdict(pass); }
  else { setverdict(fail, "Expected: ", lengthof(t_unis[3].bs), ", got: ", lengthof(valueof(t_unis[3]).bs)); }
  if (lengthof(valueof(t_unis[4]).hs) == lengthof(t_unis[4].hs)) { setverdict(pass); }
  else { setverdict(fail, "Expected: ", lengthof(t_unis[4].hs), ", got: ", lengthof(valueof(t_unis[4]).hs)); }
  if (lengthof(valueof(t_unis[5]).os) == lengthof(t_unis[5].os)) { setverdict(pass); }
  else { setverdict(fail, "Expected: ", lengthof(t_unis[5].os), ", got: ", lengthof(valueof(t_unis[5]).os)); }
  if (lengthof(valueof(t_arr)[1]) == lengthof(t_arr[1])) { setverdict(pass); }
  else { setverdict(fail, "Expected: ", lengthof(t_arr[1]), ", got: ", lengthof(valueof(t_arr)[1])); }
  if (lengthof(valueof(t_unis[6]).cs) == lengthof(t_unis[6].cs)) { setverdict(pass); }
  else { setverdict(fail, "Expected: ", lengthof(t_unis[6].cs), ", got: ", lengthof(valueof(t_unis[6]).cs)); }
  if (lengthof(valueof(t_rec).str) == lengthof(t_rec.str)) { setverdict(pass); }
  else { setverdict(fail, "Expected: ", lengthof(t_rec.str), ", got: ", lengthof(valueof(t_rec).str)); }
  if (lengthof(valueof(t_unis[7]).ucs) == lengthof(t_unis[7].ucs)) { setverdict(pass); }
  else { setverdict(fail, "Expected: ", lengthof(t_unis[7].ucs), ", got: ", lengthof(valueof(t_unis[7]).ucs)); }
}

testcase tc_valueof_subref_str_index() runs on CT
{
  var bitstring v_bs := valueof(t_unis[3].bs);
  var hexstring v_hs := valueof(t_unis[4].hs);
  var octetstring v_os := valueof(t_unis[5].os);
  var octetstring v_os2 := valueof(t_arr[2]);
  var charstring v_cs := valueof(t_unis[6].cs);
  var charstring v_cs2 := valueof(t_rec.str);
  var universal charstring v_ucs := valueof(t_unis[7].ucs);
  if (valueof(t_unis[3]).bs[2] == v_bs[2]) { setverdict(pass); }
  else { setverdict(fail, "Expected: ", v_bs[2], ", got: ", valueof(t_unis[3]).bs[2]); }
  if (valueof(t_unis[4]).hs[2] == v_hs[2]) { setverdict(pass); }
  else { setverdict(fail, "Expected: ", v_hs[2], ", got: ", valueof(t_unis[4]).hs[2]); }
  if (valueof(t_unis[5]).os[1] == v_os[1]) { setverdict(pass); }
  else { setverdict(fail, "Expected: ", v_os[1], ", got: ", valueof(t_unis[5]).os[1]); }
  if (valueof(t_arr)[2][1] == v_os2[1]) { setverdict(pass); }
  else { setverdict(fail, "Expected: ", v_os2[1], ", got: ", valueof(t_arr)[2][1]); }
  if (valueof(t_unis[6]).cs[2] == v_cs[2]) { setverdict(pass); }
  else { setverdict(fail, "Expected: ", v_cs[2], ", got: ", valueof(t_unis[6]).cs[2]); }
  if (valueof(t_rec).str[0] == v_cs2[0]) { setverdict(pass); }
  else { setverdict(fail, "Expected: ", v_cs2[0], ", got: ", valueof(t_rec).str[0]); }
  if (valueof(t_unis[7]).ucs[2] == v_ucs[2]) { setverdict(pass); }
  else { setverdict(fail, "Expected: ", v_ucs[2], ", got: ", valueof(t_unis[7]).ucs[2]); }
}

testcase tc_valueof_subref_log() runs on CT
{
  var charstring sep := " | ";
  var charstring log_str := log2str(valueof(t_rec).str, sep, valueof(t_roi)[3], sep, valueof(t_unis[9]).size,
    sep, valueof(t_arr)[0]);
  var charstring log_str_e := log2str(t_rec.str, sep, t_roi[3], sep, t_unis[9].size, sep, t_arr[0]);
  if (log_str == log_str_e) { setverdict(pass); }
  else { setverdict(fail, "Expected: ", log_str_e, ", got: ", log_str); }
  log(valueof(t_rec).str,valueof(t_roi)[3], valueof(t_unis[9]).size, valueof(t_arr)[0]);
}

testcase tc_valueof_subref_structure() runs on CT
{
  var Rec rec1 := { num := valueof(t_rec).num, str := valueof(t_rec).str }; // == valueof(t_rec)
  var Rec rec2 := { valueof(t_roi)[1], valueof(t_unis[6]).cs };
  var Rec rec2_e := { valueof(t_roi[1]), valueof(t_unis[6].cs) };
  var RoI roi := { valueof(t_unis[0]).i, 91, valueof(t_roi)[3], 0 };
  var RoI roi_e := { valueof(t_unis[0].i), 91, valueof(t_roi[3]), 0 };
  var Uni uni := { vt := valueof(t_unis[8]).vt }; // == valueof(t_unis[8])
  var Arr arr := { [0] := valueof(t_arr)[0], [1] := valueof(t_arr)[1],
    [2] := valueof(t_arr)[2], [3] := valueof(t_arr)[3] }; // == valueof(t_arr)
  if (rec1 == valueof(t_rec)) { setverdict(pass); }
  else { setverdict(fail, "Expected: ", t_rec, ", got: ", rec1); }
  if (rec2 == rec2_e) { setverdict(pass); }
  else { setverdict(fail, "Expected: ", rec2_e, ", got: ", rec2); }
  if (roi == roi_e) { setverdict(pass); }
  else { setverdict(fail, "Expected: ", roi_e, ", got: ", roi); }
  if (uni == valueof(t_unis[8])) { setverdict(pass); }
  else { setverdict(fail, "Expected: ", t_unis[8], ", got: ", uni); }
  if (arr == valueof(t_arr)) { setverdict(pass); }
  else { setverdict(fail, "Expected: ", t_arr, ", got: ", arr); }
}

testcase tc_valueof_subref_convert() runs on CT
{
  var integer int_res := hex2int(valueof(t_unis[4]).hs) + oct2int(valueof(t_arr)[3]);
  var integer int_res_e := hex2int(valueof(t_unis[4].hs)) + oct2int(valueof(t_arr[3]));
  var Arr arr_res := { int2oct(valueof(t_roi)[3], 2), str2oct(valueof(t_rec).str),
    char2oct(valueof(t_unis[6]).cs), unichar2oct(valueof(t_unis[7]).ucs, "UTF-8") };
  var Arr arr_res_e := { int2oct(valueof(t_roi[3]), 2), str2oct(valueof(t_rec.str)),
    char2oct(valueof(t_unis[6].cs)), unichar2oct(valueof(t_unis[7].ucs), "UTF-8") };
  if (int_res == int_res_e) { setverdict(pass); }
  else { setverdict(fail, "Expected: ", int_res_e, ", got: ", int_res); }
  if (arr_res == arr_res_e) { setverdict(pass); }
  else { setverdict(fail, "Expected: ", arr_res_e, ", got: ", arr_res); }
}

testcase tc_valueof_subref_parameter() runs on CT
{
  f_test(valueof(t_rec).str, valueof(t_roi)[0], valueof(t_unis[2]).b, valueof(t_arr)[1]);
  var Arr ent_arr := { ef_enc_int(valueof(t_rec).num), ef_enc_int(valueof(t_roi)[2]),
    ef_enc_oct(valueof(t_unis[5]).os), ef_enc_oct(valueof(t_arr)[3]) };
  var Arr ent_arr_e := { ef_enc_int(valueof(t_rec.num)), ef_enc_int(valueof(t_roi[2])),
    ef_enc_oct(valueof(t_unis[5].os)), ef_enc_oct(valueof(t_arr[3])) };
  if (ent_arr == ent_arr_e) { setverdict(pass); }
  else { setverdict(fail, "Expected: ", ent_arr_e, ", got: ", ent_arr); }
}

testcase tc_valueof_subref_send() runs on CT
{
  connect(mtc:pt, mtc:pt);
  pt.send(valueof(t_rec).num);
  pt.send(valueof(t_roi)[1]);
  pt.send(valueof(t_unis[0]).i);
  pt.send(valueof(t_arr)[2]);
  var default def := activate(as_ct());
  var integer bad_int;
  var octetstring bad_os;
  t.start(1.0);
  alt {
    [] pt.receive(t_rec.num) { setverdict(pass); }
    [] pt.receive(integer:?) -> value bad_int 
      { setverdict(fail, "Expected: ", t_rec.num, ", got: ", bad_int); }
  }
  alt {
    [] pt.receive(t_roi[1]) { setverdict(pass); }
    [] pt.receive(integer:?) -> value bad_int 
      { setverdict(fail, "Expected: ", t_roi[1], ", got: ", bad_int); }
  }
  alt {
    [] pt.receive(t_unis[0].i) { setverdict(pass); }
    [] pt.receive(integer:?) -> value bad_int 
      { setverdict(fail, "Expected: ", t_unis[0].i, ", got: ", bad_int); }
  }
  alt {
    [] pt.receive(t_arr[2]) { setverdict(pass); }
    [] pt.receive(octetstring:?) -> value bad_os 
      { setverdict(fail, "Expected: ", t_arr[2], ", got: ", bad_os); }
  }
  deactivate(def);
}

testcase tc_valueof_subref_complex() runs on CT
{
  var template Complex x := { rec := t_rec, roi := t_roi, unis := t_unis };
  var RoI roi_res := { valueof(x).rec.num, 3 * valueof(x).roi[2],
    float2int(valueof(x).unis[1].f) - lengthof(valueof(x).roi) };
  var RoI roi_res_e := { valueof(x.rec.num), 3 * valueof(x.roi[2]), 
    float2int(valueof(x.unis[1].f)) - lengthof(x.roi) };
  if (roi_res == roi_res_e) { setverdict(pass); }
  else { setverdict(fail, "Expected: ", roi_res_e, ", got: ", roi_res); }
  if (valueof(x).unis[9].size == valueof(x.unis[9].size)) { setverdict(pass); }
  else { setverdict(fail, "Expected: ", x.unis[9].size, ", got: ", valueof(x).unis[9].size); }
  if (isbound(valueof(x).rec)) { setverdict(pass); }
  else { setverdict(fail, "Expected bound record field"); }
}

testcase tc_valueof_subref_ttcn2string() runs on CT
{
  var charstring str1 := ttcn2string(valueof(t_rec).str);
  var charstring str1_e := ttcn2string(t_rec.str);
  var charstring str2 := ttcn2string(valueof(t_roi)[1]);
  var charstring str2_e := ttcn2string(t_roi[1]);
  var charstring str3 := ttcn2string(valueof(t_unis[7]).ucs);
  var charstring str3_e := ttcn2string(t_unis[7].ucs);
  var charstring str4 := ttcn2string(valueof(t_arr)[2]);
  var charstring str4_e := ttcn2string(t_arr[2]);
  if (str1 == str1_e) { setverdict(pass); }
  else { setverdict(fail, "Expected: ", str1_e, ", got: ", str1); }
  if (str2 == str2_e) { setverdict(pass); }
  else { setverdict(fail, "Expected: ", str2_e, ", got: ", str2); }
  if (str3 == str3_e) { setverdict(pass); }
  else { setverdict(fail, "Expected: ", str3_e, ", got: ", str3); }
  if (str4 == str4_e) { setverdict(pass); }
  else { setverdict(fail, "Expected: ", str4_e, ", got: ", str4); }
}

/* * * * Control part * * * */
control {
  execute(tc_valueof_subref_var_assign());
  execute(tc_valueof_subref_equality());
  execute(tc_valueof_subref_bound_and_present());
  execute(tc_valueof_subref_math_expr());
  execute(tc_valueof_subref_bool_expr());
  execute(tc_valueof_subref_binary_expr());
  execute(tc_valueof_subref_str_concat());
  execute(tc_valueof_subref_str_length());
  execute(tc_valueof_subref_str_index());
  execute(tc_valueof_subref_log());
  execute(tc_valueof_subref_structure());
  execute(tc_valueof_subref_convert());
  execute(tc_valueof_subref_parameter());
  execute(tc_valueof_subref_send());
  execute(tc_valueof_subref_complex());
  execute(tc_valueof_subref_ttcn2string());
}

}
