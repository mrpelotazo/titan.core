/******************************************************************************
 * Copyright (c) ETSI 2017.
 *
 * This file is subject to copyrights owned by ETSI. Non-exclusive permission
 * is hereby granted, free of charge, to copy, reproduce and amend this file
 * under the following conditions: It is provided "as is", without warranty of any
 * kind, expressed or implied.
 * 
 * ETSI shall never be liable for any claim, damages, or other liability arising
 * from its use or inability of use.This permission does not apply to any documentation
 * associated with this file for which ETSI keeps all rights reserved. The present
 * copyright notice shall be included in all copies of whole or part of this
 * file and shall not imply any sub-license right.
 *
 * Modified by: Adrien Kirjak
 *
 ** @version  0.0.1
 ** @purpose  1:9.1, Ensure that a port owned by a component cannot be connected with two other ports
 ** @verdict  pass reject
 ** @configuration  port:broadcast
 ***************************************************/

/*NOTE: see Figure 7(c): Two components (A and B with two ports).
 * ERROR: Port A connects to port B1 and port B2, this is not allowed
 * */

module NegSem_0901_Communication_ports_001{ 
  
    type component GeneralComp{
        port IntegerInputPortType messagePortA,messagePortB;
    };
    
    type port IntegerInputPortType message {
	  inout integer
	} with {extension "internal"}
		
	testcase TC_NegSem_0901_Communication_ports_001() runs on GeneralComp system GeneralComp {

	// generate test components
		var GeneralComp MycompA;
		var GeneralComp MycompB;	
		MycompA := GeneralComp.create;
		MycompB := GeneralComp.create;

	// make the connections between ports	
		connect(MycompA:messagePortA,MycompB:messagePortA);
		connect(MycompA:messagePortA,MycompB:messagePortB);	//Error: not allowed, MycompA messagePortA is already connected to MycompB messagePortA
	}
	control{
		execute(TC_NegSem_0901_Communication_ports_001());
	}
}

