/******************************************************************************
 * Copyright (c) ETSI 2017.
 *
 * This file is subject to copyrights owned by ETSI. Non-exclusive permission
 * is hereby granted, free of charge, to copy, reproduce and amend this file
 * under the following conditions: It is provided "as is", without warranty of any
 * kind, expressed or implied.
 * 
 * ETSI shall never be liable for any claim, damages, or other liability arising
 * from its use or inability of use.This permission does not apply to any documentation
 * associated with this file for which ETSI keeps all rights reserved. The present
 * copyright notice shall be included in all copies of whole or part of this
 * file and shall not imply any sub-license right.
 *
 * Modified by: Adrien Kirjak
 *
 ** @version  0.0.1
 ** @purpose  1:19.3.2, verify that header part of select-union statements cannot contain anything else than union instances
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// In the header part of the select union statement a template instance of union 
// type shall be given.

module NegSem_190302_select_union_statement_001 { 

    type component GeneralComp {
	}	
    
    type record R {
        integer intOption optional,
        charstring strOption optional,
        boolean boolOption optional
    }

    testcase TC_NegSem_190302_select_union_statement_001() runs on GeneralComp {
        var R v_rec := { intOption := omit, strOption := "abc", boolOption := omit }

        select union (v_rec) {
            case (intOption) {
                setverdict(pass);
            } case (strOption) {
                setverdict(pass);
            } case (boolOption) {
                setverdict(pass);
            }
        }
	}

	control {
		execute(TC_NegSem_190302_select_union_statement_001());
	}
}
