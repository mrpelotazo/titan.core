/******************************************************************************
 * Copyright (c) ETSI 2017.
 *
 * This file is subject to copyrights owned by ETSI. Non-exclusive permission
 * is hereby granted, free of charge, to copy, reproduce and amend this file
 * under the following conditions: It is provided "as is", without warranty of any
 * kind, expressed or implied.
 * 
 * ETSI shall never be liable for any claim, damages, or other liability arising
 * from its use or inability of use.This permission does not apply to any documentation
 * associated with this file for which ETSI keeps all rights reserved. The present
 * copyright notice shall be included in all copies of whole or part of this
 * file and shall not imply any sub-license right.
 *
 * Modified by: Adrien Kirjak
 *
 ** @version  0.0.1
 ** @purpose  1:19.3.2, verify that it is possible to use a select union statement with several branches
 ** @verdict  pass accept, ttcn3verdict:pass
 ***************************************************/

// The following requirement is tested:
// The statement contains a header part and zero or more branches. 

module Sem_190302_select_union_statement_001 { 

    type component GeneralComp {
	}	
    
    type union U {
        integer intOption,
        charstring strOption,
        boolean boolOption
    }

    testcase TC_Sem_190302_select_union_statement_001() runs on GeneralComp {
        var U v_un := { strOption := "abc" }
        select union (v_un) {
            case (intOption) {
                setverdict(fail);
            } case (strOption) {
                setverdict(pass);
            } case (boolOption) {
                setverdict(fail);
            }
        }
	}

	control {
		execute(TC_Sem_190302_select_union_statement_001());
	}
}
