/******************************************************************************
 * Copyright (c) ETSI 2017.
 *
 * This file is subject to copyrights owned by ETSI. Non-exclusive permission
 * is hereby granted, free of charge, to copy, reproduce and amend this file
 * under the following conditions: It is provided "as is", without warranty of any
 * kind, expressed or implied.
 * 
 * ETSI shall never be liable for any claim, damages, or other liability arising
 * from its use or inability of use.This permission does not apply to any documentation
 * associated with this file for which ETSI keeps all rights reserved. The present
 * copyright notice shall be included in all copies of whole or part of this
 * file and shall not imply any sub-license right.
 *
 * Modified by: Adrien Kirjak
 *
 ** @version  0.0.1
 ** @purpose  1:21.3.3, restarting explicitly killed alive component
 ** @verdict  pass reject
 *****************************************************************/

// The following requirements are tested:
// The kill operation applied on a test component stops the execution of the currently
// running behaviour - if any - of that component and frees all resources associated 
// to it (including all port connections of the killed component) and removes the 
// component from the test system.

module NegSem_210304_kill_test_component_002 {

    type port P message {
        inout integer;
    } with {extension "internal"}
    
    type component GeneralComp {
        port P p;
    }
    
	function f() runs on GeneralComp {
        p.receive(integer:?);
	}
	
    testcase TC_NegSem_210304_kill_test_component_002() runs on GeneralComp system GeneralComp {
        var GeneralComp ptc := GeneralComp.create alive;
		ptc.start(f());
        ptc.kill;
        ptc.start(f());
		setverdict(pass);
    }

    control {
        execute(TC_NegSem_210304_kill_test_component_002());
    }
}
