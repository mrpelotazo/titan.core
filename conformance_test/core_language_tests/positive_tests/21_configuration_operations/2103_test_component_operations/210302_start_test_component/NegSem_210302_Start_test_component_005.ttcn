/******************************************************************************
 * Copyright (c) ETSI 2017.
 *
 * This file is subject to copyrights owned by ETSI. Non-exclusive permission
 * is hereby granted, free of charge, to copy, reproduce and amend this file
 * under the following conditions: It is provided "as is", without warranty of any
 * kind, expressed or implied.
 * 
 * ETSI shall never be liable for any claim, damages, or other liability arising
 * from its use or inability of use.This permission does not apply to any documentation
 * associated with this file for which ETSI keeps all rights reserved. The present
 * copyright notice shall be included in all copies of whole or part of this
 * file and shall not imply any sub-license right.
 *
 * Modified by: Adrien Kirjak
 *
 ** @version  0.0.1
 ** @purpose  1:21.3.2, starting behaviour on already running non-alive component
 ** @verdict  pass reject
 ***************************************************/

// The following requirements are tested:
// Starting a second behaviour function on a non-alive PTC or starting a function 
// on a PTC that is still running results in a test case error.

module NegSem_210302_Start_test_component_005 { 

	type component GeneralComp {
	}
    
    function f_ptcBehaviour() runs on GeneralComp {
        timer t_tmr := 10.0;
        t_tmr.start;
        t_tmr.timeout;
    }
    
	testcase TC_NegSem_210302_Start_test_component_005() runs on GeneralComp system GeneralComp {
        var GeneralComp v_ptc := GeneralComp.create("PTC");
        v_ptc.start(f_ptcBehaviour());
        v_ptc.start(f_ptcBehaviour());
		setverdict(pass);
	}
	
	control{
	    execute(TC_NegSem_210302_Start_test_component_005());
	}
}
