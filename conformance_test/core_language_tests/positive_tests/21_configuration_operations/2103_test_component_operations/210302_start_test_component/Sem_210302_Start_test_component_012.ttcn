/******************************************************************************
 * Copyright (c) ETSI 2017.
 *
 * This file is subject to copyrights owned by ETSI. Non-exclusive permission
 * is hereby granted, free of charge, to copy, reproduce and amend this file
 * under the following conditions: It is provided "as is", without warranty of any
 * kind, expressed or implied.
 * 
 * ETSI shall never be liable for any claim, damages, or other liability arising
 * from its use or inability of use.This permission does not apply to any documentation
 * associated with this file for which ETSI keeps all rights reserved. The present
 * copyright notice shall be included in all copies of whole or part of this
 * file and shall not imply any sub-license right.
 *
 * Modified by: Adrien Kirjak
 *
 ** @version  0.0.1
 ** @purpose  1:21.3.2, Ensure that start operation works with parametered altsteps
 ** @verdict  pass accept, ttcn3verdict:pass
 *****************************************************************/
// The following requirement is tested: The start operation shall bind the required behaviour to the test component.
// This behaviour is defined by reference to an already defined function or altstep.

module Sem_210302_Start_test_component_012 {

    type port myPortType message {
        inout integer;
    }

    type component GeneralComp {
    	port myPortType myPort;
    }
    
    altstep a_myBehaviour(in integer p_int) runs on GeneralComp { 

        [] any port.receive {
            setverdict(pass);
        }
	}
    
	
    testcase TC_Sem_210302_Start_test_component_012() runs on GeneralComp system GeneralComp {
        var GeneralComp v_ptc := GeneralComp.create alive;

        connect(mtc:myPort, v_ptc:myPort);
        myPort.send(1);

		v_ptc.start(a_myBehaviour(1));
		v_ptc.done; 
	
        setverdict(pass);
    }

    control {
        execute(TC_Sem_210302_Start_test_component_012());
    }
}
