/******************************************************************************
 * Copyright (c) ETSI 2017.
 *
 * This file is subject to copyrights owned by ETSI. Non-exclusive permission
 * is hereby granted, free of charge, to copy, reproduce and amend this file
 * under the following conditions: It is provided "as is", without warranty of any
 * kind, expressed or implied.
 * 
 * ETSI shall never be liable for any claim, damages, or other liability arising
 * from its use or inability of use.This permission does not apply to any documentation
 * associated with this file for which ETSI keeps all rights reserved. The present
 * copyright notice shall be included in all copies of whole or part of this
 * file and shall not imply any sub-license right.
 *
 * Modified by: Adrien Kirjak
 *
 ** @version  0.0.1
 ** @purpose  1:21.3.3, stopping all PTCs
 ** @verdict  pass accept, ttcn3verdict:pass
 *****************************************************************/

// The following requirements are tested:
// The all keyword can be used by the MTC only in order to stop all running PTCs but 
// the MTC itself.

module Sem_210303_Stop_test_component_011 {

    type port P message {
        inout integer;
    } with {extension "internal"}
    
    type component GeneralComp {
        port P p;
    }
    
	function f() runs on GeneralComp {
        p.receive(integer:?); // infinite blocking
	}
	
    testcase TC_Sem_210303_Stop_test_component_011() runs on GeneralComp system GeneralComp {
        var GeneralComp ptc1 := GeneralComp.create, ptc2 := GeneralComp.create;
		ptc1.start(f()); 
        ptc2.start(f()); 
        all component.stop;
		interleave {
            [] ptc1.done {}
            [] ptc2.done {}
        }
        setverdict(pass);
    }

    control {
        execute(TC_Sem_210303_Stop_test_component_011());
    }
}
