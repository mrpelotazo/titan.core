/******************************************************************************
 * Copyright (c) ETSI 2017.
 *
 * This file is subject to copyrights owned by ETSI. Non-exclusive permission
 * is hereby granted, free of charge, to copy, reproduce and amend this file
 * under the following conditions: It is provided "as is", without warranty of any
 * kind, expressed or implied.
 * 
 * ETSI shall never be liable for any claim, damages, or other liability arising
 * from its use or inability of use.This permission does not apply to any documentation
 * associated with this file for which ETSI keeps all rights reserved. The present
 * copyright notice shall be included in all copies of whole or part of this
 * file and shall not imply any sub-license right.
 *
 * Modified by: Adrien Kirjak
 *
 ** @version  0.0.1
 ** @purpose  1:21.3.3, port reuse in alive component after explicit stop
 ** @verdict  pass accept, ttcn3verdict:pass
 ***************************************************/

// The following requirements are tested:
// Stopping an alive-type component means that all variables, timers and ports 
// declared in the component type definition of the alive-type component keep their
// value, contents or state. 

module Sem_210303_Stop_test_component_008 { 

    type port P message {
        inout integer;
    } with {extension "internal"}
    
	type component GeneralComp {
        port P p1, p2;
	}
    
    function f_ptcBehaviour() runs on GeneralComp {
        connect(self:p1, self:p1); // loopback
        connect(mtc:p2, self:p2); // mtc
        p1.send(1);
        p2.send(2);
        p2.receive(integer:?);
        setverdict(fail);
    }

    function f_ptcSecondBehaviour() runs on GeneralComp {
        p1.receive(integer:?);
        setverdict(pass);
    }

    
	testcase TC_Sem_210303_Stop_test_component_008() runs on GeneralComp system GeneralComp {
        var GeneralComp v_ptc := GeneralComp.create("PTC") alive;        
        v_ptc.start(f_ptcBehaviour());        
        p2.receive(integer:?);
        v_ptc.stop;
        v_ptc.start(f_ptcSecondBehaviour());
        v_ptc.done;
	}
	
	control{
	    execute(TC_Sem_210303_Stop_test_component_008());
	}
}
