/******************************************************************************
 * Copyright (c) ETSI 2017.
 *
 * This file is subject to copyrights owned by ETSI. Non-exclusive permission
 * is hereby granted, free of charge, to copy, reproduce and amend this file
 * under the following conditions: It is provided "as is", without warranty of any
 * kind, expressed or implied.
 * 
 * ETSI shall never be liable for any claim, damages, or other liability arising
 * from its use or inability of use.This permission does not apply to any documentation
 * associated with this file for which ETSI keeps all rights reserved. The present
 * copyright notice shall be included in all copies of whole or part of this
 * file and shall not imply any sub-license right.
 *
 * Modified by: Adrien Kirjak
 *
 ** @version  0.0.1
 ** @purpose  1:7.1.1, Ensure that arithmetic operators can handle special float values
 ** @verdict  pass accept, ttcn3verdict:pass
 *****************************************************************/

module Sem_070101_ArithmeticOperators_030 {

type component GeneralComp {	    	    
}

testcase TC_Sem_070101_ArithmeticOperators_030() runs on GeneralComp {
	var float v_i := infinity;
	var float v_k :=2.0E0;
	
	var float v_result := v_i / v_k;	// "/" arithmetic operator with infinity
	
	if (v_result == infinity) { setverdict(pass,"match") }
	else { setverdict(fail,v_result) }
    

}	
control{
    execute(TC_Sem_070101_ArithmeticOperators_030());
}

}
