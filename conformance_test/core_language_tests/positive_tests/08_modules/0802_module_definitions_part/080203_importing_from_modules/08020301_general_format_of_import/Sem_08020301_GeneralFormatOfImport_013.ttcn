/******************************************************************************
 * Copyright (c) ETSI 2017.
 *
 * This file is subject to copyrights owned by ETSI. Non-exclusive permission
 * is hereby granted, free of charge, to copy, reproduce and amend this file
 * under the following conditions: It is provided "as is", without warranty of any
 * kind, expressed or implied.
 * 
 * ETSI shall never be liable for any claim, damages, or other liability arising
 * from its use or inability of use.This permission does not apply to any documentation
 * associated with this file for which ETSI keeps all rights reserved. The present
 * copyright notice shall be included in all copies of whole or part of this
 * file and shall not imply any sub-license right.
 *
 * Modified by: Adrien Kirjak
 *
 ** @version  0.0.1
 ** @purpose  1:8.2.3.1, Verify that altstep is imported together with parameter names
 ** @verdict  pass accept, ttcn3verdict:pass
 *****************************************************************/

// The following requirements are tested:
// Restriction c:
// A definition is imported together with its name and all local definitions.
// Restriction d:
// A definition is imported together with all information of referenced definitions that 
// are necessary for the usage of the imported definition, independent of the visibility 
// of the referenced definitions.
// Table 8:
// Altstep

module Sem_08020301_GeneralFormatOfImport_013 {

	import from Sem_08020301_GeneralFormatOfImport_013_import { altstep a_test };

	type component GeneralComp {}

	testcase TC_Sem_08020301_GeneralFormatOfImport_013() runs on GeneralComp {			
		// testing if parameter names are imported
		// type compatibility is checked during parameter passing: for this check, the type information for 
		// the altstep parameters should be available at this point to compile the script correctly
		a_test(p_param1 := 1, p_param2 := 2); 
	}
	
	control{
		execute(TC_Sem_08020301_GeneralFormatOfImport_013());
	}
}

