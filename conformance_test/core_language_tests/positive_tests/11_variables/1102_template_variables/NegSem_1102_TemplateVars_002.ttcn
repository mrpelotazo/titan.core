/******************************************************************************
 * Copyright (c) ETSI 2017.
 *
 * This file is subject to copyrights owned by ETSI. Non-exclusive permission
 * is hereby granted, free of charge, to copy, reproduce and amend this file
 * under the following conditions: It is provided "as is", without warranty of any
 * kind, expressed or implied.
 * 
 * ETSI shall never be liable for any claim, damages, or other liability arising
 * from its use or inability of use.This permission does not apply to any documentation
 * associated with this file for which ETSI keeps all rights reserved. The present
 * copyright notice shall be included in all copies of whole or part of this
 * file and shall not imply any sub-license right.
 *
 * Modified by: Adrien Kirjak
 *
 ** @version  0.0.1
 ** @purpose  1:11.2, Ensure that partially initialized templates are evaluated correctly.
 ** @verdict  pass reject
 *****************************************************************/

module NegSem_1102_TemplateVars_002 {

	type set IntegerSet {
		integer a1 optional,
		integer a2 optional,
		integer a3 optional
	};

	type port loopbackPort message {
		inout IntegerSet
	} with {extension "internal"}
	
	type component GeneralComp {	    	    
		port loopbackPort messagePort
	}	

	testcase TC_NegSem_1102_TemplateVars_002() runs on GeneralComp {
		var template IntegerSet mw_pattern := {a1:=1,a2:=*};
		var IntegerSet v_set := {a1:=1,a2:=2,a3:=3}

		connect(self:messagePort,self:messagePort);

	 	messagePort.send(v_set);

		alt {
		 	 [] messagePort.receive(mw_pattern) {	//attempted matching of partially initialized template
		    	setverdict(pass);
		 	}
		 	 [] messagePort.receive {
		    	setverdict(fail);
		 	}
		}

	}

	control{
		execute(TC_NegSem_1102_TemplateVars_002());
	}

}
