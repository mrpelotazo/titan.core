/******************************************************************************
 * Copyright (c) ETSI 2017.
 *
 * This file is subject to copyrights owned by ETSI. Non-exclusive permission
 * is hereby granted, free of charge, to copy, reproduce and amend this file
 * under the following conditions: It is provided "as is", without warranty of any
 * kind, expressed or implied.
 * 
 * ETSI shall never be liable for any claim, damages, or other liability arising
 * from its use or inability of use.This permission does not apply to any documentation
 * associated with this file for which ETSI keeps all rights reserved. The present
 * copyright notice shall be included in all copies of whole or part of this
 * file and shall not imply any sub-license right.
 *
 * Modified by: Adrien Kirjak
 *
 ** @version  0.0.1
 ** @purpose  1:22.2.2, value of wrong type in @decoded redirect assignment
 ** @verdict  pass reject
 *****************************************************************/

// The following requirements are tested:
// Any other value shall cause an error.

module NegSem_220202_ReceiveOperation_008 {

	type integer I with { variant "32 bit"};

	type record R {
        integer id,
        universal charstring payload
    }
    
	type port P message {
		inout R;
	} with {extension "internal"}
	
    type component GeneralComp {
		port P p;
	}
	
    testcase TC_NegSem_220202_ReceiveOperation_008() runs on GeneralComp {
        var I v_src := 1953719668;
		var I v_res;
        var universal charstring v_str := encvalue_unichar(v_src);

		connect(self:p, self:p);
        p.send(R:{ id := 1, payload := v_str });

        alt {
            [] p.receive(R:?) -> value (v_res := @decoded(v_src) payload) { 
                setverdict (pass);
            }
            [] p.receive { setverdict(pass); }
        }
    }

    control {
        execute(TC_NegSem_220202_ReceiveOperation_008(), 5.0);
    }
} with { encode "RAW"}
