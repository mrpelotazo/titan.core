/******************************************************************************
 * Copyright (c) ETSI 2017.
 *
 * This file is subject to copyrights owned by ETSI. Non-exclusive permission
 * is hereby granted, free of charge, to copy, reproduce and amend this file
 * under the following conditions: It is provided "as is", without warranty of any
 * kind, expressed or implied.
 * 
 * ETSI shall never be liable for any claim, damages, or other liability arising
 * from its use or inability of use.This permission does not apply to any documentation
 * associated with this file for which ETSI keeps all rights reserved. The present
 * copyright notice shall be included in all copies of whole or part of this
 * file and shall not imply any sub-license right.
 *
 * Modified by: Adrien Kirjak
 *
 ** @version  0.0.1
 ** @purpose  1:22.2.2, receive with a from clause (single item)
 ** @verdict  pass accept, ttcn3verdict:pass
 *****************************************************************/

// The following requirements are tested:
// In the case of one-to-many connections the receive operation may be restricted 
// to a certain communication partner. This restriction shall be denoted using the 
// from keyword.

module Sem_220202_ReceiveOperation_006 {
	
	type port P message {
		inout integer;
	} with {extension "internal"}
	
    type component GeneralComp 
	{
		port P p;
	}
	
	function f() runs on GeneralComp
	{
        p.send(1);
	}
    
    const integer c_ptcCount := 3;
	
    testcase TC_Sem_220202_ReceiveOperation_006() runs on GeneralComp system GeneralComp {
        var GeneralComp v_ptcs[c_ptcCount];
        var integer v_receiveCounter := 0;

        for (var integer i := 0; i < c_ptcCount; i := i + 1) {
            v_ptcs[i] := GeneralComp.create;
            connect(self:p, v_ptcs[i]:p);
            v_ptcs[i].start(f());
        }
        
        for (var integer i := 0; i < c_ptcCount; i := i + 1) {
            alt {
                [] p.receive(integer:?) from v_ptcs[0] { setverdict(pass); } // expected 1 from match
                [] p.receive(integer:?) { v_receiveCounter := v_receiveCounter + 1; } 
						// expected 2 other received messages
            }
        }
        if (v_receiveCounter != c_ptcCount - 1) { setverdict(fail); }
    }

    control {
        execute(TC_Sem_220202_ReceiveOperation_006(), 5.0);
    }
}
