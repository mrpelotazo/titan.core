/******************************************************************************
 * Copyright (c) ETSI 2017.
 *
 * This file is subject to copyrights owned by ETSI. Non-exclusive permission
 * is hereby granted, free of charge, to copy, reproduce and amend this file
 * under the following conditions: It is provided "as is", without warranty of any
 * kind, expressed or implied.
 * 
 * ETSI shall never be liable for any claim, damages, or other liability arising
 * from its use or inability of use.This permission does not apply to any documentation
 * associated with this file for which ETSI keeps all rights reserved. The present
 * copyright notice shall be included in all copies of whole or part of this
 * file and shall not imply any sub-license right.
 *
 * Modified by: Adrien Kirjak
 *
 ** @version  0.0.1
 ** @purpose  1:22.2.3, no type prefix in ambiguous inline template
 ** @verdict  pass reject
 *****************************************************************/

// The following requirements are tested:
// The matching criteria as defined in clause 22.2.2 apply also to the trigger operation.
// An optional type field in the matching criteria to the [trigger] operation shall 
// be used to avoid any ambiguity of the type of the value being received.

module NegSem_220203_TriggerOperation_002 {
	
    type record of integer RoI;
    type record R {
        integer field1,
        integer field2
    }
    
	type port P message {
		inout R, RoI;
	} with {extension "internal"}
	
    type component GeneralComp 
	{
		port P p;
	}
		
    testcase TC_NegSem_220203_TriggerOperation_002() runs on GeneralComp {

		connect(self:p, self:p);
        p.send(R:{1, 2});

        alt {
            [] p.trigger({?, 2}) { setverdict(pass); } // error (ambiguous type)
            [else] { setverdict(pass); }
        }
    }

    control {
        execute(TC_NegSem_220203_TriggerOperation_002(), 5.0);
    }
}
