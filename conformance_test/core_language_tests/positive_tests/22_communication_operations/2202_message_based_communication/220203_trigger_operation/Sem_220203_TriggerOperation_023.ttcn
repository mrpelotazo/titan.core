/******************************************************************************
 * Copyright (c) ETSI 2017.
 *
 * This file is subject to copyrights owned by ETSI. Non-exclusive permission
 * is hereby granted, free of charge, to copy, reproduce and amend this file
 * under the following conditions: It is provided "as is", without warranty of any
 * kind, expressed or implied.
 * 
 * ETSI shall never be liable for any claim, damages, or other liability arising
 * from its use or inability of use.This permission does not apply to any documentation
 * associated with this file for which ETSI keeps all rights reserved. The present
 * copyright notice shall be included in all copies of whole or part of this
 * file and shall not imply any sub-license right.
 *
 * Modified by: Adrien Kirjak
 *
 ** @version  0.0.1
 ** @purpose  1:22.2.3, lazy variable in value redirect 
 ** @verdict  pass accept, ttcn3verdict:pass
 *****************************************************************/

// The following requirements are tested:
// If a variable referenced in the value, sender or @index clause is a lazy or fuzzy 
// variable, the expression assigned to this variable is equal to the result produced 
// by the trigger operation i.e. later evaluation of the lazy or fuzzy variable does not 
// lead to repeated invocation of the trigger operation.

module Sem_220203_TriggerOperation_023 {
	type port P message {
		inout integer;
	} with {extension "internal"}
	
    type component GeneralComp {
		port P p;
	}
	    
    testcase TC_Sem_220203_TriggerOperation_023() runs on GeneralComp {
        var @lazy integer v_int;

		connect(self:p, self:p);
        p.send(1);
        p.send(2);
        p.send(3);
        p.trigger(integer:?) -> value v_int;

        if (v_int == 1) { // evaluation of @lazy (receive shall not be called again)
            alt {
                [] p.receive(integer:2) { setverdict(pass); }
                [] p.receive { setverdict(fail); }
            }
        } else {
            setverdict(fail);
        }
    }

    control {
        execute(TC_Sem_220203_TriggerOperation_023(), 5.0);
    }
}
