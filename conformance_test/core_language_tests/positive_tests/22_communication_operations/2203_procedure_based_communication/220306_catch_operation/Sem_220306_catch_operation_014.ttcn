/******************************************************************************
 * Copyright (c) ETSI 2017.
 *
 * This file is subject to copyrights owned by ETSI. Non-exclusive permission
 * is hereby granted, free of charge, to copy, reproduce and amend this file
 * under the following conditions: It is provided "as is", without warranty of any
 * kind, expressed or implied.
 * 
 * ETSI shall never be liable for any claim, damages, or other liability arising
 * from its use or inability of use.This permission does not apply to any documentation
 * associated with this file for which ETSI keeps all rights reserved. The present
 * copyright notice shall be included in all copies of whole or part of this
 * file and shall not imply any sub-license right.
 *
 * Modified by: Adrien Kirjak
 *
 ** @version  0.0.1
 ** @purpose  1:22.3.6, @decoded redirect value assignment with encoding parameter
 ** @verdict  pass accept, ttcn3verdict:pass
 *****************************************************************/

// The following requirements are tested:
// In case the referenced field is of the universal charstring type, the @decoded 
// clause can contain an optional parameter defining the encoding format. The 
// parameter shall be of the charstring type and it shall contain one of the 
// strings allowed for the decvalue_unichar function (specified in clause C.5.4).

module Sem_220306_catch_operation_014 {
	type record R {
        integer id,
        universal charstring payload
    }

	type integer I with {variant "FIELDLENGTH(16),ALIGN(left)"} 
    
    signature S() exception (R);
    
	type port P procedure {
		inout S;
	} with {extension "internal"}
	
    type component GeneralComp {
		port P p;
	}
    
    function f_server() runs on GeneralComp {
        var I v_src := 195;
        var R v_rec := { id := 5, payload := encvalue_unichar(v_src, "UTF-16LE") };
        p.getcall(S: {});
        p.raise(S, v_rec);
    }
	
    testcase TC_Sem_220306_catch_operation_014() runs on GeneralComp system GeneralComp {
        var I v_res;        
        var GeneralComp v_ptc := GeneralComp.create("PTC");
        connect(self:p, v_ptc:p);
        v_ptc.start(f_server());
        p.call(S:{}) {
            [] p.catch(S, R:?) -> value (v_res := @decoded("UTF-16LE") payload) { 
                if (v_res == 195) { setverdict (pass); }
                else { setverdict(fail); }
            }
            [] p.catch { setverdict(fail); }
        };
        v_ptc.done;
        setverdict(pass);
    }

    control {
        execute(TC_Sem_220306_catch_operation_014(), 5.0);
    }
} with {encode "RAW"}
