/******************************************************************************
 * Copyright (c) ETSI 2017.
 *
 * This file is subject to copyrights owned by ETSI. Non-exclusive permission
 * is hereby granted, free of charge, to copy, reproduce and amend this file
 * under the following conditions: It is provided "as is", without warranty of any
 * kind, expressed or implied.
 * 
 * ETSI shall never be liable for any claim, damages, or other liability arising
 * from its use or inability of use.This permission does not apply to any documentation
 * associated with this file for which ETSI keeps all rights reserved. The present
 * copyright notice shall be included in all copies of whole or part of this
 * file and shall not imply any sub-license right.
 *
 * Modified by: Adrien Kirjak
 *
 ** @version  0.0.1
 ** @purpose  1:22.3.6, catch with a from clause (multiple items)
 ** @verdict  pass accept, ttcn3verdict:pass
 *****************************************************************/

// The following requirements are tested:
// A catch operation may be restricted to a certain communication partner in case 
// of one-to-many connections. This restriction shall be denoted by using the from 
// keyword followed by a specification of an address or component reference, a list 
// of address or component references or any component.

module Sem_220306_catch_operation_016 {
	
	signature S() exception (charstring);
	
	type port P procedure {
		inout S;
	} with {extension "internal"}
	
    type component GeneralComp 
	{
		port P p;
	}
	
	function f() runs on GeneralComp
	{
        p.getcall(S:{});
        p.raise(S, "exc");
	}
    
    const integer c_ptcCount := 3;
	
    testcase TC_Sem_220306_catch_operation_016() runs on GeneralComp system GeneralComp {
        var GeneralComp v_ptcs[c_ptcCount];
        var integer v_fromCounter := 0, v_noFromCounter := 0;
        for (var integer i := 0; i < c_ptcCount; i := i + 1) {
            v_ptcs[i] := GeneralComp.create;
            connect(self:p, v_ptcs[i]:p);
            v_ptcs[i].start(f());
			p.call(S:{}, nowait) to v_ptcs[i];
        }
        
        for (var integer i := 0; i < c_ptcCount; i := i + 1) {
            alt {
                [] p.catch(S, charstring:?) from (v_ptcs[0], v_ptcs[1]) { v_fromCounter := v_fromCounter + 1; }
                [] p.catch(S, charstring:?) { v_noFromCounter := v_noFromCounter + 1; }
            }
        }
        if (v_fromCounter == 2 and v_noFromCounter == 1) { setverdict(pass); }
        else { setverdict(fail); }
    }

    control {
        execute(TC_Sem_220306_catch_operation_016(), 5.0);
    }
}
