/******************************************************************************
 * Copyright (c) ETSI 2017.
 *
 * This file is subject to copyrights owned by ETSI. Non-exclusive permission
 * is hereby granted, free of charge, to copy, reproduce and amend this file
 * under the following conditions: It is provided "as is", without warranty of any
 * kind, expressed or implied.
 * 
 * ETSI shall never be liable for any claim, damages, or other liability arising
 * from its use or inability of use.This permission does not apply to any documentation
 * associated with this file for which ETSI keeps all rights reserved. The present
 * copyright notice shall be included in all copies of whole or part of this
 * file and shall not imply any sub-license right.
 *
 * Modified by: Adrien Kirjak
 *
 ** @version  0.0.1
 ** @purpose  1:22.3.2, applying @decoded to a forbidden field
 ** @verdict  pass reject
 *****************************************************************/

// The following requirements are tested:
// When assigning individual fields of a message, encoded payload fields can be 
// decoded prior to assignment using the @decoded modifier. In this case, the 
// referenced field on the right hand sided of the assignment shall be one of the 
// bitstring, hexstring, octetstring, charstring or universal charstring types. It 
// shall be decoded into a value of the same type as the variable on the left hand 
// side of the assignment.

module NegSem_220302_GetcallOperation_011 {
    type record of integer RoI (0..255);
    
	signature S(RoI p_par);
    
	type port P procedure {
		inout S;
	} with {extension "internal"}
	
    type component GeneralComp {
		port P p;
	}
    
    function f_server() runs on GeneralComp {
        var integer v_res;      
        alt {
            [] p.getcall(S: {p_par := ?} ) -> param (v_res := @decoded p_par) { 
                setverdict (pass);
            }
            [] p.getcall { setverdict(fail); }
        }        
    }
    
    testcase TC_NegSem_220302_GetcallOperation_011() runs on GeneralComp system GeneralComp {
        var GeneralComp v_ptc := GeneralComp.create("PTC");
        connect(self:p, v_ptc:p);
        v_ptc.start(f_server());
        p.call(S:{ p_par := { 0, 0, 0, 0 } }, nowait);
        v_ptc.done;
        setverdict(pass);
    }

    control {
        execute(TC_NegSem_220302_GetcallOperation_011(), 5.0);
    }
} with {encode "RAW"}
