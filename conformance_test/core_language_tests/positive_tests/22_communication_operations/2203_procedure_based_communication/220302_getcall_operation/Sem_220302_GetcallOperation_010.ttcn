/******************************************************************************
 * Copyright (c) ETSI 2017.
 *
 * This file is subject to copyrights owned by ETSI. Non-exclusive permission
 * is hereby granted, free of charge, to copy, reproduce and amend this file
 * under the following conditions: It is provided "as is", without warranty of any
 * kind, expressed or implied.
 * 
 * ETSI shall never be liable for any claim, damages, or other liability arising
 * from its use or inability of use.This permission does not apply to any documentation
 * associated with this file for which ETSI keeps all rights reserved. The present
 * copyright notice shall be included in all copies of whole or part of this
 * file and shall not imply any sub-license right.
 *
 * Modified by: Adrien Kirjak
 *
 ** @version  0.0.1
 ** @purpose  1:22.3.2, Verify that any from done assigns index
 ** @verdict  pass accept, ttcn3verdict:pass
 *****************************************************************/
// The following requirements are tested:
// It is also possible to store the index of a port in a single-dimensional port array at which 
// the operation was successful to a variable of type integer or, in case of multi-dimensional 
// port arrays the index of the successful port to an integer array or record of integer variable.
// When checking the port array for matching calls, the port indices to be checked are iterated 
// from lowest to highest.
module Sem_220302_GetcallOperation_010 {

    signature S(integer p_par);
	
	type port P procedure {
		inout S;
	} with {extension "internal"}
	
	const integer c_portCount := 4;
    type component GeneralComp 
	{
		port P p[c_portCount];
	}
	
	function f() runs on GeneralComp
	{
		var integer v_index, v_parValue;

        alt
		{
        	[] any from p.getcall(S:{p_par := (0..c_portCount)}) -> param (v_parValue := p_par) @index value v_index { 
				if(v_index == 1 and v_parValue == v_index + 1){
		            setverdict(pass);
		        } else {
		            setverdict(fail, "Index or parameter value incorrectly assigned");
		        }
			}
			[else] { setverdict(fail, "The any from getcall operation didn't match for some reason");  } 
		}
	}
	
    testcase TC_Sem_220302_GetcallOperation_010() runs on GeneralComp system GeneralComp {
		var GeneralComp v_ptc := GeneralComp.create;

		for(var integer i := 0; i < c_portCount; i := i + 1) {
			connect(self:p[i], v_ptc:p[i]);
			if (i mod 2 > 0) { p[i].call(S:{ p_par := i + 1 }, nowait); }
		}

		v_ptc.start(f());
		v_ptc.done;	
    }

    control {
        execute(TC_Sem_220302_GetcallOperation_010(), 5.0);
    }
}
