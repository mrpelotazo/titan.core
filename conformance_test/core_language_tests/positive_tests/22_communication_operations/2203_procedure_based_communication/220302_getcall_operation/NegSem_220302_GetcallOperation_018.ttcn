/******************************************************************************
 * Copyright (c) ETSI 2017.
 *
 * This file is subject to copyrights owned by ETSI. Non-exclusive permission
 * is hereby granted, free of charge, to copy, reproduce and amend this file
 * under the following conditions: It is provided "as is", without warranty of any
 * kind, expressed or implied.
 * 
 * ETSI shall never be liable for any claim, damages, or other liability arising
 * from its use or inability of use.This permission does not apply to any documentation
 * associated with this file for which ETSI keeps all rights reserved. The present
 * copyright notice shall be included in all copies of whole or part of this
 * file and shall not imply any sub-license right.
 *
 * Modified by: Adrien Kirjak
 *
 ** @version  0.0.1
 ** @purpose  1:22.3.2, incompatible template in the from clause of the getcall operation
 ** @verdict  pass reject
 *****************************************************************/

// The following requirements are tested:
// f) All AddressRef items in the from clause and all VariableRef items in the sender clause
// shall be of type address, component or of the address type bound to the port type (see 
// section 6.2.9) of the port instance referenced in the getcall operation.

module NegSem_220302_GetcallOperation_018 {

	signature S() return integer;
	
	type port P procedure {
		inout S;
	} with {extension "internal"}
	
    type component GeneralComp {
		port P p;
	}
	
	function f() runs on GeneralComp {
        p.call(S:{}, nowait);
	}
	
    testcase TC_NegSem_220302_GetcallOperation_018() runs on GeneralComp system GeneralComp {
        var charstring v_addr := "addr";
        var GeneralComp v_ptc := GeneralComp.create;
		connect(self:p, v_ptc:p);
		v_ptc.start(f());
		alt {
            [] p.getcall(S:{}) from v_addr {} // error expected
            [] p.getcall {}
        }
        setverdict(pass);
    }

    control {
        execute(TC_NegSem_220302_GetcallOperation_018(), 5.0);
    }
}
