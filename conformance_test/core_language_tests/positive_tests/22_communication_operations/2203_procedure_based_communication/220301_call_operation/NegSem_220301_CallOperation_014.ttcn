/******************************************************************************
 * Copyright (c) ETSI 2017.
 *
 * This file is subject to copyrights owned by ETSI. Non-exclusive permission
 * is hereby granted, free of charge, to copy, reproduce and amend this file
 * under the following conditions: It is provided "as is", without warranty of any
 * kind, expressed or implied.
 * 
 * ETSI shall never be liable for any claim, damages, or other liability arising
 * from its use or inability of use.This permission does not apply to any documentation
 * associated with this file for which ETSI keeps all rights reserved. The present
 * copyright notice shall be included in all copies of whole or part of this
 * file and shall not imply any sub-license right.
 *
 * Modified by: Adrien Kirjak
 *
 ** @version  0.0.1
 ** @purpose  1:22.3.1, verify that getreply signature mismatch in the response and exception handling causes an error
 ** @verdict  pass reject
 *****************************************************************/

// The following requirements are tested:
// h) The selection of the alternatives to a call shall only be based on getreply and catch operations
// for the called procedure. Unqualified getreply and catch operations shall only treat replies from 
// and exceptions raised by the called procedure.

module NegSem_220301_CallOperation_014 {

	signature S1();
	signature S2();
	
	type port P procedure {
		inout S1, S2;
	} with {extension "internal"}
	
    type component GeneralComp {
		port P p;
	}
	
	function f_called() runs on GeneralComp {
		p.getcall(S1:{});
		p.reply(S1:{});
	}
	
    testcase TC_NegSem_220301_CallOperation_014() runs on GeneralComp system GeneralComp {
        var GeneralComp v_ptc := GeneralComp.create;
		connect(self:p, v_ptc:p);
		v_ptc.start(f_called());
		p.call(S1:{}) {
			[] p.getreply(S1:{}) { setverdict(pass, "Reply accepted"); }
			[] p.getreply(S2:{}) {} // error expected
		}
    }

    control {
        execute(TC_NegSem_220301_CallOperation_014(), 5.0);
    }
}
