/******************************************************************************
 * Copyright (c) ETSI 2017.
 *
 * This file is subject to copyrights owned by ETSI. Non-exclusive permission
 * is hereby granted, free of charge, to copy, reproduce and amend this file
 * under the following conditions: It is provided "as is", without warranty of any
 * kind, expressed or implied.
 * 
 * ETSI shall never be liable for any claim, damages, or other liability arising
 * from its use or inability of use.This permission does not apply to any documentation
 * associated with this file for which ETSI keeps all rights reserved. The present
 * copyright notice shall be included in all copies of whole or part of this
 * file and shall not imply any sub-license right.
 *
 * Modified by: Adrien Kirjak
 *
 ** @version  0.0.1
 ** @purpose  1:22.3.1, verify that inout parameters of a signature used in a call operation cannot be omitted
 ** @verdict  pass reject
 *****************************************************************/

// The following requirements are tested:
// b) All in and inout parameters of the signature shall have a specific value i.e. the use 
// of matching mechanisms such as AnyValue is not allowed.

module NegSem_220301_CallOperation_011 {

    signature S(inout integer p_par);

    type port P procedure {
        inout S;
    } with {extension "internal"}

    type component GeneralComp {
        port P p;
    }
	
	template S s_signature1 := { p_par := - };
	
    testcase TC_NegSem_220301_CallOperation_011() runs on GeneralComp system GeneralComp {
        var GeneralComp v_ptc := GeneralComp.create("PTC");
        connect(self:p, v_ptc:p);
        p.call(s_signature1, nowait);
        setverdict(pass);
    }

    control{
        execute(TC_NegSem_220301_CallOperation_011(), 5.0);
    }

}
