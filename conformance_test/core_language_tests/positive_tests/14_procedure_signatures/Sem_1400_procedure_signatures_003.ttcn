/******************************************************************************
 * Copyright (c) ETSI 2017.
 *
 * This file is subject to copyrights owned by ETSI. Non-exclusive permission
 * is hereby granted, free of charge, to copy, reproduce and amend this file
 * under the following conditions: It is provided "as is", without warranty of any
 * kind, expressed or implied.
 * 
 * ETSI shall never be liable for any claim, damages, or other liability arising
 * from its use or inability of use.This permission does not apply to any documentation
 * associated with this file for which ETSI keeps all rights reserved. The present
 * copyright notice shall be included in all copies of whole or part of this
 * file and shall not imply any sub-license right.
 *
 * Modified by: Adrien Kirjak
 *
 ** @version  0.0.1
 ** @purpose  1:14, Ensure that non blocking signatures can raise exception
 ** @verdict  pass accept, ttcn3verdict:pass
 *****************************************************************/
// Singature exception is an integer

module Sem_1400_procedure_signatures_003 {

    signature p_Sig1_001(in integer p_par1) noblock
	exception (integer);  //execption is an integer

    type port remotePort procedure {
        inout  p_Sig1_001;
    } with {extension "internal"}

    type component GeneralComp {
        port remotePort PCO;
		var integer MyComp;
    }
	
    function f_Server() runs on GeneralComp {
		PCO.raise(p_Sig1_001,5); // raise exception
	}  
	
	function f_client() runs on GeneralComp {
		timer t_timeout:=30.0;
		var integer temp;
		t_timeout.start;
	
		PCO.catch(p_Sig1_001,integer:5)-> value temp;

		if (temp==5)
		{
			setverdict(pass); // receive exception
		}
		else{
			setverdict(fail);	
		}
	}
	
	testcase TC_Sem_1400_procedure_signatures_003() runs on GeneralComp system GeneralComp {
      
		var GeneralComp server := GeneralComp.create("RemoteProcedure Service");
	   	var GeneralComp client := GeneralComp.create("RemoteProcedure Client");

       	connect(server:PCO, client:PCO);
	
       	server.start(f_Server());
	   	client.start(f_client());
		
		alt {
           	 [] client.done {
               	server.stop;
           	}
       	}

       	alt {
           	 [] all component.done {}
       	}

       	disconnect(server:PCO, client:PCO);
   	}

    control{
        execute(TC_Sem_1400_procedure_signatures_003());
    }

}
