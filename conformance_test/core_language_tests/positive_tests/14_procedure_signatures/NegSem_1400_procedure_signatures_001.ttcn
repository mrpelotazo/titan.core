/******************************************************************************
 * Copyright (c) ETSI 2017.
 *
 * This file is subject to copyrights owned by ETSI. Non-exclusive permission
 * is hereby granted, free of charge, to copy, reproduce and amend this file
 * under the following conditions: It is provided "as is", without warranty of any
 * kind, expressed or implied.
 * 
 * ETSI shall never be liable for any claim, damages, or other liability arising
 * from its use or inability of use.This permission does not apply to any documentation
 * associated with this file for which ETSI keeps all rights reserved. The present
 * copyright notice shall be included in all copies of whole or part of this
 * file and shall not imply any sub-license right.
 *
 * Modified by: Adrien Kirjak
 *
 ** @version  0.0.1
 ** @purpose  1:22.3.1, Ensure that nonblocking signature contains in parameter
 ** @verdict  pass reject
 *****************************************************************/

module NegSem_1400_procedure_signatures_001 {

    signature p_procedure_signatures_001(out integer p_par1) noblock; // noblock keyword, shall only have in parameters

    template p_procedure_signatures_001 s_returnTemplate := {
        p_par1 := -  }

    type port remotePort procedure {
        inout p_procedure_signatures_001;
    } with {extension "internal"}

    type component GeneralComp {
        port remotePort PCO;
    }

    function f_ClientQuery() runs on GeneralComp { }
	
	testcase TC_NegSem_1400_procedure_signatures_001() runs on GeneralComp system GeneralComp {
       var GeneralComp server := GeneralComp.create("RemoteProcedure Service");
       var GeneralComp client := GeneralComp.create("RemoteProcedure Client");
      
		// map the PTCs to the system port
       connect(server:PCO, client:PCO);

 
       client.start(f_ClientQuery());

       alt {
           [] client.done {
               server.stop;
           }
       }

       alt {
           [] all component.done {}
       }

       disconnect(server:PCO, client:PCO);
   }

    control{
        execute(TC_NegSem_1400_procedure_signatures_001());
    }

}
