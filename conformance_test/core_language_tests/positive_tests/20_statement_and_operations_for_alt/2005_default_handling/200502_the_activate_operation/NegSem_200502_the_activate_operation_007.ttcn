/******************************************************************************
 * Copyright (c) ETSI 2017.
 *
 * This file is subject to copyrights owned by ETSI. Non-exclusive permission
 * is hereby granted, free of charge, to copy, reproduce and amend this file
 * under the following conditions: It is provided "as is", without warranty of any
 * kind, expressed or implied.
 * 
 * ETSI shall never be liable for any claim, damages, or other liability arising
 * from its use or inability of use.This permission does not apply to any documentation
 * associated with this file for which ETSI keeps all rights reserved. The present
 * copyright notice shall be included in all copies of whole or part of this
 * file and shall not imply any sub-license right.
 *
 * Modified by: Adrien Kirjak
 *
 ** @version  0.0.1
 ** @purpose  1:20.5.2, local timer (referenced through timer parameter) as a parameter of activated altstep in module control
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// For altsteps activated in module control or in functions or altsteps invoked
// directly or indirectly from module control, all timer instances in the actual 
// parameter list shall be declared in the highest scope of the module control 
// part (see clause 26.2). Timers from lower scopes of the module control part 
// (i.e. from the nested statement blocks) are not allowed to occur in the actual
// parameter list.

module NegSem_200502_the_activate_operation_007 { 

	type port P message {
		inout integer;
	} with {extension "internal"}
	
	type component GeneralComp {
		port P p;
	}
	
	altstep a(timer t_tmr) {
		[] t_tmr.timeout { log ("Timeout in default"); }
	}
	
	testcase TC_NegSem_200502_the_activate_operation_007() runs on GeneralComp {
        setverdict(pass);
	}

    function f_activate(timer t_tmr) {
        activate(a(t_tmr));
    }
    
    function f_test() {
        timer t_tmr := 1.0;
        t_tmr.start;
        f_activate(t_tmr); // t_tmr is a local timer, this should lead to an activation error in f_activate
    }
    
	control{
        timer t_tmr2;
        f_test();
        alt {
            [] t_tmr2.timeout { }
        }
		execute(TC_NegSem_200502_the_activate_operation_007());
	}
}
