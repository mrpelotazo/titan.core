/******************************************************************************
 * Copyright (c) ETSI 2017.
 *
 * This file is subject to copyrights owned by ETSI. Non-exclusive permission
 * is hereby granted, free of charge, to copy, reproduce and amend this file
 * under the following conditions: It is provided "as is", without warranty of any
 * kind, expressed or implied.
 * 
 * ETSI shall never be liable for any claim, damages, or other liability arising
 * from its use or inability of use.This permission does not apply to any documentation
 * associated with this file for which ETSI keeps all rights reserved. The present
 * copyright notice shall be included in all copies of whole or part of this
 * file and shall not imply any sub-license right.
 *
 * Modified by: Adrien Kirjak
 *
 ** @version  0.0.1
 ** @purpose  1:20.5.1, verify that deactivate deactivated default causes error
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// Calling a deactivate operation with an undefined default reference, e.g. an old reference 
// to a default that has already been deactivated, shall cause a runtime error.

module NegSem_200503_the_deactivate_operation_001 { 

	type port P message {
		inout integer;
	} with {extension "internal"}
	
	type component GeneralComp {
		port P p;
	}
	
	altstep a1() runs on GeneralComp {
		[] p.receive(integer:?) {
			setverdict(pass);
		}
	}
	
	testcase TC_NegSem_200503_the_deactivate_operation_001() runs on GeneralComp {
		var default v_default := activate(a1());		

		connect(self:p, self:p);
		p.send(integer:1);

		deactivate(v_default); // correct deactivation
		deactivate(v_default); // v_default is deactivated at this point -> runtime error

		activate(a1()); //reactivate, but previous line should give an error

		alt {
			[] p.receive(integer:0) { // not expected: leads to default invocation
				setverdict(fail);
			}
		}
	}

	control{
		execute(TC_NegSem_200503_the_deactivate_operation_001(), 1.0);
	}
}
