/******************************************************************************
 * Copyright (c) ETSI 2017.
 *
 * This file is subject to copyrights owned by ETSI. Non-exclusive permission
 * is hereby granted, free of charge, to copy, reproduce and amend this file
 * under the following conditions: It is provided "as is", without warranty of any
 * kind, expressed or implied.
 * 
 * ETSI shall never be liable for any claim, damages, or other liability arising
 * from its use or inability of use.This permission does not apply to any documentation
 * associated with this file for which ETSI keeps all rights reserved. The present
 * copyright notice shall be included in all copies of whole or part of this
 * file and shall not imply any sub-license right.
 *
 * Modified by: Adrien Kirjak
 *
 ** @version  0.0.1
 ** @purpose  1:20.2, repeat in procedure call block
 ** @verdict  pass accept, ttcn3verdict:pass
 *****************************************************************/

// The following requirement is tested:
// When used in statement blocks of the response and exception handling parts
// of blocking procedure calls, the repeat statement causes the re-evaluation
// of the response and exception handling part of the call (see clause 22.3.1).

module Sem_2003_the_repeat_statement_002 {

    signature S();
    
    type port MyPort procedure {
        inout S;
    } with {extension "internal"}
    
    type component GeneralComp { 
	    port MyPort p;
    }
    
    function f_mirror() runs on GeneralComp {
        p.getcall(S:?);
        p.reply(S:{});
    }
        
    testcase TC_Sem_2003_the_repeat_statement_002() runs on GeneralComp system GeneralComp {
        var GeneralComp v_ptc[2];
        var integer v_counter := 0;

        for(var integer i := 0; i < lengthof(v_ptc); i := i + 1) {
            v_ptc[i] := GeneralComp.create;
            connect(self:p, v_ptc[i]:p);
            v_ptc[i].start(f_mirror());
        }        

	    p.call(S:{}) to all component { // broadcast call (several replies expected)
            [] p.getreply(S:?) {
                v_counter := v_counter + 1;
                if (v_counter < lengthof(v_ptc)) { repeat; } // tested repeat
                else { setverdict(pass); }
            }
	    }
    }
    
    control {
	    execute(TC_Sem_2003_the_repeat_statement_002());
    }
}
