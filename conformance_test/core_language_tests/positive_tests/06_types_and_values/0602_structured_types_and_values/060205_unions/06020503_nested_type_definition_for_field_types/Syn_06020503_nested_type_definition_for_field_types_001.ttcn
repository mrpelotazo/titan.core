/******************************************************************************
 * Copyright (c) ETSI 2017.
 *
 * This file is subject to copyrights owned by ETSI. Non-exclusive permission
 * is hereby granted, free of charge, to copy, reproduce and amend this file
 * under the following conditions: It is provided "as is", without warranty of any
 * kind, expressed or implied.
 * 
 * ETSI shall never be liable for any claim, damages, or other liability arising
 * from its use or inability of use.This permission does not apply to any documentation
 * associated with this file for which ETSI keeps all rights reserved. The present
 * copyright notice shall be included in all copies of whole or part of this
 * file and shall not imply any sub-license right.
 *
 * Modified by: Adrien Kirjak
 *
 ** @version  0.0.1
 ** @purpose  1:6.2.5, union type declaration
 ** @verdict  pass accept, noexecution
 ***************************************************/

// The following requirement is tested:
// TTCN-3 supports the definition of types for union alternatives nested within 
// the union definition, similar to the mechanism for record types described in 
// clause 6.2.1.3.

module Syn_06020503_nested_type_definition_for_field_types_001 {
    
    type union MyUnionType 
	{	
		record {
            integer field1,
            integer field2 optional
        } option1,
		record of integer option2,
        union {
            integer suboption1,
            charstring suboption2
        } option3
	}

	type component GeneralComp {
	}


	testcase TC_Syn_06020503_nested_type_definition_for_field_types_001() runs on GeneralComp {
		setverdict(pass);
	}
	
	control{
		execute(TC_Syn_06020503_nested_type_definition_for_field_types_001());
	}
}
