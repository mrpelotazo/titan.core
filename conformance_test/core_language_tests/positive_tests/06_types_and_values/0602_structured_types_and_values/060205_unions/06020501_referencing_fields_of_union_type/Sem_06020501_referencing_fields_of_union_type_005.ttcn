/******************************************************************************
 * Copyright (c) ETSI 2017.
 *
 * This file is subject to copyrights owned by ETSI. Non-exclusive permission
 * is hereby granted, free of charge, to copy, reproduce and amend this file
 * under the following conditions: It is provided "as is", without warranty of any
 * kind, expressed or implied.
 * 
 * ETSI shall never be liable for any claim, damages, or other liability arising
 * from its use or inability of use.This permission does not apply to any documentation
 * associated with this file for which ETSI keeps all rights reserved. The present
 * copyright notice shall be included in all copies of whole or part of this
 * file and shall not imply any sub-license right.
 *
 * Modified by: Adrien Kirjak
 *
 ** @version  0.0.1
 ** @purpose  1:6.2.5.1, referencing nested alternative on left hand side of assignment
 ** @verdict  pass accept, ttcn3verdict:pass
 ***************************************************/

// The following requirement is tested:
// When referencing an alternative of a union type on the left hand side of 
// an assignment, the referenced alternative shall become the chosen one. This rule
// shall apply recursively if the reference contains alternatives of nested unions, 
// choosing all the referenced alternatives.

module Sem_06020501_referencing_fields_of_union_type_005 {  
    type component GeneralComp {
	}

    type union SubU {	
		integer suboption1,
		charstring suboption2
	}
    
    type union U {	
		integer option1,
		SubU option2
	}

    testcase TC_Sem_06020501_referencing_fields_of_union_type_005() runs on GeneralComp {
		var U v_union;
        v_union.option1 := 1;        
        if (v_union.option1 ==  1) { setverdict(pass); }
        else { setverdict(fail); }
        
        v_union.option2.suboption2 := "test";
        if (v_union.option2.suboption2 ==  "test") { setverdict(pass); }
        else { setverdict(fail); }
	}

	control{
		execute(TC_Sem_06020501_referencing_fields_of_union_type_005());
	}
}