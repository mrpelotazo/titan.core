/******************************************************************************
 * Copyright (c) ETSI 2017.
 *
 * This file is subject to copyrights owned by ETSI. Non-exclusive permission
 * is hereby granted, free of charge, to copy, reproduce and amend this file
 * under the following conditions: It is provided "as is", without warranty of any
 * kind, expressed or implied.
 * 
 * ETSI shall never be liable for any claim, damages, or other liability arising
 * from its use or inability of use.This permission does not apply to any documentation
 * associated with this file for which ETSI keeps all rights reserved. The present
 * copyright notice shall be included in all copies of whole or part of this
 * file and shall not imply any sub-license right.
 *
 * Modified by: Adrien Kirjak
 *
 ** @version  0.0.1
 ** @purpose 1:6.5.2, Ensure that union is initialized by anytype dot notation
 ** @verdict  pass accept, ttcn3verdict:pass
 ***************************************************/
 
/*The following requirement is tested:
 * AlternativeId shall resolve to the name of an alternative in the union type or
 * in case of an anytype value or template AlternativeId shall resolve to a known type name
 * or a known type name qualified with a module name.
 */

module Sem_06020501_referencing_fields_of_union_type_008 {
	type union MyUnionType 
	{	
		integer 	number,
		anytype 	string
	};	
    type integer My_Int;
	
	type component GeneralComp {	    	    
	};

	
	testcase TC_Sem_06020501_referencing_fields_of_union_type_008 () runs on GeneralComp {
		var MyUnionType v_mut ;
		v_mut.string.My_Int := 3;    // AlternativeID shall resolve type e.g. My_Int
		
		if (v_mut.string.My_Int == 3) {
			setverdict(pass);
		}
		else {
			setverdict(fail);
		}
	}
 
	control {
		execute(TC_Sem_06020501_referencing_fields_of_union_type_008());
	}
}
with {
	extension "anytype My_Int"
}
