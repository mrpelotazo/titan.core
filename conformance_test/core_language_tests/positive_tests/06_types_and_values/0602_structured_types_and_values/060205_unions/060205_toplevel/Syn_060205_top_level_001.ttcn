/******************************************************************************
 * Copyright (c) ETSI 2017.
 *
 * This file is subject to copyrights owned by ETSI. Non-exclusive permission
 * is hereby granted, free of charge, to copy, reproduce and amend this file
 * under the following conditions: It is provided "as is", without warranty of any
 * kind, expressed or implied.
 * 
 * ETSI shall never be liable for any claim, damages, or other liability arising
 * from its use or inability of use.This permission does not apply to any documentation
 * associated with this file for which ETSI keeps all rights reserved. The present
 * copyright notice shall be included in all copies of whole or part of this
 * file and shall not imply any sub-license right.
 *
 * Modified by: Adrien Kirjak
 *
 ** @version  0.0.1
 ** @purpose  1:6.2.5, union type declaration
 ** @verdict  pass accept, noexecution
 ***************************************************/

// The following requirement is tested:
// TTCN-3 supports the union type. The union type is a collection of alternatives,
// each one identified by an identifier. Only one of the specified alternatives 
// will ever be present in an actual union value. Union types are useful to model 
// data which can take one of a finite number of known types.

module Syn_060205_top_level_001 {
    const integer number := 4; // to test rules on uniqueness of identifiers
    
    type union MyUnionType 
	{	
		integer 		number,
		charstring 		string
	}

	type component GeneralComp {
	}
	
	testcase TC_Syn_060205_top_level_001() runs on GeneralComp {
		setverdict(pass);
	}

	control{
		execute(TC_Syn_060205_top_level_001());
	}
}
