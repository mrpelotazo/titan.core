/******************************************************************************
 * Copyright (c) ETSI 2017.
 *
 * This file is subject to copyrights owned by ETSI. Non-exclusive permission
 * is hereby granted, free of charge, to copy, reproduce and amend this file
 * under the following conditions: It is provided "as is", without warranty of any
 * kind, expressed or implied.
 * 
 * ETSI shall never be liable for any claim, damages, or other liability arising
 * from its use or inability of use.This permission does not apply to any documentation
 * associated with this file for which ETSI keeps all rights reserved. The present
 * copyright notice shall be included in all copies of whole or part of this
 * file and shall not imply any sub-license right.
 *
 * Modified by: Adrien Kirjak
 *
 ** @version  0.0.1
 ** @purpose  1:6.2.9, Verify that it is possible to define procedute-based port types
 ** @verdict  pass accept, noexecution
 *****************************************************************/

module Syn_060209_CommunicationPortTypes_003 {

    signature S1();
	signature S2(in integer p_par1);
	signature S3(in charstring p_par1);
	signature S4(in integer p_par1) return bitstring;
	signature S5(in charstring p_par1, out charstring p_par2) return boolean;

    // Procedure-based port which allows to accept calls to procedures S1, S2 and S4, call
	// procedure S3. S5 calls can be both accepted or dispatched.
    type port MyProcedurePortTypeOne procedure {
        in S1, S2;
        out S3;
		in S4;
        inout S5;
    } with {extension "internal"}

	type component GeneralComp {
    }

	testcase TC_Syn_060209_CommunicationPortTypes_003() runs on GeneralComp {
		setverdict(pass);
	}

	control{
        execute(TC_Syn_060209_CommunicationPortTypes_003());
    }

}
