/******************************************************************************
 * Copyright (c) ETSI 2017.
 *
 * This file is subject to copyrights owned by ETSI. Non-exclusive permission
 * is hereby granted, free of charge, to copy, reproduce and amend this file
 * under the following conditions: It is provided "as is", without warranty of any
 * kind, expressed or implied.
 * 
 * ETSI shall never be liable for any claim, damages, or other liability arising
 * from its use or inability of use.This permission does not apply to any documentation
 * associated with this file for which ETSI keeps all rights reserved. The present
 * copyright notice shall be included in all copies of whole or part of this
 * file and shall not imply any sub-license right.
 *
 * Modified by: Adrien Kirjak
 *
 ** @version  0.0.1
 ** @purpose  1:6.2.9, Verify that an error is generated when a signature port definition contains multiple address clauses
 ** @verdict  pass reject
 *****************************************************************/

// The following requirements are tested:
// Restriction a:
// At most one address type should be bound to a port type.

module NegSem_060209_CommunicationPortTypes_006 {

    type record MyType1 {
        integer f1,
        charstring f2
    }

	type record MyType2 {
	    integer g1,
	    charstring g2
	}

	type record MyType3 {
	    boolean h1,
        MyType3 h2 optional
	}

	signature S() return integer;
	
    type port MyMessagePortTypeOne procedure {
        address MyType1;
        address MyType2;		//more than one address type
        in S;
      // map param (in integer p1, inout MyType2 p2);
      // unmap param (in MyType3 p1, out integer p2);
    } with {extension "internal"}

    type component GeneralComp {
        port MyMessagePortTypeOne pt_myPort;
    }
    
    testcase TC_NegSem_060209_CommunicationPortTypes_006() runs on GeneralComp system GeneralComp {
        setverdict(fail);
    }

    control{
        execute(TC_NegSem_060209_CommunicationPortTypes_006());
    }

}
