/******************************************************************************
 * Copyright (c) ETSI 2017.
 *
 * This file is subject to copyrights owned by ETSI. Non-exclusive permission
 * is hereby granted, free of charge, to copy, reproduce and amend this file
 * under the following conditions: It is provided "as is", without warranty of any
 * kind, expressed or implied.
 * 
 * ETSI shall never be liable for any claim, damages, or other liability arising
 * from its use or inability of use.This permission does not apply to any documentation
 * associated with this file for which ETSI keeps all rights reserved. The present
 * copyright notice shall be included in all copies of whole or part of this
 * file and shall not imply any sub-license right.
 *
 * Modified by: Adrien Kirjak
 *
 ** @version  0.0.1
 ** @purpose  1:15.8, Ensure that the template(present) with anyvalue(?) can't be assigned to an omit restricted variable template
 ** @verdict  pass reject
 *****************************************************************/


module NegSem_1508_TemplateRestrictions_029 {

    type record ExampleType {	// Exampletype record contains a charstring and a boolean
       	charstring a,
		boolean b 
    }	
	
	type component GeneralComp {
		var template (omit) ExampleType v_omit;	//omit restricted template variable
	}

	template (present) ExampleType MyintTemplate :={ 
	//actual template with present restriction contains anytype (?)
		a := ?,
		b := false
	}
	
	testcase TC_NegSem_1508_TemplateRestrictions_029() runs on GeneralComp {
      
		v_omit := MyintTemplate; //error: v_omit is omit restricted, hence can not contain anytype(?)
		
		if (valueof(v_omit.b) == false) {
      		setverdict(pass);
		} else {
            setverdict(fail);
       }
 	}

    control{
        execute(TC_NegSem_1508_TemplateRestrictions_029());
    }
}
