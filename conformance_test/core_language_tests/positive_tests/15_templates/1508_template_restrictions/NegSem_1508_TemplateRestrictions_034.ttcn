/******************************************************************************
 * Copyright (c) ETSI 2017.
 *
 * This file is subject to copyrights owned by ETSI. Non-exclusive permission
 * is hereby granted, free of charge, to copy, reproduce and amend this file
 * under the following conditions: It is provided "as is", without warranty of any
 * kind, expressed or implied.
 * 
 * ETSI shall never be liable for any claim, damages, or other liability arising
 * from its use or inability of use.This permission does not apply to any documentation
 * associated with this file for which ETSI keeps all rights reserved. The present
 * copyright notice shall be included in all copies of whole or part of this
 * file and shall not imply any sub-license right.
 *
 * Modified by: Adrien Kirjak
 *
 ** @version  0.0.1
 ** @purpose  1:15.8, Ensure that a template with omit restriction can't be assigned to a template(present)variable if omit
 ** @verdict  pass reject
 *****************************************************************/


module NegSem_1508_TemplateRestrictions_034 {

    type record ExampleType {	// Exampletype record contains a charstring and a boolean
       	charstring a ,
		boolean b optional
    }	
	
	type component GeneralComp {
		var template (present) ExampleType v_present;	//value restricted template variable
	}

	template (omit) ExampleType MyintTemplate := omit;	//actual template (omit) is omit

	testcase TC_NegSem_1508_TemplateRestrictions_034() runs on GeneralComp {
      
		v_present := MyintTemplate;	//error: v_present is present restricted, hence can not be omit
		
		if (valueof(v_present.b) == false) {
      		setverdict(pass);
		} else {
            setverdict(fail);
       }
 	}

    control{
        execute(TC_NegSem_1508_TemplateRestrictions_034());
    }
}
