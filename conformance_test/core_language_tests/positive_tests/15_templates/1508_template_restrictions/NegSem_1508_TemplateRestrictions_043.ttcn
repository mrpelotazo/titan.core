/******************************************************************************
 * Copyright (c) ETSI 2017.
 *
 * This file is subject to copyrights owned by ETSI. Non-exclusive permission
 * is hereby granted, free of charge, to copy, reproduce and amend this file
 * under the following conditions: It is provided "as is", without warranty of any
 * kind, expressed or implied.
 * 
 * ETSI shall never be liable for any claim, damages, or other liability arising
 * from its use or inability of use.This permission does not apply to any documentation
 * associated with this file for which ETSI keeps all rights reserved. The present
 * copyright notice shall be included in all copies of whole or part of this
 * file and shall not imply any sub-license right.
 *
 * Modified by: Adrien Kirjak
 *
 ** @version  0.0.1
 ** @purpose  1:15.8, Ensure that template(present) can be parameter to template(omit)
 ** @verdict  pass reject
 *****************************************************************/

module NegSem_1508_TemplateRestrictions_043 {

    type record ExampleType {	// Exampletype record integer and a boolean
       	integer a,
		boolean b 
    }	
	
	type component GeneralComp {
	}

	template (omit) ExampleType m_baseTemplate(template integer MyintTemplate := 1) :={
		a := MyintTemplate,	// template is not allowed parameter in omit restriction 
		b := true
	}
	
	testcase TC_NegSem_1508_TemplateRestrictions_043() runs on GeneralComp {
      
		
		if (ispresent(m_baseTemplate.a) == true) {
      		setverdict(pass);
		} else {
            setverdict(fail);
       	}
 	}

    control{
        execute(TC_NegSem_1508_TemplateRestrictions_043());
    }
}
