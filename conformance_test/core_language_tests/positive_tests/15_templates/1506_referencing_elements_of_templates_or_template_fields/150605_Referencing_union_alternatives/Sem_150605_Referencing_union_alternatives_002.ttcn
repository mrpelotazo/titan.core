/******************************************************************************
 * Copyright (c) ETSI 2017.
 *
 * This file is subject to copyrights owned by ETSI. Non-exclusive permission
 * is hereby granted, free of charge, to copy, reproduce and amend this file
 * under the following conditions: It is provided "as is", without warranty of any
 * kind, expressed or implied.
 * 
 * ETSI shall never be liable for any claim, damages, or other liability arising
 * from its use or inability of use.This permission does not apply to any documentation
 * associated with this file for which ETSI keeps all rights reserved. The present
 * copyright notice shall be included in all copies of whole or part of this
 * file and shall not imply any sub-license right.
 *
 * Modified by: Adrien Kirjak
 *
 ** @version  0.0.1
 ** @purpose  1:15.6.5, Ensure that template variables allow referencing with an Anyvalue union template
 ** @verdict  pass accept, ttcn3verdict:pass
 *****************************************************************/
 
//Restriction b)
/*when referencing an alternative of a union template or template field to which AnyValue is
assigned, at the right hand side of an assignment, AnyValue shall be returned.*/

module Sem_150605_Referencing_union_alternatives_002{

    type union My_Union {
        integer   u1,
        float     u2
    }
    
    type record ExampleType {	// Exampletype record with union
	    integer a,
	    My_Union b optional
    }
       
    type port loopbackPort message
	{inout ExampleType} with {extension "internal"};
	

    type component GeneralComp {	    	    
	  port loopbackPort messagePort
    }	

    testcase TC_Sem_150605_Referencing_union_alternatives_002() runs on GeneralComp {

    	var template ExampleType m_template;
    	var template integer m_template_2;

    	//assign values to template:
    
		m_template.a:=10;	
		m_template.b := ?;

		m_template_2 := m_template.b.u1;	//m_template_2 :=?
    
      	if (ispresent(m_template_2))
	    {
			setverdict(pass,m_template_2);
		} else {
			setverdict(fail,m_template_2);
		}

 	}

    control{
        execute(TC_Sem_150605_Referencing_union_alternatives_002());
    }
}
