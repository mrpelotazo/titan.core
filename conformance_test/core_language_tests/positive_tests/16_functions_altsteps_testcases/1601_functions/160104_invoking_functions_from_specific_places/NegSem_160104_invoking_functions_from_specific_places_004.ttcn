/******************************************************************************
 * Copyright (c) ETSI 2017.
 *
 * This file is subject to copyrights owned by ETSI. Non-exclusive permission
 * is hereby granted, free of charge, to copy, reproduce and amend this file
 * under the following conditions: It is provided "as is", without warranty of any
 * kind, expressed or implied.
 * 
 * ETSI shall never be liable for any claim, damages, or other liability arising
 * from its use or inability of use.This permission does not apply to any documentation
 * associated with this file for which ETSI keeps all rights reserved. The present
 * copyright notice shall be included in all copies of whole or part of this
 * file and shall not imply any sub-license right.
 *
 * Modified by: Adrien Kirjak
 *
 ** @version  0.0.1
 ** @purpose  1:16.1.4, Ensure that the IUT recognizes restrictions described in section 16.1.4. STF409 assumes that the list given in section 16.1.4 describes mandatory restrictions
 ** @verdict  pass reject
 ***************************************************/
module NegSem_160104_invoking_functions_from_specific_places_004 {
	
    type port loopbackPort message {
        inout integer
    } with {extension "internal"}
	

    type component GeneralComp {
        port loopbackPort messagePort
    }
	
    function f_test(inout integer p_int) return boolean {  	//issue of inout parameter
        p_int:=1;
        return true;
    }

    testcase TC_NegSem_160104_invoking_functions_from_specific_places_004 () runs on GeneralComp {
        var integer v_i:=0;

		connect(self:messagePort,self:messagePort);

        messagePort.send(1);
        alt {
            [f_test(v_i)] messagePort.receive {
                v_i:=0;
                setverdict(fail, "function call not allowed in guard");
            }
            [] messagePort.receive {
                v_i:=1;
                setverdict(pass);
            }
        }
    }

    control{

        execute(TC_NegSem_160104_invoking_functions_from_specific_places_004());

    }

}
