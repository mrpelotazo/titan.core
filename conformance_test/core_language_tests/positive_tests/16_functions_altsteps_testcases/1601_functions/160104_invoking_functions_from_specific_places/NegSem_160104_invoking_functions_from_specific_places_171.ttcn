/******************************************************************************
 * Copyright (c) ETSI 2017.
 *
 * This file is subject to copyrights owned by ETSI. Non-exclusive permission
 * is hereby granted, free of charge, to copy, reproduce and amend this file
 * under the following conditions: It is provided "as is", without warranty of any
 * kind, expressed or implied.
 * 
 * ETSI shall never be liable for any claim, damages, or other liability arising
 * from its use or inability of use.This permission does not apply to any documentation
 * associated with this file for which ETSI keeps all rights reserved. The present
 * copyright notice shall be included in all copies of whole or part of this
 * file and shall not imply any sub-license right.
 *
 * Modified by: Adrien Kirjak
 *
 ** @version  0.0.1
 ** @purpose  1:16.1.4, verify a function called during receiving operation cannot contain an out parameter (as actual parameters)
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// If value returning functions are called in receiving communication operations (in templates, template fields, 
// in-line templates, or as actual parameters), in guards or events of alt statements or altsteps (see clause 20.2), 
// or in initializations of altstep local definitions (see clause 16.2), the following operations shall not be 
// used in functions called in the cases specified above, in order to avoid side effects that cause changing the 
// state of the component or the actual snapshot and to prevent different results of subsequent evaluations 
// on an unchanged snapshot:
// j) Calling functions and deterministic external functions with out or inout parameters (see notes 7 and 8).

module NegSem_160104_invoking_functions_from_specific_places_171 { 
	type record R {
		integer field1
	}

    type port P message {
        inout R;
    } with {extension "internal"}

    type component GeneralComp {
        port P p;
		var integer vc_int;
	}
    
	function f_test(out integer p_out) runs on GeneralComp return template integer {
		p_out := 1;
		return ?;
	}

	template R m_msg (template integer p_par) := {
		field1 := p_par
	}

    testcase TC_NegSem_160104_invoking_functions_from_specific_places_171() runs on GeneralComp system GeneralComp {        
        var integer v_int;
        connect(mtc:p, mtc:p);
        p.send(R:{ field1 := 1 });
		p.receive(m_msg(f_test(v_int)));
		setverdict(pass);
	}

	control {
		execute(TC_NegSem_160104_invoking_functions_from_specific_places_171());
	}
}
