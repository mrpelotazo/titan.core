/******************************************************************************
 * Copyright (c) ETSI 2017.
 *
 * This file is subject to copyrights owned by ETSI. Non-exclusive permission
 * is hereby granted, free of charge, to copy, reproduce and amend this file
 * under the following conditions: It is provided "as is", without warranty of any
 * kind, expressed or implied.
 * 
 * ETSI shall never be liable for any claim, damages, or other liability arising
 * from its use or inability of use.This permission does not apply to any documentation
 * associated with this file for which ETSI keeps all rights reserved. The present
 * copyright notice shall be included in all copies of whole or part of this
 * file and shall not imply any sub-license right.
 *
 * Modified by: Adrien Kirjak
 *
 ** @version  0.0.1
 ** @purpose  1:16.1.2, Ensure that predefined encvalue function works correctly (as specified in Annex C.5.1)
 ** @verdict  pass accept, ttcn3verdict:pass
 ***************************************************/

// The following requirements are tested:
// (C.5.1) The encvalue function encodes a value or template into a bitstring. When the actual 
// parameter that is passed to inpar is a template, it shall resolve to a specific value (the 
// same restrictions apply as for the argument of the send statement). The returned bitstring 
// represents the encoded value of inpar, however, the TTCN-3 test system need not make any 
// check on its correctness.

module Sem_160102_predefined_functions_016 {
    type integer I with { variant "32 bit"};

    type component GeneralComp {
    }

    testcase TC_Sem_160102_predefined_functions_016 () runs on GeneralComp {
        var template I v_test := 0;
		var bitstring v_res := encvalue(v_test);
		if (lengthof(v_res) == 32) {
			setverdict(pass);
		} else {
			setverdict(fail, "Invalid encoding length");
		}
    }

    control{
        execute(TC_Sem_160102_predefined_functions_016());
    }
} with {encode "RAW"}
