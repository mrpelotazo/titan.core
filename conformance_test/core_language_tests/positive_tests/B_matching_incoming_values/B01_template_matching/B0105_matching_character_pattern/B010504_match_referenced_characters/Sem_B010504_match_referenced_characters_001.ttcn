/******************************************************************************
 * Copyright (c) ETSI 2017.
 *
 * This file is subject to copyrights owned by ETSI. Non-exclusive permission
 * is hereby granted, free of charge, to copy, reproduce and amend this file
 * under the following conditions: It is provided "as is", without warranty of any
 * kind, expressed or implied.
 * 
 * ETSI shall never be liable for any claim, damages, or other liability arising
 * from its use or inability of use.This permission does not apply to any documentation
 * associated with this file for which ETSI keeps all rights reserved. The present
 * copyright notice shall be included in all copies of whole or part of this
 * file and shall not imply any sub-license right.
 *
 * Modified by: Adrien Kirjak
 *
 ** @version  0.0.1
 ** @purpose  1:B.1.5.4, Ensure that the IUT correctly handles template matching of character pattern reference characters
 ** @verdict  pass accept, ttcn3verdict:pass
 ***************************************************/

module Sem_B010504_match_referenced_characters_001 { 

    modulepar {
     	charstring MOD_REF:="e";
    }
    
	type charstring CharRange ("e".."t"); 

	type record MessageType {
  	 	charstring  	field1, 
  	 	charstring		field2,
  	 	charstring		field3,
  	 	charstring  	field4, 
  	 	charstring		field5,
  	 	charstring		field6
	}

    type port loopbackPort message {
	  	inout MessageType
	} with {extension "internal"}
	
    const charstring c_Ref:="s";

	type component GeneralComp {	    	    
	  	port loopbackPort messagePort
	}	

	testcase TC_Sem_B010504_match_referenced_characters_001(charstring p_Ref) runs on GeneralComp {

    	var MessageType v_testMessage;
    	var charstring v_Ref:="s";
    	template charstring m_Ref:="s";
 
 		template MessageType mw_matchingTemplate:= {  	
		  	field1 := pattern "te[\N{v_Ref}]t",
		  	field2 := pattern "[\N{c_Ref}et]+", 
		  	field3 := pattern "[\N{MOD_REF}-t]+",
		  	field4 := pattern "te[\N{p_Ref}]t",
		  	field5 := pattern "te\N{m_Ref}t",
		  	field6 := pattern "\N{CharRange}+"
 		}; 

 		v_testMessage:=  {  
		  	field1 := "test",
		  	field2 := "test", 
		  	field3 := "test",
		  	field4 := "test",
		  	field5 := "test",
		  	field6 := "test"
 		}; 
 
		connect(self:messagePort, self:messagePort);
 		messagePort.send(v_testMessage);

    	alt {
     		[] messagePort.receive(mw_matchingTemplate) {
        		setverdict(pass);
     		}
     		[] messagePort.receive {
        		setverdict(fail);
     		}
    	}
	}

	control{
		execute(TC_Sem_B010504_match_referenced_characters_001("s"));
	}

}
 
