/******************************************************************************
 * Copyright (c) ETSI 2017.
 *
 * This file is subject to copyrights owned by ETSI. Non-exclusive permission
 * is hereby granted, free of charge, to copy, reproduce and amend this file
 * under the following conditions: It is provided "as is", without warranty of any
 * kind, expressed or implied.
 * 
 * ETSI shall never be liable for any claim, damages, or other liability arising
 * from its use or inability of use.This permission does not apply to any documentation
 * associated with this file for which ETSI keeps all rights reserved. The present
 * copyright notice shall be included in all copies of whole or part of this
 * file and shall not imply any sub-license right.
 *
 * Modified by: Adrien Kirjak
 *
 ** @version  0.0.1
 ** @purpose  1:B.1.3.3, Ensure that type restriction for all from clause in permutation is applied
 ** @verdict  pass reject
 ***************************************************/

// The following requirement is tested:
// The member type of the permutation and the member type of the template in the all 
// from clause shall be compatible.

module NegSem_B010303_permutation_004 { 

	type record of float RoF;
	type record of integer RoI;
	
	template RoF t_source := { ?, * }
	// float value is not compatible with integer (even though the actual symbols are 
	// generic and would work with integer elements too)
	template RoI t_perm1 := { permutation ( 3, all from t_source ) }; 
	
	type component GeneralComp {	    	    
	}	

	testcase TC_NegSem_B010303_permutation_004() runs on GeneralComp {
		if (match({ 2, 3 }, t_perm1)) {
			setverdict(pass);
		} else {
			setverdict(fail);
		}
	}

	control{
	    execute(TC_NegSem_B010303_permutation_004());
	}

}
 
