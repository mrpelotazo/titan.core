/******************************************************************************
 * Copyright (c) ETSI 2017.
 *
 * This file is subject to copyrights owned by ETSI. Non-exclusive permission
 * is hereby granted, free of charge, to copy, reproduce and amend this file
 * under the following conditions: It is provided "as is", without warranty of any
 * kind, expressed or implied.
 * 
 * ETSI shall never be liable for any claim, damages, or other liability arising
 * from its use or inability of use.This permission does not apply to any documentation
 * associated with this file for which ETSI keeps all rights reserved. The present
 * copyright notice shall be included in all copies of whole or part of this
 * file and shall not imply any sub-license right.
 *
 * Modified by: Adrien Kirjak
 *
 ** @version  0.0.1
 ** @purpose  1:B.1.3.3, Ensure that the IUT correctly handles template matching of ? symbols in value elements
 ** @verdict  pass reject
 ***************************************************/

module NegSem_B010303_permutation_001 {
	type record MessageType {
		set of integer field1, // permutation can only be applied to a record of type
		set of integer field2,
		set of integer field3,
		set of integer field4
	}

	type port loopbackPort message {
		inout MessageType;
	} with {extension "internal"}

	type component GeneralComp {
		port loopbackPort messagePort;
	}

	testcase TC_NegSem_B010303_permutation_001() runs on GeneralComp {
		timer t := 1.0;
		var MessageType v_testMessage;

		template MessageType mw_matchingTemplate := {
			field1 := {permutation(1, 2, 3), 5},
			field2 := {permutation(1, 2, ?), 5},
			field3 := {permutation(1, 2, 3), *},
			field4 := {permutation((1, 2, 3), 2, 3), 5}
		}

		v_testMessage := {
			field1 := {2, 1, 3, 5},
			field2 := {2, 1, 8, 5},
			field3 := {3, 2, 1, 8, 8},
			field4 := {3, 2, 2, 5}
		};
		
		t.start;

		connect(self:messagePort, self:messagePort);
		messagePort.send(v_testMessage);
		alt {
			[] messagePort.receive(mw_matchingTemplate) {
			  setverdict(pass);
			}
			[] t.timeout {
			  setverdict(fail);
			}
		}
	}
	control {
		execute(TC_NegSem_B010303_permutation_001());
	}
}
 
