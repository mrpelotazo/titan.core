/******************************************************************************
 * Copyright (c) ETSI 2017.
 *
 * This file is subject to copyrights owned by ETSI. Non-exclusive permission
 * is hereby granted, free of charge, to copy, reproduce and amend this file
 * under the following conditions: It is provided "as is", without warranty of any
 * kind, expressed or implied.
 * 
 * ETSI shall never be liable for any claim, damages, or other liability arising
 * from its use or inability of use.This permission does not apply to any documentation
 * associated with this file for which ETSI keeps all rights reserved. The present
 * copyright notice shall be included in all copies of whole or part of this
 * file and shall not imply any sub-license right.
 *
 * Modified by: Adrien Kirjak
 *
 ** @version  0.0.1
 ** @purpose  1:B.1.1.1, Ensure that the IUT correctly handles template matching of omitted values 
 ** @verdict  pass reject
 ***************************************************/

module NegSem_B010101_omitting_values_001 { 

	type record RecordType { 
 	 	integer  a optional, 
 	 	integer  b optional, 
 	 	boolean  c 
	} 

	type set SetType { 
 	 	integer  a optional, 
 	 	integer  b optional, 
 	 	boolean  c 
	} 

	type record MessageType {
  	 	RecordType	field1,
  	 	SetType		field2
	}

    type port loopbackPort message {
	  	inout MessageType
	} with {extension "internal"}
	
	type component GeneralComp {	    	    
	  	port loopbackPort messagePort
	}	

	testcase TC_NegSem_B010101_omitting_values_001() runs on GeneralComp {

		var MessageType v_testMessage;

	 	template MessageType mw_matchingTemplate:= 
	 	{  
	  		field1 := {a:=1,b:=omit,c:=omit},		//omitting a mandatory field
	  		field2 := {a:=1,b:=omit,c:=omit}
	 	} 

	 	v_testMessage:=  {  
	  		field1 := {a:=1,b:=omit,c:=true}, 
	  		field2 := {a:=1,b:=omit,c:=true}
	 	} 

		connect(self:messagePort, self:messagePort);
	 
	 	messagePort.send(v_testMessage);

	}

	control{
    	execute(TC_NegSem_B010101_omitting_values_001());
	}

}
