/******************************************************************************
 * Copyright (c) ETSI 2017.
 *
 * This file is subject to copyrights owned by ETSI. Non-exclusive permission
 * is hereby granted, free of charge, to copy, reproduce and amend this file
 * under the following conditions: It is provided "as is", without warranty of any
 * kind, expressed or implied.
 * 
 * ETSI shall never be liable for any claim, damages, or other liability arising
 * from its use or inability of use.This permission does not apply to any documentation
 * associated with this file for which ETSI keeps all rights reserved. The present
 * copyright notice shall be included in all copies of whole or part of this
 * file and shall not imply any sub-license right.
 *
 * Modified by: Adrien Kirjak
 *
 ** @version  0.0.1
 ** @purpose  1:B.1.2.2, Ensure that the IUT correctly handles template matching of complemented value listing 
 ** @verdict  pass reject
 ***************************************************/

module NegSem_B010202_complemented_value_list_002 { 

	type record MessageType {
  	 	integer   field1, 
  	 	RoI       field2
	}

    type record of integer RoI;

    type port loopbackPort message {
	  	inout MessageType
	} with {extension "internal"}
	

	type component GeneralComp {	    	    
	  	port loopbackPort messagePort
	}	

	testcase TC_NegSem_B010202_complemented_value_list_002() runs on GeneralComp {

		var MessageType v_testMessage;

    	template RoI m_RoI1 := {2, 3, (6..9)};

 		template MessageType mw_matchingTemplate:= 
 		{  
  			field1 := complement(0, 100),
  			field2 := complement(all from m_RoI1)
			// causes an error because member type of t_RoI1 (integer) is not compatible 
            // with the complemented list template type (RoI)
  
 		} 

	 	v_testMessage:=  {  
	  		field1 := 0,	
	  		field2 := {0,1}
	 	} 

		connect(self:messagePort, self:messagePort);
 
 		messagePort.send(v_testMessage);

    	alt {
     		[] messagePort.receive(mw_matchingTemplate) {
        		setverdict(pass);
     		}
     		[] messagePort.receive {
        		setverdict(fail);
     		}
    	}
	}

	control{
		execute(TC_NegSem_B010202_complemented_value_list_002());
	}

}
 
