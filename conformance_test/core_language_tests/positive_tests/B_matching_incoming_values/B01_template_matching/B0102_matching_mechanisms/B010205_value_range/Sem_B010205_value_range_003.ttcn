/******************************************************************************
 * Copyright (c) ETSI 2017.
 *
 * This file is subject to copyrights owned by ETSI. Non-exclusive permission
 * is hereby granted, free of charge, to copy, reproduce and amend this file
 * under the following conditions: It is provided "as is", without warranty of any
 * kind, expressed or implied.
 * 
 * ETSI shall never be liable for any claim, damages, or other liability arising
 * from its use or inability of use.This permission does not apply to any documentation
 * associated with this file for which ETSI keeps all rights reserved. The present
 * copyright notice shall be included in all copies of whole or part of this
 * file and shall not imply any sub-license right.
 *
 * Modified by: Adrien Kirjak
 *
 ** @version  0.0.1
 ** @purpose  1:B.1.2.5, Ensure that the IUT correctly handles template matching of value range definitions 
 ** @verdict  pass accept, ttcn3verdict:pass
 ***************************************************/

module Sem_B010205_value_range_003 { 

	type enumerated EnumeratedType {e_black, e_white, e_green};

	type record RecordType { 
 	 	integer  a optional, 
 	 	integer  b optional, 
 	 	boolean  c 
	} 

	type union UnionType { 
 	 	integer  a, 
 	 	EnumeratedType  b, 
 	 	boolean  c 
	} 

	type record MessageType {
  	 	integer  		field1, 
  	 	charstring  	field2, 
  	 	RecordType		field3,
  	 	UnionType		field4
	}

    type port loopbackPort message {
	  	inout MessageType
	} with {extension "internal"}
	

	type component GeneralComp {	    	    
	  	port loopbackPort messagePort
	}	

	testcase TC_Sem_B010205_value_range_003() runs on GeneralComp {

    	var MessageType v_testMessage;

 		template MessageType mw_matchingTemplate:= 
 		{  	
		  	field1 := (0..2),		
		  	field2 := ("a".."f") length (3),
		  	field3 := {a:=1,b:=(0..1),c:=true}, 	//value is out of range
		  	field4 := {a:=(0..2)}
 		} 

 		v_testMessage:=  {  
		  	field1 := 2,
		  	field2 := "abc", 
		  	field3 := {a:=1,b:=2,c:=true}, 
		  	field4 := {a:=1}
 		} 

 		connect(self:messagePort, self:messagePort);
 		messagePort.send(v_testMessage);

    	alt {
		 	[] messagePort.receive(mw_matchingTemplate) {
		    	setverdict(fail);
		 	}
		 	[] messagePort.receive {
		    	setverdict(pass);
		 	}
    	}
	}

	control{
		execute(TC_Sem_B010205_value_range_003());
	}

}
 
