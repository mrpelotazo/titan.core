/******************************************************************************
 * Copyright (c) ETSI 2017.
 *
 * This file is subject to copyrights owned by ETSI. Non-exclusive permission
 * is hereby granted, free of charge, to copy, reproduce and amend this file
 * under the following conditions: It is provided "as is", without warranty of any
 * kind, expressed or implied.
 * 
 * ETSI shall never be liable for any claim, damages, or other liability arising
 * from its use or inability of use.This permission does not apply to any documentation
 * associated with this file for which ETSI keeps all rights reserved. The present
 * copyright notice shall be included in all copies of whole or part of this
 * file and shall not imply any sub-license right.
 *
 * Modified by: Adrien Kirjak
 *
 ** @version  0.0.1
 ** @purpose  1:27.7, Ensure that the IUT correctly handles attribute definitions and their scoping rules 
 ** @verdict  pass accept, ttcn3verdict:pass
 ***************************************************/

module Sem_2707_OptionalAttributes_006 { 

	type enumerated EnumeratedType {e_black, e_white};

	type record RecordType { 
 	 	integer  a optional, 
 	 	integer  b optional, 
 	 	boolean  c 
	} 

	type set SetType { 
 	 	integer  a optional, 
 	 	integer  b optional, 
 	 	boolean  c 
	} 

	type record length (1..2) of integer IntegerList;

	type set length (1..2) of integer IntegerUList;

	type union UnionType { 
 	 	integer  a, 
 	 	EnumeratedType  b, 
 	 	boolean  c 
	} 

	type record MessageType {
  	 	integer  		field1, 
  	 	charstring  	field2, 
  	 	boolean  		field3, 
  	 	integer  		field4[4],
  	 	EnumeratedType 	field5,
  	 	RecordType		field6,
  	 	SetType			field7,
  	 	UnionType		field8,
  	 	IntegerList		field9,
  	 	IntegerUList	field10
	}

 	template MessageType mw_matchingTemplate:= 
 	{  
  		field1 := 1,
  		field2 := "test string",	 
  		field3 := true, 
  		field4 := {1,2,3,4},
  		field5 := e_black,
  		field6 := {c:=true}, 	//a and b fields are omitted
  		field7 := {c:=true}, 	//a and b fields are omitted
  		field8 := {a:=1},
  		field9 := {1},
  		field10 := {1,2}
 	} 

 	const MessageType c_testMessage:=  {  
	  	field1 := 1,
	  	field2 := "test string", 
	  	field3 := true, 
	  	field4 := {1,2,3,4},
	  	field5 := e_black,
	  	field6 := {a:=1,b:=omit,c:=true}, 
	  	field7 := {a:=omit,b:=1,c:=true}, 
	  	field8 := {a:=1},
	  	field9 := {1},
	  	field10 := {1,2}
	} 

    type port loopbackPort message {
	  	inout MessageType
	} with {extension "internal"}
	

	type component GeneralComp {	    	    
	  	port loopbackPort messagePort
	}	

	testcase TC_Sem_2707_OptionalAttributes_006() runs on GeneralComp {

		connect(self:messagePort, self:messagePort);

    	var MessageType v_testMessage:=c_testMessage;
 
 		messagePort.send(v_testMessage);

    	alt {
     		[] messagePort.receive(mw_matchingTemplate) {
        		setverdict(fail);
     		}
     		[] messagePort.receive {
        		setverdict(pass);
     		}
    	}
	}

	control{
    	execute(TC_Sem_2707_OptionalAttributes_006());
	}

} with { optional "implicit omit"}  //this attribute has an effect only on the template definition in the module
