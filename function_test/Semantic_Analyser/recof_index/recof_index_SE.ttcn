/******************************************************************************
 * Copyright (c) 2000-2018 Ericsson Telecom AB
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v2.0
 * which accompanies this distribution, and is available at
 * https://www.eclipse.org/org/documents/epl-2.0/EPL-2.0.html
 *
 * Contributors:
 *   Szabo, Bence Janos
 *
 ******************************************************************************/
module recof_index_SE { //^In TTCN-3 module//

  type set of set of integer SoSoI;
  type record of record of integer RoRoI;
  type record length(1) of integer RoIOne;
  type record length(1..2) of integer RoI1;
  type record length(3) of integer RoI2;
  type record of integer RoI;
  type set of integer SoI;

  type record length(1) of float RoF1;

  function f() { //^In function definition `f'//
    var RoRoI v_rec := {{0, 1}, {2, 3}};
    var RoI1 v_index := { 1 }
	if (v_rec[v_index] == {2, 3}) { //^In if statement:// //error: The type \`@recof_index_SE\.RoI1\' must have single size length restriction when used as a short-hand notation for nested indexes\.//
	}

    var RoI2 v_index2 := { 1, 2, 3 }
	if (v_rec[v_index2] == {2, 3}) { //^In if statement:// //error: The type \`@recof_index_SE.RoI2\' contains too many indexes \(3\) in the short-hand notation for nested indexes\.//
	}

	var integer v_arr[3] := { 1, 2, 3 }
	if (v_rec[v_arr] == {2, 3}) { //^In if statement:// //error: The type \`integer\[3\]\' contains too many indexes \(3\) in the short-hand notation for nested indexes\.//
	}

	var RoF1 v_index3 := { 1.0 }
	if (v_rec[v_index3] == {2, 3}) { //^In if statement:// //error\: Only fixed length array or record of integer types are allowed for short\-hand notation for nested indexes\.//
	}

	var integer v_arr2[0] := { } //In variable definition \`v_arr2\'\:// //error\: A positive integer value was expected as array size instead of \`0\'//
	if (v_rec[v_arr2] == {2, 3}) {
	}

	var RoI v_index4 := { 1, 1 }
	if (v_rec[v_index4] == {2, 3}) { //^In if statement:// //error\: The type \`\@recof_index_SE\.RoI\' must have single size length restriction when used as a short\-hand notation for nested indexes\.//
	}

  }


  const RoRoI c_roiroi1 := {{1,2}, {3,4}}
  
  const RoIOne c_roi := {3}; //error\: Index overflow in a value of \`record of\' type \`\@recof_index_SE\.RoRoI\'\: the index is 3\, but the value has only 2 elements//
  const RoI c_roi_err := c_roiroi1[c_roi]; //^In constant definition \`c_roi_err\'\:// 
  
  const RoIOne c_roi2 := {4}; //error\: Index overflow in a value of \`record of\' type \`\@recof_index_SE\.RoRoI\.SEQUENCE_OF\'\: the index is 4\, but the value has only 2 elements//
  const integer c_int_err := c_roiroi1[1][c_roi2]; //^In constant definition \`c_int_err\'\:// 
  
  const RoI2 c_roi3 := {1,1,1}; //error\: Invalid array element reference\: type \`integer\' cannot be indexed//
  const integer c_int_err2 := c_roiroi1[c_roi3]; //In constant definition \`c_int_err2\'\://


  const SoSoI c_soisoi1 := {{1,2}, {3,4}}
  
  const RoIOne c_roi4 := {3}; //error\: Index overflow in a value of \`set of\' type \`\@recof_index_SE\.SoSoI\'\: the index is 3\, but the value has only 2 elements//
  const SoI c_soi_err := c_soisoi1[c_roi4]; //^In constant definition \`c_soi_err\'\:// 
  
  const RoIOne c_roi5 := {4}; //error\: Index overflow in a value of \`set of\' type \`\@recof_index_SE\.SoSoI\.SET_OF\'\: the index is 4\, but the value has only 2 elements//
  const integer c_int_err3 := c_soisoi1[1][c_roi5]; //^In constant definition \`c_int_err3\'\:// 
  
  const RoI2 c_roi6 := {1,1,1}; //error\: Invalid array element reference\: type \`integer\' cannot be indexed//
  const integer c_int_err4 := c_soisoi1[c_roi6]; //In constant definition \`c_int_err4\'\://


  const integer c_arrarr1[2][2] := {{1,2}, {3,4}}
  
  const RoIOne c_roi7 := {3}; //error\: Array index overflow\: the index value must be at most \`1\' instead of \`3\'//
  const integer c_arr_err[2] := c_arrarr1[c_roi7]; //^In constant definition \`c_arr_err\'\:// 
  
  const RoIOne c_roi8 := {4}; //error\: Array index overflow\: the index value must be at most \`1\' instead of \`4\'//
  const integer c_int_err5 := c_arrarr1[1][c_roi8]; //^In constant definition \`c_int_err5\'\:// 
  
  const RoI2 c_roi9 := {1,1,1}; //error\: Invalid array element reference\: type \`integer\' cannot be indexed//
  const integer c_int_err6 := c_arrarr1[c_roi9]; //In constant definition \`c_int_err6\'\://

  

}
